{"version":3,"sources":["chassis.legacy.min.js","eventemitter.js","polyfill.js","core.js","ngn.js","exception.js","dom.js","bus.js","reference.js","net.js","svg.js","utility.js","model.js","store.js","proxy.js"],"names":["_possibleConstructorReturn","self","call","ReferenceError","_inherits","subClass","superClass","TypeError","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","_classCallCheck","instance","Constructor","_typeof","Symbol","iterator","obj","_createClass","defineProperties","target","props","i","length","descriptor","defineProperty","key","protoProps","staticProps","Array","findIndex","predicate","this","Error","list","thisArg","arguments","window","NGN","e","w","c","v","public","define","private","const","privateconst","get","fn","set","extend","attribute","specification","inherit","source","dest","getOwnPropertyNames","forEach","attr","definition","getOwnPropertyDescriptor","slice","splice","coalesce","arg","undefined","nodelike","node","require","dedupe","array","filter","element","index","indexOf","typeof","el","toString","split","replace","toLowerCase","name","stack","me","item","map","process","cwd","location","origin","trim","__dirname","path","substr","file","line","parseInt","column","css","global","document","addEventListener","body","classList","add","EventEmitter","cfg","handlers","adhoc","maxlisteners","defaultMaxListeners","eventName","keys","concat","callback","prepend","emit","listenerCount","on","apply","args","push","once","position","off","onceoff","clear","shift","events","getAllEvents","scope","event","adhocEvent","pop","handler","_fn","regularEvents","adhocEvents","allEvents","RegExp","test","subscriberList","_eventName","queued","pool","prefix","group","topic","console","warn","attach","preventDefaultAction","hasOwnProperty","preventDefault","unshift","bind","triggers","payload","listener","trigger","argList","remove","queue","delay","_this","_arguments","setTimeout","CustomException","_Error","config","_this2","getPrototypeOf","message","custom","type","severity","category","prepareStackTrace","_","_err","captureStackTrace","rawstack","err","cause","help","info","frame","getFileName","__filename","join","filename","getLineNumber","getColumnNumber","functionname","getFunctionName","native","isNative","eval","isEval","getTypeName","module","exports","DOM","ready","destroy","str","querySelectorAll","parentNode","removeChild","log","findParent","selector","maxDepth","currentNode","querySelector","nodeName","indexOfParent","children","ref","requireBUS","nm","BUS","error","qs","all","_find","reference","find","tmpref","html","els","result","isArray","base","evt","removeEventListener","forward","enumerble","_value","cleankey","cleanKey","val","ck","json","parser","DOMParser","fs","Network","xhr","res","XMLHttpRequest","onreadystatechange","readyState","run","method","url","NET","open","send","applyRequestSettings","params","parms","parm","encodeURIComponent","header","headers","setRequestHeader","JSON","stringify","form","FormData","append","withCredentials","username","password","btoa","accessToken","getFile","rsp","status","existsSync","responseText","readFileSync","normalizeUrl","uri","processImport","before","createTextNode","_ret2","out","insertBefore","appendChild","domainRoot","r","search","match","host","isCrossOrigin","prelink","rel","cor","head","p","createElement","href","pathname","setAttribute","importCache","parseFromString","applyData","tpl","data","re","parse","bypassCache","_this3","_ret3","num","int","setInterval","clearInterval","ext","s","onload","getElementsByTagName","doc","domain","protocol","fuoc","ss","svg","_cache","swap","svgs","attributes","output","getAttribute","attrs","exec","sep","x","idx","a","outerHTML","id","cleanCode","code","viewbox","cache","fetchFile","_this4","resolve","update","section","_splice","sec","imgs","unfetched","remaining","content","monitor","DATA","util","crcTable","makeCRCTable","n","k","checksum","crc","charCodeAt","GUID","lut","d0","Math","random","d1","d2","d3","Model","_NGN$EventEmitter","_this5","idAttribute","fields","required","String","default","joins","relationships","virtuals","validators","validation","isNew","isDestroyed","oid","autoid","benchmark","setUnmodified","changelog","allowInvalidSave","disableDataValidation","invalidDataAttributes","initialDataAttributes","_nativeValidators","min","_min","max","_max","enum","valid","field","_dataMap","dataMap","_reverseDataMap","raw","rawjoins","_store","allfields","datafields","virtualdatafields","addField","addRelationshipField","property","validator","_pass","validateDataType","rule","pass","_i","fieldType","expectedType","fieldname","_obj","rtn","nonEnumerableProperties","enumerableProperties","dsc","refs","toJSON","fieldcfg","suppressEvents","old","action","new","validate","addValidator","pattern","_source","entityType","Store","model","storeCfg","applyStoreMonitor","applyModelMonitor","delta","_this6","record","back","reverse","change","removeRelationshipField","removeField","reverseMap","load","_this7","_ret8","rmap","_this8","d","serialize","ModelLoader","Entity","_NGN$EventEmitter2","_this9","_data","_filters","_index","_created","_deleted","_loading","proxy","allowDuplicates","errorOnDuplicate","suppressEvent","dupe","isDuplicate","listen","applyIndices","rec","updateIndice","bulk","_this10","removedRecord","dataIndex","m","unapplyIndices","query","ignoreFilters","_this11","resultSet","_ret12","indice","getIndices","recordSet","contains","noindex","queryKeys","y","applyFilters","removed","records","dupes","duplicate","_this12","sort","functionKeys","b","reindex","exists","store","deleteIndex","number","indexes","values","oldValue","newValue","ct","dataArray","clearIndices","Proxy","_NGN$EventEmitter3","_this13","token","modified","delete"],"mappings":"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","file":"chassis.legacy.min.js","sourcesContent":["'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// Polyfill for IE11 & Safari\n// This is required to make the remove method work properly.\nif (!Array.prototype.findIndex) {\n  Array.prototype.findIndex = function (predicate) {\n    // eslint-disable-line no-extend-native\n    if (this === null) {\n      throw new Error('Array.prototype.findIndex called on null or undefined');\n    }\n    // if (typeof predicate !== 'function') {\n    //   throw new Error('Predicate must be a function (received ' + (typeof predicate) + ')')\n    // }\n    var list = Object(this);\n    var length = list.length >>> 0;\n    var thisArg = arguments[1];\n    var value;\n\n    for (var i = 0; i < length; i++) {\n      value = list[i];\n      if (predicate.call(thisArg, value, i, list)) {\n        return i;\n      }\n    }\n    return -1;\n  };\n}\n\n'use strict';\n\nwindow.NGN = {};\n\n'use strict';\n\n/**\n * @class NGN\n * @singleton\n */\n/**\n  * @method define\n  * Create an object definition for a property.\n  * For example:\n  *\n  * ```\n  * Object.defineProperty('attr', NGN.define(true, false, true, 'value'))\n  *\n  * // The snippet above is the same as:\n  * Object.defineProperty(this, 'attr', {\n  *  enumberable: true,\n  *  writable: false,\n  *  configurable: true,\n  *  value: 'value'\n  * })\n  * ```\n  * @param  {boolean} enumerable\n  * Determines if the attribute is considered an accessible part of the object.\n  * Making an attribute enumerable will make it show up as a key in an object,\n  * which can be iterated over (ex: `Object.keys()`). A non-enumerable asset is\n  * treated as a private attribute.\n  * @param  {boolean} writable\n  * Determines whether the value can be changed.\n  * @param  {boolean} configurable\n  * Determines whether the attribute can be removed from the object.\n  * @param  {any} value\n  * The actual value of the attribute.\n  * @private\n  */\nObject.defineProperty(NGN, 'define', {\n  enumerable: false,\n  writable: false,\n  configurable: false,\n  value: function value(e, w, c, v) {\n    return {\n      enumerable: e,\n      writable: w,\n      configurable: c,\n      value: v\n    };\n  }\n});\n\nObject.defineProperties(NGN, {\n  /**\n   * @method public\n   * Create a `public` property definition for an object.\n   * Example:\n   *\n   * ```\n   * Object.defineProperty(this, 'attr', NGN.public('somevalue'))\n   *\n   * // Longhand equivalent\n   * Object.defineProperty(this, 'attr', {\n   *  enumerable: true,\n   *  writable: true,\n   *  configurable: false,\n   *  value: 'somevalue'\n   * })\n   * ```\n   * @param  {any} value\n   * Any valid JavaScript value (function, boolean, number, string, etc)\n   * used as the value for the object attribute.\n   * @private\n   */\n  public: NGN.define(false, false, false, function (value) {\n    return NGN.define(true, typeof value !== 'function', false, value);\n  }),\n\n  /**\n   * @method private\n   * Create a `private` property definition for an object.\n   * Example:\n   *\n   * ```\n   * Object.defineProperty(this, 'attr', NGN.private('somevalue'))\n   *\n   * // Longhand equivalent\n   * Object.defineProperty(this, 'attr', {\n   *  enumerable: false,\n   *  writable: true,\n   *  configurable: false,\n   *  value: 'somevalue'\n   * })\n   * ```\n   * @param  {any} value\n   * Any valid JavaScript value (function, boolean, number, string, etc)\n   * used as the value for the object attribute.\n   * @private\n   */\n  private: NGN.define(false, false, false, function (value) {\n    return NGN.define(false, typeof value !== 'function', false, value);\n  }),\n\n  /**\n   * @method const\n   * Create a `public` constant property definition for an object.\n   * Example:\n   *\n   * ```\n   * Object.defineProperty(this, 'attr', NGN.const('somevalue'))\n   *\n   * // Longhand equivalent\n   * Object.defineProperty(this, 'attr', {\n   *  enumerable: true,\n   *  writable: false,\n   *  configurable: false,\n   *  value: 'somevalue'\n   * })\n   * ```\n   * @param  {any} value\n   * Any valid JavaScript value (function, boolean, number, string, etc)\n   * used as the value for the object attribute.\n   * @private\n   */\n  const: NGN.define(false, false, false, function (value) {\n    return NGN.define(true, false, false, value);\n  }),\n\n  /**\n   * @method privateconst\n   * Create a `private` constant property definition for an object.\n   * Example:\n   *\n   * ```\n   * Object.defineProperty(this, 'attr', NGN.privateconst('somevalue'))\n   *\n   * // Longhand equivalent\n   * Object.defineProperty(this, 'attr', {\n   *  enumerable: false,\n   *  writable: false,\n   *  configurable: false,\n   *  value: 'somevalue'\n   * })\n   * ```\n   * @param  {any} value\n   * Any valid JavaScript value (function, boolean, number, string, etc)\n   * used as the value for the object attribute.\n   * @private\n   */\n  privateconst: NGN.define(false, false, false, function (value) {\n    return NGN.define(false, false, false, value);\n  }),\n\n  /**\n   * @method get\n   * Create a private `getter` property definition for an object.\n   * Public getters are part of the ES2015 class spec.\n   *\n   * Example:\n   *\n   * ```\n   * let myFunction = function () {\n   *  return 'somevalue'\n   * }\n   *\n   * // Longhand equivalent\n   * Object.defineProperty(this, 'attr', {\n   *  enumerable: false,\n   *  get: function () {\n   *    return 'somevalue'\n   *  }\n   * })\n   * ```\n   * @param  {function} fn\n   * Any valid async JavaScript function with a `return` value.\n   * @private\n   */\n  get: NGN.define(false, false, false, function (fn) {\n    return {\n      enumerable: false,\n      get: fn\n    };\n  }),\n\n  /**\n   * @method get\n   * Create a private `setter` property definition for an object.\n   * Public setters are part of the ES2015 class spec.\n   *\n   * Example:\n   *\n   * ```\n   * let myFunction = function () {\n   *  return 'somevalue'\n   * }\n   *\n   * // Longhand equivalent\n   * Object.defineProperty(this, 'attr', {\n   *  enumerable: false,\n   *  set: function (value) {\n   *    somethingElse = value\n   *  }\n   * })\n   * ```\n   * @param  {function} fn\n   * Any valid async JavaScript function with a `return` value.\n   * @private\n   */\n  set: NGN.define(false, false, false, function (fn) {\n    return {\n      enumerable: false,\n      set: fn\n    };\n  })\n});\n\nObject.defineProperties(NGN, {\n  /**\n   * @method extend\n   * Extend the NGN core object. Extending NGN is the equivalent of:\n   *\n   * Example:\n   * ```\n   * NGN.extend('greet', NGN.public(function (recipient) {\n   *  return 'Hello, ' + recipient + '!'\n   * }))\n   *\n   * // Equivalent of:\n   *\n   * Object.defineProperty(NGN, 'greet', {\n   *  enumerable: true,\n   *  writable: false,\n   *  configurable: false,\n   *  value: function (recipient) {\n   *    return 'Hello, ' + recipient + '!'\n   *  }\n   * })\n   * ```\n   * The example above produces a public function available from NGN:\n   *\n   * ```\n   * console.log(NGN.greet('world')) // outputs Hello, world!\n   * @param  {string} attribute\n   * Name of the attribute to add to the object.\n   * @param  {Object} specification\n   * The object specification, i.e.\n   * ```\n   * {\n   *  enumerable: true/false,\n   *  writable: true/false,\n   *  configurable: true/false,\n   *  value: {any}\n   * }\n   *\n   * // OR\n   *\n   * {\n   *  enumerable: true/false,\n   *  get: function () { return ... },\n   *  set: function (value) { some = value ... }\n   * }\n   * ```\n   * @private\n   */\n  extend: NGN.privateconst(function (attribute, specification) {\n    Object.defineProperty(this, attribute, specification);\n  }),\n\n  /**\n   * @method inherit\n   * Inherit the properties of another object/class.\n   * @param  {object|function} source\n   * The source object (i.e. what gets copied)\n   * @param  {object|function} destination\n   * The object properties get copied to.\n   */\n  inherit: NGN.const(function (source, dest) {\n    if (!source || !dest) {\n      return;\n    }\n    source = typeof source === 'function' ? source.prototype : source;\n    dest = typeof dest === 'function' ? dest.prototype : dest;\n    Object.getOwnPropertyNames(source).forEach(function (attr) {\n      var definition = Object.getOwnPropertyDescriptor(source, attr);\n      Object.defineProperty(dest, attr, definition);\n    });\n  }),\n\n  /**\n   * @method slice\n   * Converts an array-like object to an array.\n   *\n   * Example:\n   * ```\n   * function () {\n   *  return NGN.slice(arguments)\n   * }\n   * @param  {Object} obj\n   * The object to slice into an array.\n   * @return {array}\n   * @private\n   */\n  slice: NGN.private(function (obj) {\n    return Array.prototype.slice.call(obj);\n  }),\n\n  /**\n   * @method splice\n   * Converts an array-like object to a spliced array.\n   *\n   * Example:\n   * ```\n   * function () {\n   *  return NGN.splice(arguments)\n   * }\n   * @param  {Object} obj\n   * The object to splice into an array.\n   * @return {array}\n   * @private\n   */\n  splice: NGN.private(function (obj) {\n    return Array.prototype.splice.call(obj);\n  }),\n\n  /**\n   * @method coalesce\n   * Finds the first non-null/defined value in a list of arguments.\n   * This can be used with {@link Boolean Boolean} values, since `true`/`false` is a\n   * non-null/defined value.\n   * @param {Mixed} args\n   * Any number of arguments can be passed to this method.\n   */\n  coalesce: NGN.public(function () {\n    for (var arg in arguments) {\n      if (arguments[arg] !== undefined && arguments[arg] !== null) {\n        return arguments[arg];\n      }\n    }\n    return null;\n  }),\n\n  /**\n   * @property {boolean} nodelike\n   * Indicates NGN is running in a node-like environment supporting\n   * the `require` statement. This will detect node, io.js, Electron,\n   * NW.js, and other environments presumably supporting Node.js.\n   * @private\n   */\n  nodelike: NGN.get(function () {\n    var node = false;\n    try {\n      node = require !== undefined;\n    } catch (e) {}\n    return node;\n  }),\n\n  /**\n   * @method dedupe\n   * Deduplicate a simple array.\n   * @param {array} array\n   * The array to deduplicate.\n   * @return {array}\n   * The array with unique records.\n   * @private\n   */\n  dedupe: NGN.private(function (array) {\n    return array.filter(function (element, index) {\n      return array.indexOf(element) === index;\n    });\n  }),\n\n  /**\n   * @method typeof\n   * A more specific typeof method.\n   * @param  {any} element\n   * The element to determine the type of.\n   * @return {string}\n   * Returns the type (all lower case).\n   */\n  typeof: NGN.define(false, false, false, function (el) {\n    var value = Object.prototype.toString.call(el).split(' ')[1].replace(/\\]|\\[/gi, '').toLowerCase();\n    if (value === 'function') {\n      value = el.name || 'function';\n    }\n    return value.toLowerCase();\n  }),\n\n  /**\n   * @method stack\n   * Retrieve the stack trace from a specific code location without throwing\n   * an exception.\n   * @private\n   * @returns {array}\n   * Returns an array of objects. Each object contains the file, line, column,\n   * and path within the stack. For example:\n   *\n   * ```\n   * {\n   * \t path: 'path/to/file.js:127:14'\n   *   file: 'path/to/file.js',\n   *   line: 127,\n   *   column: 14\n   * }\n   * ```\n   */\n  stack: NGN.get(function () {\n    var me = this;\n\n    var stack = new Error().stack.split('\\n') || [];\n\n    stack = stack.filter(function (item) {\n      return item.split(':').length > 1;\n    }).map(function (item) {\n      item = item.replace(/^.*\\s\\(/i, '').replace(/\\)/gi, '').replace(/^.*\\@/i, '').replace(me.nodelike ? process.cwd() : window.location.origin, '').replace(/^.*\\:\\/\\//, '').replace(/\\s{1,100}at\\s{1,100}/gi, '').replace(/anonymous\\>/, 'console').trim().split(':');\n\n      if (NGN.nodelike) {\n        item.replace(__dirname, '');\n      }\n\n      return {\n        path: item[0].substr(1, item[0].length - 1) + ':' + item[1] + ':' + item[2],\n        file: item[0].substr(1, item[0].length - 1),\n        line: parseInt(item[1], 10),\n        column: parseInt(item[2], 10)\n      };\n    });\n\n    return stack;\n  }),\n\n  /**\n   * @property css\n   * A CSS string used for highlighting console output in Chrome and Firefox.\n   *\n   * **Example:**\n   *\n   * ```js\n   * console.log('%cHighlight %c some text and leave the rest normal.', NGN.css, '')\n   * ```\n   * @private\n   */\n  css: NGN.privateconst('font-family: bold;')\n});\n\n'use strict';\n\nObject.defineProperty(NGN, 'global', NGN.privateconst(NGN.nodelike ? global : window));\n\n// Force scope\ndocument.addEventListener('DOMContentLoaded', function () {\n  document.body.classList.add('ngn');\n});\n\n'use strict';\n\nif (!window.NGN) {\n  throw new Error('The EventEmitter class is dependent on the presence of NGN.');\n}\n\n/**\n * @class EventEmitter\n * This is an extendable generic class used to apply event management\n * to non-DOM objects, such as data models, logging, and other common\n * elements of JavaScript programming.\n * @protected\n */\n\nvar EventEmitter = function () {\n  /**\n   * @constructor\n   * ```\n   * let EE = new EventEmitter()\n   * ```\n   * This is a protected class. It is most commonly instantiated through\n   * the NGN namespace (i.e. `new NGN.EventEmitter()`). However; it is\n   * designed for use within the NGN library, not directly as an event emitter.\n   * Use with caution.\n   */\n\n  function EventEmitter(cfg) {\n    _classCallCheck(this, EventEmitter);\n\n    cfg = cfg || {};\n    Object.defineProperties(this, {\n      handlers: NGN.private({}),\n      adhoc: NGN.private({}),\n      maxlisteners: NGN.private(cfg.defaultMaxListeners || 10)\n    });\n  }\n\n  /**\n   * @property {object} subscribers\n   * An array of all subscribers which currently have a registered event handler.\n   * @warning This is a UI-only method.\n   */\n\n\n  _createClass(EventEmitter, [{\n    key: 'listenerCount',\n\n\n    /**\n     * @method {number} listenerCount\n     * The number of listeners for a specific event.\n     * @param {string} eventName\n     * The name of the event to count listeners for.\n     */\n    value: function listenerCount(eventName) {\n      return (this.handlers[eventName] || []).length + (this.adhoc[eventName] || []).length;\n    }\n\n    /**\n     * @method getMaxListeners\n     * A node-like reference to the #defaultMaxListeners value.\n     * @return {number}\n     */\n\n  }, {\n    key: 'getMaxListeners',\n    value: function getMaxListeners() {\n      return this.defaultMaxListeners;\n    }\n\n    /**\n     * @method setMaxListeners\n     * A node-like reference to the #defaultMaxListeners value (setter).\n     */\n\n  }, {\n    key: 'setMaxListeners',\n    value: function setMaxListeners(value) {\n      this.defaultMaxListeners = value;\n    }\n\n    /**\n     * @method eventNames\n     * A node-like reference providing an array of recognized event names.\n     * @return {array}\n     */\n\n  }, {\n    key: 'eventNames',\n    value: function eventNames() {\n      var handlers = Object.keys(this.handlers);\n      var adhoc = Object.keys(this.adhoc);\n      return NGN.dedupe(handlers.concat(adhoc));\n    }\n\n    /**\n     * @method listeners\n     * Returns the raw listener methods for the event.\n     * @param {string} eventName\n     * Name of the event to retrieve listeners for.\n     * @return {array}\n     */\n\n  }, {\n    key: 'listeners',\n    value: function listeners(eventName) {\n      var handlers = this.handlers[eventName] || [];\n      var adhoc = this.adhoc[eventName] || [];\n      return handlers.concat(adhoc);\n    }\n\n    /**\n     * @method on\n     * Create a new event handler for the specified event.\n     * @param  {string} eventName\n     * Name of the event to listen for.\n     * @param  {Function} handler\n     * The emthod responsible for responding to the event.\n     * @param {boolean} [prepend=false]\n     * When set to `true`, the event is added to the beginning of\n     * the processing list instead of the end.\n     */\n\n  }, {\n    key: 'on',\n    value: function on(eventName, callback, prepend) {\n      this.handlers[eventName] = this.handlers[eventName] || [];\n      this.handlers[eventName][NGN.coalesce(prepend, false) ? 'unshift' : 'push'](callback);\n      this.emit('newListener', eventName, callback);\n      if (this.listenerCount(eventName) > this.maxlisteners) {\n        throw new Error('Maximum event listeners exceeded. Use setMaxListeners() to adjust the level.');\n      }\n    }\n\n    /**\n     * @method addListener\n     * A node-like reference to the #on method.\n     */\n\n  }, {\n    key: 'addListener',\n    value: function addListener() {\n      this.on.apply(this, arguments);\n    }\n\n    /**\n     * @method prependListener\n     * A node-like reference to the #on method, adding events to the\n     * beginning of the event list (processed before others) instead of the end.\n     * @param  {string} eventName\n     * Name of the event to listen for.\n     * @param  {Function} handler\n     * The emthod responsible for responding to the event.\n     */\n\n  }, {\n    key: 'prependListener',\n    value: function prependListener() {\n      var args = NGN.slice(arguments).push(true);\n      this.on.apply(this, args);\n    }\n\n    /**\n     * @method on\n     * Create a new event handler for the specified event. The\n     * handler will be removed immediately after it is executed. This\n     * effectively listens for an event to happen once and only once\n     * before the handler is destroyed.\n     * @param  {string} eventName\n     * Name of the event to listen for.\n     * @param  {Function} handler\n     * The emthod responsible for responding to the event.\n     * @param {boolean} [prepend=false]\n     * When set to `true`, the event is added to the beginning of\n     * the processing list instead of the end.\n     */\n\n  }, {\n    key: 'once',\n    value: function once(eventName, callback, prepend) {\n      this.adhoc[eventName] = this.adhoc[eventName] || [];\n      this.adhoc[eventName][NGN.coalesce(prepend, false) ? 'unshift' : 'push'](callback);\n      this.emit('newListener', eventName, callback);\n      if (this.listenerCount(eventName) > this.maxlisteners) {\n        throw new Error('Maximum event listeners exceeded. Use setMaxListeners() to adjust the level.');\n      }\n    }\n\n    /**\n     * @method prependOnceListener\n     * A node-like reference to the #once method, adding events to the\n     * beginning of the event list (processed before others) instead of the end.\n     * @param  {string} eventName\n     * Name of the event to listen for.\n     * @param  {Function} handler\n     * The emthod responsible for responding to the event.\n     */\n\n  }, {\n    key: 'prependOnceListener',\n    value: function prependOnceListener() {\n      var args = NGN.slice(arguments).push(true);\n      this.once.apply(this, args);\n    }\n\n    /**\n     * @method off\n     * Remove an event handler. If no handler is specified, all handlers for\n     * the spcified event will be removed.\n     * @param {string} eventName\n     * Name of the event to remove.\n     * @param {function} [handlerFn]\n     * The handler function to remove from the event handlers.\n     */\n\n  }, {\n    key: 'off',\n    value: function off(eventName, callback) {\n      if (this.handlers[eventName]) {\n        if (!callback) {\n          delete this.handlers[eventName];\n          return;\n        }\n\n        var position = this.handlers[eventName].indexOf(callback);\n\n        while (position >= 0) {\n          this.handlers[eventName].splice(position, 1);\n          this.emit('removeListener', eventName, callback);\n          position = this.handlers[eventName].indexOf(callback);\n        }\n\n        if (this.handlers[eventName].length === 0) {\n          delete this.handlers[eventName];\n        }\n      }\n    }\n\n    /**\n     * @method onceoff\n     * Remove an event handler that was originally created using #once. If no\n     * handler is specified, all handlers for the spcified event will be removed.\n     * @param {string} eventName\n     * Name of the event to remove.\n     * @param {function} handlerFn\n     * The handler function to remove from the event handlers.\n     */\n\n  }, {\n    key: 'onceoff',\n    value: function onceoff(eventName, callback) {\n      if (this.adhoc[eventName]) {\n        if (!callback) {\n          delete this.adhoc[eventName];\n          return;\n        }\n\n        var position = this.adhoc[eventName].indexOf(callback);\n\n        while (position > 0) {\n          this.adhoc.splice(position, 1);\n          position = this.adhoc[eventName].indexOf(callback);\n        }\n        if (this.adhoc[eventName].length === 0) {\n          delete this.adhoc[eventName];\n        }\n      }\n    }\n\n    /**\n     * @alias removeListener\n     * A node-like alias of the #off and #onceoff method (combined).\n     */\n\n  }, {\n    key: 'removeListener',\n    value: function removeListener() {\n      this.off.apply(this, arguments);\n      this.onceoff.apply(this, arguments);\n    }\n\n    /**\n     * @method clear\n     * Remove all event handlers from the EventEmitter (both regular and adhoc).\n     */\n\n  }, {\n    key: 'clear',\n    value: function clear() {\n      this.handlers = {};\n      this.adhoc = {};\n    }\n\n    /**\n     * @alias removeAllListeners\n     * A node-like alias of the #clear method.\n     */\n\n  }, {\n    key: 'removeAllListeners',\n    value: function removeAllListeners() {\n      this.clear();\n    }\n\n    /**\n     * @method emit\n     * Fires an event. This method accepts one or more arguments. The\n     * first argument is always the event name, followed by any number\n     * of payload arguments.\n     *\n     * Example:\n     * ```\n     * const EE = new NGN.EventEmitter()\n     *\n     * EE.emit('someevent', {payload: 1}, {payload: 2})\n     * ```\n     * The example above triggers an event called `someevent` and applies\n     * the remaining two arguments to any event handlers.\n     * @param {string} eventName\n     * The name of the event to trigger.\n     */\n\n  }, {\n    key: 'emit',\n    value: function emit() {\n      var args = NGN.slice(arguments);\n      var eventName = args.shift();\n      var events = this.getAllEvents(eventName);\n\n      var scope = {\n        event: eventName\n      };\n\n      for (var name in events) {\n        var adhocEvent = this.adhoc[events[name]];\n        // Adhoc event handling\n        if (adhocEvent) {\n          delete this.adhoc[events[name]];\n\n          while (adhocEvent.length > 0) {\n            var fn = adhocEvent.pop();\n            scope.handler = fn;\n            fn.apply(scope, args);\n          }\n        }\n\n        // Regular event handling\n        var handler = this.handlers[events[name]];\n        if (handler) {\n          for (var _fn in handler) {\n            scope.handler = handler[_fn];\n            handler[_fn].apply(scope, args);\n          }\n        }\n      }\n    }\n\n    /**\n     * @method getAllEvents\n     * Returns all of the events that match an event name. The event name\n     * may contain wildcards (i.e. `*`) or it can be a regular expression.\n     * @param  {string|regexp} eventName\n     * A string or regular expression defining which event names to identify.\n     * A string value containing an asterisk (*) will be converted to a regular\n     * expression for simplistic wildcard event handling purposes.\n     * @return {array}\n     * An array of unique event names with handlers or adhoc handlers.\n     * @private\n     */\n\n  }, {\n    key: 'getAllEvents',\n    value: function getAllEvents(eventName) {\n      var regularEvents = Object.keys(this.handlers);\n      var adhocEvents = Object.keys(this.adhoc);\n      var allEvents = NGN.dedupe(regularEvents.concat(adhocEvents));\n\n      allEvents = allEvents.filter(function (event) {\n        // If the event is an exact match, don't filter it out.\n        if (event === eventName) {\n          return true;\n        }\n\n        // If the event is a regexp/wildcard, further processing is necessary.\n        if (NGN.typeof(event) === 'regexp' || event.indexOf('*') >= 0) {\n          // Convert wildcard events to a regular expression.\n          if (NGN.typeof(event) !== 'regexp') {\n            event = new RegExp(event.replace('*', '.*', 'gi'));\n          }\n          // If the event name matches the event, keep it.\n          return event.test(eventName);\n        }\n\n        // None of the criteria were met. Ignore the event.\n        return false;\n      });\n\n      return allEvents;\n    }\n  }, {\n    key: 'subscribers',\n    get: function get() {\n      var subscriberList = {};\n\n      for (var eventName in this.handlers) {\n        subscriberList[eventName] = {\n          handler: this.handlers[eventName].length,\n          adhoc: 0\n        };\n      }\n\n      for (var _eventName in this.adhoc) {\n        subscriberList[_eventName] = subscriberList[_eventName] || {\n          handler: 0\n        };\n\n        subscriberList[_eventName].adhoc = this.adhoc[_eventName].length;\n      }\n\n      return subscriberList;\n    }\n\n    /**\n     * @property defaultMaxListeners\n     * The maximum number of listeners for a single event.\n     */\n\n  }, {\n    key: 'defaultMaxListeners',\n    get: function get() {\n      return this.maxlisteners;\n    },\n    set: function set(value) {\n      this.maxlisteners = value;\n    }\n  }]);\n\n  return EventEmitter;\n}();\n\nNGN.extend('EventEmitter', NGN.private(EventEmitter));\n\n'use strict';\n\n/**\n * @class NGN.EventEmitter\n * @inheritdoc\n */\nNGN.inherit(Object.defineProperties({}, {\n  queued: NGN.private({}),\n\n  /**\n   * @method pool\n   * A helper command to create multiple related subscribers\n   * all at once. This is a convenience function.\n   * @property {string} [prefix]\n   * Supply a prefix to be added to every event. For example,\n   * `myScope.` would turn `someEvent` into `myScope.someEvent`.\n   * @property {Object} subscriberObject\n   * A key:value object where the key is the name of the\n   * unprefixed event and the key is the handler function.\n   * @property {Function} [callback]\n   * A callback to run after the entire pool is registered. Receives\n   * a single {Object} argument containing all of the subscribers for\n   * each event registered within the pool.\n   */\n  pool: NGN.const(function (prefix, group, callback) {\n    if (typeof prefix !== 'string') {\n      group = prefix;\n      prefix = '';\n    }\n\n    var pool = {};\n\n    for (var eventName in group) {\n      var topic = (prefix.trim() || '') + eventName;\n      if (typeof group[eventName] === 'function') {\n        pool[eventName] = this.on(topic, group[eventName]);\n      } else {\n        console.warn('%c' + topic + '%c could not be pooled in the event emitter because it\\'s value is not a function.', NGN.css, '');\n      }\n    }\n    if (callback) {\n      callback(pool);\n    }\n  }),\n\n  /**\n   * @method attach\n   * Attach a function to a topic. This can be used\n   * to forward events in response to asynchronous functions.\n   *\n   * For example:\n   *\n   * ```js\n   * myAsyncDataFetch(NGN.BUS.attach('topicName'))\n   * ```\n   *\n   * This is the same as:\n   *\n   * ```js\n   * myAsyncCall(function(data){\n   *  NGN.BUS.emit('topicName', data)\n   * })\n   * ```\n   * @param {string} eventName\n   * The name of the event to attach a handler method to.\n   * @param {boolean} [preventDefaultAction=false]\n   * Setting this to `true` will execute a `event.preventDefault()` before\n   * attaching the handler.\n   * @returns {function}\n   * Returns a function that will automatically be associated with an event.\n   */\n  attach: NGN.const(function (eventName, preventDefaultAction) {\n    var me = this;\n    preventDefaultAction = NGN.coalesce(preventDefaultAction, false);\n\n    return function (e) {\n      if (preventDefaultAction && e.hasOwnProperty('preventDefault')) {\n        e.preventDefault();\n      }\n      var args = NGN.slice(arguments); //NGN.slice(arguments)\n      args.unshift(eventName);\n      me.emit.apply(me, args);\n    };\n  }),\n\n  /**\n   * @method bind\n   * A special subscriber that fires one or more event in response to\n   * to an event. This is used to bubble events up/down an event chain.\n   *\n   * For example:\n   *\n   * ```js\n   * BUS.bind('sourceEvent', ['someEvent','anotherEvent'], {payload:true})\n   * ```\n   * When `sourceEvent` is published, the bind method triggers `someEvent` and\n   * `anotherEvent`, passing the payload object to `someEvent` and\n   * `anotherEvent` subscribers simultaneously.\n   *\n   * @param {String} sourceEvent\n   * The event to subscribe to.\n   * @param {String|Array} triggeredEvent\n   * An event or array of events to fire in response to the sourceEvent.\n   * @param {any} data\n   * Optional data to pass to each bound event handler.\n   * @returns {Object}\n   * Returns an object with a single `remove()` method.\n   */\n  bind: NGN.const(function (eventName, triggers, payload) {\n    triggers = typeof triggers === 'string' ? [triggers] : triggers;\n\n    var me = this;\n    var listener = function listener() {\n      var args = NGN.slice(arguments);\n\n      if (payload) {\n        args.push(payload);\n      }\n\n      for (var trigger in triggers) {\n        var argList = args.slice();\n        argList.unshift(triggers[trigger]);\n        me.emit.apply(me, argList);\n      }\n    };\n\n    this.on(eventName, listener);\n\n    // Provide handle back for removal of topic\n    return {\n      remove: function remove() {\n        me.off(eventName, listener);\n      }\n    };\n  }),\n\n  /**\n   * @method queue\n   * This method waits for the specified duration, then publishes an\n   * event once. This will publish the event only once at the end of the\n   * wait period, even if the event is triggered multiple times. This can\n   * be useful when working with many events triggered in rapid succession.\n   *\n   * For example, an NGN.DATA.Model representing a person may be used to\n   * track a user profile. The NGN.DATA.Model fires an event called `field.update`\n   * every time a data field is modified. In many cases, a user may update\n   * multiple fields of their profile using a form with a \"Save\" button.\n   * Instead of generating a new \"save\" (to disk, to memory, to an API, etc)\n   * operation for each field, the publishOnce event can wait until all\n   * changes are made before running the save operation.\n   *\n   * ```js\n   * // Create a data model representing a person.\n   * var Person = new NGN.DATA.Model({....})\n   *\n   * // Create a new person record for a user.\n   * var user = new Person()\n   *\n   * // When the user is modified, save the data.\n   * user.on('field.update', function () {\n   * \t // Wait 300 milliseconds to trigger the save event\n   *   NGN.BUS.queue('user.save', 300)\n   * })\n   *\n   * // Save the user using an API\n   * NGN.BUS.on('user.save', function () {\n   * \t NGN.HTTP.put({\n   * \t   url: 'https://my.api.com/user',\n   * \t   json: user.data\n   * \t })\n   * })\n   *\n   * // Modify the record attributes (which are blank by default)\n   * user.firstname = 'John'\n   * user.lastname = 'Doe'\n   * user.age = 42\n   *\n   * // Make another update 1 second later\n   * setTimeout(function () {\n   *   user.age = 32\n   * }, 1000)\n   * ```\n   *\n   * The code above sets up a model and record. Then it listens to the record\n   * for field updates. Each time it recognizes an update, it queues the \"save\"\n   * event. When the queue matures, it fires the `user.save` event.\n   *\n   * The first `field.update` is triggered when `user.firstname = 'John'` runs.\n   * This initiates a queue for `user.save`, set to mature in 300 millisenconds.\n   * Next, a `field.update` is triggered when `user.lastname = 'Doe'` runs.\n   * This time, since the queue for `user.save` is already initiated, notthing\n   * new happens. Finally, a `field.update` is triggered when `user.age = 42`\n   * runs. Just like the last one, nothing happens since the `user.save` queue\n   * is already active.\n   *\n   * The `user.save` queue \"matures\" after 300 milliseconds. This means after\n   * 300 milliseconds have elapsed, the `user.save` event is triggered. In this\n   * example, it means the `NGN.HTTP.put()` code will be executed. As a result,\n   * all 3 change (firstname, lastname, and age) will be complete before the\n   * API request is executed. The queue is cleared immediately.\n   *\n   * The final update occurs 1 second later (700 milliseconds after the queue\n   * matures). This triggers a `field.update`, but since the queue is no\n   * longer active, it is re-initiated. 300 milliseconds later, the `user.save`\n   * event is fired again, thus executing the API request again (1.3 seconds\n   * in total).\n   * @param {string} eventName\n   * The event/topic to publish/emit.\n   * @param {Number} [delay=300]\n   * The number of milliseconds to wait before firing the event.\n   * @param {Any} [payload]\n   * An optional payload, such as data to be passed to an event handler.\n   */\n  queue: NGN.const(function (eventName, delay) {\n    var _this = this,\n        _arguments = arguments;\n\n    if (!this.queued.hasOwnProperty(eventName)) {\n      (function () {\n        var me = _this;\n        var args = NGN.slice(_arguments);\n        args.splice(1, 1);\n\n        _this.queued[eventName] = setTimeout(function () {\n          delete me.queued[eventName];\n          me.emit.apply(me, args);\n        }, delay);\n      })();\n    }\n  })\n}), NGN.EventEmitter);\n\n'use strict';\n\nvar CustomException = function (_Error) {\n  _inherits(CustomException, _Error);\n\n  // eslint-disable-line\n\n  function CustomException(config) {\n    _classCallCheck(this, CustomException);\n\n    var _this2 = _possibleConstructorReturn(this, Object.getPrototypeOf(CustomException).call(this));\n\n    config = config || {};\n    config = typeof config === 'string' ? { message: config } : config;\n    config.custom = config.custom || {};\n\n    var me = _this2;\n\n    _this2.name = config.name || 'NgnError';\n    _this2.type = config.type || 'TypeError';\n    _this2.severity = config.severity || 'minor';\n    _this2.message = config.message || 'Unknown Error';\n    _this2.category = config.category || 'operational'; // Alternative is \"programmer\"\n\n    // Cleanup name\n    _this2.name = _this2.name.replace(/[^a-zA-Z0-9_]/gi, '');\n\n    // Add any custom properties\n    for (var attr in config.custom) {\n      if (config.custom.hasOwnProperty(attr)) {\n        _this2[attr] = config.custom[attr];\n      }\n    }\n    _this2.hasOwnProperty('custom') && delete _this2.custom;\n\n    if (NGN.nodelike || Error.prepareStackTrace) {\n      //   console.log('++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++')\n      // Capture the stack trace on a new error so the detail can be saved as a structured trace.\n      Error.prepareStackTrace = function (_, stack) {\n        return stack;\n      };\n\n      var _err = new Error();\n      Error.captureStackTrace(_err, _this2);\n\n      _this2.rawstack = _err.stack;\n\n      Error.prepareStackTrace = function (err, stack) {\n        // eslint-disable-line handle-callback-err\n        me.cause && console.warn(me.cause);\n        me.help && console.info(me.help);\n\n        return me.name + ': ' + me.message + '\\n' + stack.filter(function (frame) {\n          return frame.getFileName() !== __filename && frame.getFileName();\n        }).map(function (el) {\n          return '    at ' + el;\n        }).join('\\n');\n      };\n\n      // Enable stack trace\n      Error.captureStackTrace(_this2);\n    }\n    return _this2;\n  }\n\n  /*\n   * @property {Array} trace\n   * The structured data of the stacktrace. Each array element is a JSON object corresponding to\n   * the full stack trace:\n   *\n   * ```js\n   * {\n   *   filename: String,\n   *   line: Number,\n   *   column: Number,\n   *   functionname: String,\n   *   native: Boolean,\n   *   eval: Boolean,\n   *   type: String\n   * }\n   * ```\n   * @readonly\n   */\n\n\n  _createClass(CustomException, [{\n    key: 'trace',\n    get: function get() {\n      return this.rawstack.filter(function (frame) {\n        return frame.getFileName() !== __filename && frame.getFileName();\n      }).map(function (frame) {\n        return {\n          filename: frame.getFileName(),\n          line: frame.getLineNumber(),\n          column: frame.getColumnNumber(),\n          functionname: frame.getFunctionName(),\n          native: frame.isNative(),\n          eval: frame.isEval(),\n          type: frame.getTypeName()\n        };\n      });\n    }\n  }]);\n\n  return CustomException;\n}(Error);\n\nif (NGN.nodelike) {\n  module.exports = CustomException;\n}\n\n'use strict';\n\n/**\n * @class NGN\n * @inheritdoc\n */\n/**\n * @method createException\n * Create a custom global exception.\n * For more information, see the [Custom Exceptions Guide](#!/guide/customerrors).\n * @param {Object} config\n * The configuration of the new error.\n * @param {String} [config.name=NgnError]\n * The pretty name of the exception. Alphanumeric characters only (underscore is acceptable).\n * @param {String} [config.type=TypeError]\n * The type of error. This is commonly `TypeError` or `ReferenceError`, but\n * it can be any custom value.\n * @param {String} [config.severity=minor]\n * A descriptive \"level\" indicating how critical the error is.\n * @param {String} [config.message=Unknown Error]\n * The default message to output when none is specified.\n * @param {Object} [config.custom]\n * Provide a key/value object of custom attributes for the error.\n * There are two \"special\" custom attributes: `help` and `cause`.\n * When provided, these will be written to stdout whenever the error's\n * stack is viewed.\n *\n * For example:\n *\n * ```js\n * require('ngn')\n *\n * NGN.createException({\n *   name: 'Test Problem',\n *   message: 'An example error.',\n *   custom: {\n *     help: 'Remove the throw statement.',\n *     cause: 'Testing the error output.'\n *   }\n * });\n *\n * throw TestProblem()\n * ```\n * The code above generates the following console output:\n *\n * ```sh\n * Testing the error output.\n * Remove the throw statement.\n * /path/to/test.js:12\n *    throw TestProblem();\n *    ^\n *\n * TestProblem: An example error.\n *    at null._onTimeout (/path/to/test.js:12:11)\n *    at Timer.listOnTimeout (timers.js:92:15)\n * ```\n */\nNGN.extend('createException', NGN.public(function (config) {\n  config = config || {};\n  config = typeof config === 'string' ? { message: config } : config;\n  config.name = config.name || 'NgnError';\n  config.name = config.name.replace(/[^a-zA-Z0-9_]/gi, '');\n\n  // Create the error as a function\n  NGN.global[config.name] = function () {\n    if (arguments.length > 0) {\n      config.message = arguments[0];\n    }\n    return new CustomException(config);\n  };\n}));\n\n/**\n * @class DOM\n * A utility class to simplify smoe DOM management tasks.\n */\nNGN.DOM = {};\n\nObject.defineProperties(NGN.DOM, {\n  /**\n   * @method ready\n   * Executes code after the DOM is loaded.\n   * @param {function} callback\n   * The function to call when the DOM is fully loaded.\n   */\n  ready: NGN.const(function (callback) {\n    document.addEventListener('DOMContentLoaded', callback);\n  }),\n\n  /**\n   * @method destroy\n   * Remove a DOM element.\n   * @param {HTMLElement|NodeList|String|Array} node\n   * Accepts a single `HTMLElement`, a `NodeList`, a CSS selector, or\n   * an array or `HTMLElements`/`NodeList`/CSS Selectors.\n   */\n  destroy: NGN.const(function (element) {\n    // Process a CSS selector\n    if (typeof element === 'string') {\n      var str = element;\n      element = document.querySelectorAll(element);\n\n      if (element.length === 0) {\n        console.warn('The \\\"' + str + '\\\" selector did not return any elements.');\n        return;\n      }\n      // Iterate through results and remove each element.\n      NGN.slice(element).forEach(this.destroy);\n    } else {\n      switch (NGN.typeof(element)) {\n        case 'array':\n          element.forEach(this.destroy);\n          return;\n        case 'nodelist':\n          NGN.slice(element).forEach(this.destroy);\n          return;\n        case 'htmlelement':\n          element.parentNode.removeChild(element);\n          return;\n        default:\n          if (/^html.*element$/.test(NGN.typeof(element))) {\n            element.parentNode.removeChild(element);\n            return;\n          }\n          console.warn('An unknown error occurred while trying to remove DOM elements.');\n          console.log('Unknown Element', element);\n      }\n    }\n  }),\n\n  /**\n   * @method findParent\n   * Find a distant parent of a DOM element. This can be thought\n   * of as a reverse CSS selector that traverse UP the DOM chain\n   * to find the parent element.\n   *\n   * For example:\n   *\n   * Assume the following HTML structure & JS code:\n   *\n   * ```html\n   * <section>\n   *   <header class=\"MyGroup\">\n   *     <div>\n   *       <div>\n   *         <button>Delete Entire Group</button>\n   *       </div>\n   *     </div>\n   *   </header>\n   * </section>\n   * ```\n   *\n   * ```js\n   * ref.find('button.remove').addEventListener('click', function (event) {\n   *   event.preventDefault()\n   *   let removeButton = event.currentTarget\n   *   let group = ref.findParent(removeButton,'header')\n   *   ref.destroy(group)\n   * })\n   * ```\n   *\n   * The code above listens for a click on the button. When the button\n   * is clicked, the `findPerent` method recognizes the \"Delete Entire Group\"\n   * button and traverses UP the DOM chain until it finds a `header` DOM\n   * element. The `header` DOM element is returned (as `group` letiable). The\n   * group is then removed using the `ref.destroy` method.\n   *\n   * Alternatively, the same effect could have been achieved if line 4\n   * of the JS code was:\n   * ```js\n   * let group = ref.findParent(removeButton, '.MyGroup')\n   * ```\n   * @param {HTMLElement|String} element\n   * The DOM element or a CSS selector string identifying the\n   * element whose parent should be found.\n   * @param {String} selector\n   * A minimal CSS selector used to identify the parent.\n   * @param {Number} maxDepth\n   * The maximum number of elements to traverse. This can be used to\n   * cap a selector and force it to fail before reaching a known limit.\n   * By default, there is no limit (i.e. maxDepth=null).\n   * @returns {HTMLElement}\n   * Responds with the DOM Element, or `null` if none was found.\n   */\n  findParent: NGN.const(function (node, selector, maxDepth) {\n    if (typeof node === 'string') {\n      node = document.querySelectorAll(node);\n      if (node.length === 0) {\n        console.warn('\\\"' + node + '\\\" is an invalid CSS selector (Does not identify any DOM elements).');\n        return null;\n      }\n      node = node[0];\n    }\n\n    var currentNode = node.parentNode;\n    var i = 0;\n    maxDepth = typeof maxDepth === 'number' ? maxDepth : -1;\n\n    while (currentNode.parentNode.querySelector(selector) === null && currentNode.nodeName !== 'BODY') {\n      i++;\n      if (maxDepth > 0 && i > maxDepth) {\n        return null;\n      }\n      currentNode = currentNode.parentNode;\n    }\n\n    return currentNode;\n  }),\n\n  /**\n   * @method indexOfParent\n   * Returns the zero-based index of the DOM element related\n   * to it's parent element.\n   * For example:\n   *\n   * `html\n   * <div>\n   *   <p>...</p>\n   *   <p>...</p>\n   *   <button id=\"btn\"></button>\n   *   <p>...</p>\n   * </div>\n   * ```\n   *\n   * ```js\n   * let i = NGN.DOM.indexOfParent(document.getElementById('btn'))\n   * console.log(i) // 2\n   * ```\n   * @param {HTMLElement} el\n   * The reference element.\n   * @returns {number}\n   */\n  indexOfParent: NGN.const(function (element) {\n    return NGN.slice(element.parentNode.children).indexOf(element);\n  })\n});\n\n/**\n * @class BUS\n * The bus acts as a pub/sub messaging system (as opposed to a queue). It is primarily\n * designed for asynchronous communication between javascript objects, but can also be\n * bound to DOM events.\n *\n * The most common use looks like:\n * ```js\n *   var subscriber = NGN.BUS.subscribe('test', function () {\n *     console.log('test handled')\n *   })\n *\n *   NGN.BUS.subscribeOnce('test', function () {\n *     console.log('RESPOND ONCE!')\n *   })\n *\n *   NGN.BUS.publish('test') // Outputs \"test handled\" and \"RESPOND ONCE\".\n *\n *   NGN.BUS.publish('test') // Outputs \"test handled\" only.\n *\n *   subscriber.unsubscribe() // Removes the listener\n *\n *   NGN.BUS.publish('test') // Outputs nothing since the subscription was removed.\n * ```\n * There are a few aliases for ease of use, including `on() --> subscribe()`,\n * `once() --> subscribeOnce()`, and `emit() --> publish()`.\n *\n * It is also possible to use a wildcard in a subscription.\n *\n * ```js\n *   var subscriber = NGN.BUS.subscribe('test.*', function () {\n *     console.log('test handled')\n *   })\n *   var subscriber = NGN.BUS.subscribe('test.create', function () {\n *     console.log('test create handled')\n *   })\n *\n *   NGN.BUS.publish('test.create') // Outputs \"test handled\" and \"test create handled\"\n *\n *   NGN.BUS.publish('test.delete') // Outputs \"test handled\"\n * ```\n * @singleton\n */\nNGN.extend('BUS', NGN.const(new NGN.EventEmitter()));\n\n/**\n * @class NGN.ref\n * A global \"pointer\" to DOM elements. This is used to reference and manipulate\n * DOM elements in a simple and standard way, without restricting native functionality.\n */\n'use strict';\n\nNGN.ref = new function () {\n  var requireBUS = function requireBUS(trigger, event, scope, nm, preventDefault) {\n    if (NGN.BUS === undefined) {\n      return console.error('The event BUS is required for ' + nm + '().');\n    }\n    preventDefault = NGN.coalesce(preventDefault, false);\n    var fn = function fn(e) {\n      if (preventDefault && e.preventDefault) {\n        e.preventDefault();\n      }\n      NGN.BUS.emit(event, e);\n    };\n    scope.addEventListener(trigger, fn);\n  };\n\n  var qs = function qs(value, selector, all) {\n    if (typeof value === 'string') {\n      return document[all ? 'querySelector' : 'querySelectorAll']((value + ' > ' + selector).trim());\n    }\n    return value[all ? 'querySelector' : 'querySelectorAll'](selector.trim());\n  };\n\n  Object.defineProperties(this, {\n\n    keys: NGN.define(false, true, false, {}),\n\n    _find: NGN.define(false, false, false, function (value, selector) {\n      if (typeof value === 'string') {\n        var reference = NGN.ref.find((value + ' > ' + selector).trim());\n        if (reference.length === 0) {\n          var tmpref = NGN.ref.find(value.trim())[0].parentNode.querySelectorAll(selector);\n          if (tmpref.length > 0) {\n            if (tmpref.length === 1) {\n              return tmpref[0];\n            }\n            return tmpref;\n          }\n        }\n        return reference;\n      }\n      return NGN.ref.find(value.querySelectorAll(selector));\n    }),\n\n    /**\n     * @method find\n     * Retrieve the DOM element(s) for the given selector. This method provides\n     * an **unmanaged** reference object.\n     * @private\n     * @param {String} selector\n     * The selector (CSS-style).\n     * @returns {ref}\n     * Returns an instance of the reference.\n     */\n    find: NGN.define(false, false, false, function (value) {\n      var html = typeof value !== 'string';\n      var els = html === false ? document.querySelectorAll(value) : value;\n      var result = null;\n\n      if (els.length === 1) {\n        if (!els[0].hasOwnProperty('isArray')) {\n          Object.defineProperties(els[0], {\n            isArray: NGN.get(function () {\n              return false;\n            }, false)\n          });\n        }\n\n        if (!els[0].hasOwnProperty('find')) {\n          Object.defineProperty(els[0], 'find', NGN.const(function (selector) {\n            return NGN.ref._find(value, selector);\n          }));\n        }\n\n        if (!els[0].hasOwnProperty('forward')) {\n          Object.defineProperty(els[0], 'forward', NGN.const(function (trigger, event) {\n            requireBUS(trigger, event, this, 'forward');\n          }));\n        }\n\n        if (!els[0].hasOwnProperty('on')) {\n          Object.defineProperty(els[0], 'on', NGN.const(function () {\n            this.addEventListener.apply(this, arguments);\n          }));\n        }\n\n        result = els[0];\n      } else {\n        var base = NGN.slice(els);\n        if (NGN.typeof(els) === 'nodelist' && base.length === 1) {\n          base = base[0];\n        }\n\n        // Apply querySelector/All to the response for chaining.\n        Object.defineProperties(base, {\n          querySelector: NGN.define(false, false, false, function (selector) {\n            qs(value, selector);\n          }),\n\n          querySelectorAll: NGN.define(false, false, false, function (selector) {\n            qs(value, selector, true);\n          }),\n\n          addEventListener: NGN.define(false, false, false, function (evt, fn) {\n            for (var el = 0; el < this.length; el++) {\n              this[el].addEventListener(evt, fn);\n            }\n          }),\n\n          removeEventListener: NGN.define(false, false, false, function (evt, fn) {\n            for (var el = 0; el < this.length; el++) {\n              this[el].removeEventListener(evt, fn);\n            }\n          }),\n\n          find: NGN.const(function (selector) {\n            return NGN.ref._find(value, selector);\n          }),\n\n          isArray: NGN.get(function () {\n            return true;\n          }, false),\n\n          forward: NGN.define(false, false, false, function (trigger, event) {\n            requireBUS(trigger, event, this, 'forward');\n          })\n        });\n        result = base;\n      }\n\n      return result;\n    }),\n\n    /**\n     * @method create\n     * Add a reference.\n     * @param {String} [key]\n     * The key/name of the reference. For example, if this is `myElement`,\n     * then `ref.myElement` will return a pointer to this reference.\n     * @param {string} selector\n     * The CSS selector path.\n     */\n    create: {\n      enumerble: true,\n      writable: false,\n      configurable: false,\n      value: function value(key, _value) {\n        // If the key is not provided but the value is a DOM element, make\n        // an ephemeral reference.\n        if (!_value && typeof key !== 'string') {\n          return this.find(key);\n        }\n\n        // Basic error checking\n        if (typeof key !== 'string' && typeof key !== 'number') {\n          throw new Error('Cannot add a non-alphanumeric selector reference.');\n        }\n        if (key.trim().length === 0) {\n          throw new Error('Cannot add a blank selector reference.');\n        }\n        if (_value === undefined || _value === null || _value.trim().length === 0) {\n          throw new Error('Cannot create a null/undefined selector reference.');\n        }\n\n        // Create a reference object\n        var cleankey = this.cleanKey(key);\n        var me = this;\n        Object.defineProperty(NGN.ref, cleankey, NGN.private(_value));\n\n        Object.defineProperty(NGN.ref, key, {\n          enumerable: true,\n          get: function get() {\n            return me.find(_value);\n          },\n          set: function set(val) {\n            if (val === undefined || val === null || val.trim().length === 0) {\n              throw new Error('Cannot create a null/undefined selector reference.');\n            }\n            NGN.ref[cleankey] = val;\n          }\n        });\n\n        this.keys[key] = _value;\n        this.keys[this.cleanKey(key)] = _value;\n      }\n    },\n\n    /**\n     * @method remove\n     * Removes a key from the reference manager.\n     */\n    remove: NGN.const(function (key) {\n      if (this.key) {\n        delete this.key;\n        delete this.keys[key];\n      }\n      var ck = this.cleanKey(key);\n      if (this[ck]) {\n        delete this[ck];\n        delete this.keys[ck];\n      }\n    }),\n\n    /**\n     * @method cleanKey\n     * Creates a clean version of the key used to uniquely identify the reference.\n     * @private\n     * @param {String} key\n     * The key to clean.\n     */\n    cleanKey: NGN.define(false, false, false, function (key) {\n      return key.replace(/[^A-Za-z0-9\\_\\#\\$\\@\\-\\+]/gi, '') + key.length;\n    }),\n\n    /**\n     * @property json\n     * A JSON representation of the managed keys and their associated selectors.\n     * @returns {Object}\n     * A key:selector object.\n     */\n    json: {\n      enumerable: true,\n      get: function get() {\n        var me = this;\n        var obj = {};\n\n        Object.keys(this).forEach(function (el) {\n          if (me.hasOwnProperty(el) && ['json', 'find', 'remove'].indexOf(el.trim().toLowerCase()) < 0 && typeof me[el] !== 'function') {\n            obj[el] = me.keys[el];\n          }\n        });\n        return obj;\n      }\n    }\n  });\n}();\n\n/**\n * @class NGN.NET\n * A library to issue network requests, typically viaHTTP/S requests.\n * This acts as an AJAX library among other things.\n * @author Corey Butler\n * @singleton\n */\nvar parser = new DOMParser();\nvar fs = NGN.nodelike ? require('fs') : null;\n\nvar Network = function () {\n  function Network() {\n    _classCallCheck(this, Network);\n\n    Object.defineProperties(this, {\n      /**\n       * @method xhr\n       * Issue an XHR request.\n       * @private\n       * @param  {Function} callback\n       * The callback to execute when the request finishes (or times out.)\n       */\n      xhr: NGN.privateconst(function (callback) {\n        var res = void 0;\n\n        if (window.XMLHttpRequest) {\n          // code for IE7+, Firefox, Chrome, Opera, Safari\n          res = new XMLHttpRequest();\n        }\n\n        res.onreadystatechange = function () {\n          if (res.readyState === 4) {\n            if (callback) {\n              callback(res);\n            }\n          }\n        };\n\n        return res;\n      }),\n\n      /**\n       * @method run\n       * A wrapper to execute a request.\n       * @private\n       * @param  {string} method required\n       * The method to issue, such as GET, POST, PUT, DELETE, OPTIONS, etc.\n       * @param  {string} url\n       * The URL where the request is issued to.\n       * @param  {Function} callback\n       * A function to call upon completion.\n       */\n      run: NGN.privateconst(function (method, url, callback) {\n        var res = NGN.NET.xhr(callback);\n        res.open(method, url, true);\n        res.send();\n      }),\n\n      /**\n       * @method applyRequestSettings\n       * Apply any configuration details to issue with the request,\n       * such as `username`, `password`, `headers`, etc.\n       * @private\n       * @param {object} xhr\n       * The XHR request object.\n       * @param {object} cfg\n       * The key/value configuration object to apply to the request.\n       * @param {object} cfg.params\n       * A key/value object containing URL paramaters to be passed with the request.\n       * These will automatically be URI-encoded.\n       * @param {object} cfg.headers\n       * A key/value object containing additional headers and associated values to\n       * be passed with the request.\n       * @param {object} cfg.body\n       * An arbitrary body to pass with the request. If no `Content-Type` header is\n       * provided, a `Content-Type: application/textcharset=UTF-8` header is automatically supplied.\n       * This cannot be used with @cfg.json.\n       * @param {object} cfg.json\n       * A JSON object to be sent with the request. It will automatically be\n       * parsed for submission. By default, a `Content-Type: application/json`\n       * header will be applied (this can be overwritten useing @cfg.headers).\n       * @param {object} cfg.form\n       * This accepts a key/value object of form elements, or a reference to a <FORM>\n       * HTML element. This automatically adds the appropriate headers.\n       * @param {string} username\n       * A basicauth username to add to the request. This is sent in plain\n       * text, so using SSL to encrypt/protect it is recommended.\n       * @param {string} password\n       * A basicauth password to add to the request. This is sent in plain\n       * text, so using SSL to encrypt/protect it is recommended.\n       * @param {boolean} [withCredentials=false]\n       * indicates whether or not cross-site `Access-Control` requests should be\n       * made using credentials such as cookies or authorization headers.\n       * The default is `false`.\n       */\n      applyRequestSettings: NGN.privateconst(function (xhr, cfg) {\n        if (!xhr || !cfg) {\n          throw new Error('No XHR or configuration object defined.');\n        }\n\n        // Add URL Parameters\n        if (cfg.params) {\n          var parms = Object.keys(cfg.params).map(function (parm) {\n            return parm + '=' + encodeURIComponent(cfg.params[parm]);\n          });\n          cfg.url += '?' + parms.join('&');\n        }\n\n        xhr.open(cfg.method || 'POST', cfg.url, true);\n\n        // Set headers\n        cfg.header = cfg.header || cfg.headers || {};\n        Object.keys(cfg.header).forEach(function (header) {\n          xhr.setRequestHeader(header, cfg.header[header]);\n        });\n\n        // Handle body (Blank, plain text, or JSON)\n        var body = null;\n        if (cfg.json) {\n          if (!cfg.header || cfg.header && !cfg.header['Content-Type']) {\n            xhr.setRequestHeader('Content-Type', 'application/jsoncharset=UTF-8');\n          }\n          body = JSON.stringify(cfg.json).trim();\n        } else if (cfg.body) {\n          if (!cfg.header || cfg.header && !cfg.header['Content-Type']) {\n            xhr.setRequestHeader('Content-Type', 'application/text');\n          }\n          body = cfg.body;\n        } else if (cfg.form) {\n          body = new FormData();\n          Object.keys(cfg.form).forEach(function (el) {\n            body.append(el, cfg.form[el]);\n          });\n        }\n\n        // Handle withCredentials\n        if (cfg.withCredentials) {\n          xhr.withCredentials = cfg.withCredentials;\n        }\n\n        // Handle credentials sent with request\n        if (cfg.username && cfg.password) {\n          // Basic Auth\n          xhr.setRequestHeader('Authorization', 'Basic ' + btoa(cfg.username + ':' + cfg.password));\n        } else if (cfg.accessToken) {\n          // Bearer Auth\n          xhr.setRequestHeader('Authorization', 'Bearer ' + cfg.accessToken);\n        }\n\n        return body;\n      }),\n\n      /**\n       * @method prepend\n       * A helper method to prepend arguments.\n       * @private\n       * @param  {[type]} args [description]\n       * @param  {[type]} el   [description]\n       * @return {[type]}      [description]\n       */\n      prepend: NGN.privateconst(function (args, el) {\n        args = NGN.slice(args);\n        args.unshift(el);\n        return args;\n      }),\n\n      /**\n       * @method getFile\n       * A \"get\" method specifically for node-like environments.\n       * @param {string} url\n       * The URL to issue the request to.\n       * @param {Function} callback\n       * A callback method to run when the request is complete.\n       * This receives the response object as the only argument.\n       * @private\n       */\n      getFile: NGN.privateconst(function (url) {\n        if (fs !== null) {\n          var rsp = {\n            status: fs.existsSync(url.replace('file://', '')) ? 200 : 400\n          };\n          rsp.responseText = rsp.status === 200 ? fs.readFileSync(url.replace('file://', '')).toString() : 'File could not be found.';\n          return rsp;\n        } else {\n          throw new Error(url + ' does not exist or could not be found.');\n        }\n      }),\n\n      /**\n       * @method normalizeUrl\n       * Cleanup a URL.\n       * @private\n       */\n      normalizeUrl: NGN.privateconst(function (url) {\n        var uri = [];\n\n        url.split('/').forEach(function (el) {\n          if (el === '..') {\n            uri.pop();\n          } else if (el !== '.') {\n            uri.push(el);\n          }\n        });\n\n        return uri.join('/').replace(/\\:\\/{3,50}/gi, '://');\n      }),\n\n      /**\n       * @method processImport\n       * A helper class to process imported content and place\n       * it in the DOM accordingly.\n       * @param {string} url\n       * The URL of remote HTML snippet.\n       * @param {HTMLElement} target\n       * The DOM element where the resulting code should be appended.\n       * @param {string} callback\n       * Returns the HTMLElement, which can be directly inserted into the DOM.\n       * @param {HTMLElement} callback.element\n       * The new DOM element/NodeList.\n       * @param {boolean} [before=false]\n       * If set to true, insert before the callback.element.\n       * @private\n       */\n      processImport: NGN.privateconst(function (url, target, callback, before) {\n        before = before !== undefined ? before : false;\n        this.import(url, function (element) {\n          if (typeof element === 'string') {\n            element = document.createTextNode(element);\n          } else if (element.length) {\n            var _ret2 = function () {\n              var out = [];\n              NGN.slice(element).forEach(function (el) {\n                if (before) {\n                  out.push(target.parentNode.insertBefore(el, target));\n                  target = el;\n                } else {\n                  out.push(target.appendChild(el));\n                }\n              });\n              callback && callback(out);\n              return {\n                v: void 0\n              };\n            }();\n\n            if ((typeof _ret2 === 'undefined' ? 'undefined' : _typeof(_ret2)) === \"object\") return _ret2.v;\n          }\n          if (before) {\n            target.parentNode.insertBefore(element, target);\n          } else {\n            target.appendChild(element);\n          }\n          callback && callback(element);\n        });\n      }),\n\n      /**\n       * @method domainRoot\n       * Returns the root (no http/s) of the URL.\n       * @param {string} url\n       * The URL to get the root of.\n       * @private\n       */\n      domainRoot: NGN.privateconst(function (url) {\n        var r = url.search(/^https?\\:\\/\\//) !== -1 ? url.match(/^https?\\:\\/\\/([^\\/?#]+)(?:[\\/?#]|$)/i, '') : url.match(/^([^\\/?#]+)(?:[\\/?#]|$)/i, '');\n        return r === null || r[1].length < 3 ? window.location.host : r[1];\n      }),\n\n      /**\n       * @method isCrossOrigin\n       * Determine if accessing a URL is considered a cross origin request.\n       * @param {string} url\n       * The URL to identify as a COR.\n       * @returns {boolean}\n       * @private\n       */\n      isCrossOrigin: NGN.privateconst(function (url) {\n        return this.domainRoot(url) !== window.location.host;\n      }),\n\n      /**\n       * @method prelink\n       * A helper method to construct pre-fetch style DOM elements.\n       * This also fires an event when the element is added to the DOM.\n       * @param {string} url\n       * The URL of the operation.\n       * @param {string} rel\n       * The type of operation. For example: `preconnect`.\n       * @param {boolean} [crossorigin]\n       * Set to `true` to identify the request as a cross origin request.\n       * By default, NGN will compare the URL to the current URL in an\n       * attempt to determine if the request is across origins.\n       * @private\n       */\n      prelink: NGN.privateconst(function (url, rel, cor) {\n        if (!document.head) {\n          console.warn('Cannot use a preconnect, predns, etc because there is no HEAD in the HTML document.');\n          return;\n        }\n\n        var p = document.createElement('link');\n        p.rel = rel;\n        p.href = url.trim().toLowerCase().substr(0, 4) !== 'http' ? this.normalizeUrl(window.location.origin + window.location.pathname + url) : url;\n\n        NGN.coalesce(cor, this.isCrossOrigin(url)) && p.setAttribute('crossorigin', 'true');\n        document.head.appendChild(p);\n        NGN.BUS.emit('network.' + rel);\n      }),\n\n      importCache: NGN.private({}),\n\n      createElement: NGN.privateconst(function (str) {\n        return parser.parseFromString(str, 'text/html').querySelector('body').children;\n      }),\n\n      applyData: NGN.privateconst(function (tpl, data, callback) {\n        if (tpl === undefined) {\n          console.warn('Empty template.');\n          callback && callback();\n          return;\n        }\n\n        // Apply data to the template.\n        Object.keys(data).forEach(function (key) {\n          var re = new RegExp('\\{\\{' + key + '\\}\\}', 'gm');\n          tpl = tpl.replace(re, data[key]);\n        });\n\n        // Clear any unused template code\n        tpl = tpl.replace(/(\\{\\{.*\\}\\})/gm, '');\n\n        var el = this.createElement(tpl);\n        callback && callback(el[0]);\n      })\n    });\n  }\n\n  /**\n   * @method send\n   * Send the request via HTTP/S.\n   * @param  {object} cfg\n   * The configuration to use when sending the request. See @applyRequestSettings#cfg\n   * for configuration details.\n   * @param  {Function} callback\n   * A callback to excute upon completion. This receives a standard response\n   * object.\n   */\n\n\n  _createClass(Network, [{\n    key: 'send',\n    value: function send(cfg, callback) {\n      cfg = cfg || {};\n      var res = this.xhr(callback);\n      var body = this.applyRequestSettings(res, cfg);\n      res.send(body);\n    }\n\n    /**\n     * @method get\n     * Issue a `GET` request.\n     * @param {string} url\n     * The URL to issue the request to.\n     * @param {Function} callback\n     * A callback method to run when the request is complete.\n     * This receives the response object as the only argument.\n     */\n\n  }, {\n    key: 'get',\n    value: function get() {\n      if (_typeof(arguments[0]) === 'object') {\n        var cfg = arguments[0];\n        cfg.method = 'GET';\n        cfg.url = typeof arguments[1] === 'string' ? arguments[1] : cfg.url;\n        if (cfg.url.substr(0, 4) && NGN.nodelike) {\n          return arguments[arguments.length - 1](this.getFile(cfg.url));\n        }\n        return this.send(cfg, arguments[arguments.length - 1]);\n      }\n      if (arguments[0].substr(0, 4) === 'file' && NGN.nodelike) {\n        return arguments[arguments.length - 1](this.getFile(arguments[0]));\n      }\n      this.run.apply(this.run, this.prepend(arguments, 'GET'));\n    }\n\n    /**\n     * @method head\n     * Issue a `HEAD` request.\n     * @param {string} url\n     * The URL to issue the request to.\n     * @param {Function} callback\n     * A callback method to run when the request is complete.\n     * This receives the response object as the only argument.\n     */\n\n  }, {\n    key: 'head',\n    value: function head(uri, callback) {\n      if (_typeof(arguments[0]) === 'object') {\n        var cfg = arguments[0];\n        cfg.method = 'HEAD';\n        cfg.url = typeof arguments[1] === 'string' ? arguments[1] : cfg.url;\n        return this.send(cfg, arguments[arguments.length - 1]);\n      }\n      this.run.apply(this.run, this.prepend(arguments, 'HEAD'));\n    }\n\n    /**\n     * @method put\n     * Issue a `PUT` request.\n     * @param  {object} cfg\n     * See the options for @send#cfg\n     * @param  {Function} callback\n     * A callback method to run when the request is complete.\n     * This receives the response object as the only argument.\n     */\n\n  }, {\n    key: 'put',\n    value: function put(cfg, callback) {\n      cfg = cfg || {};\n      cfg.method = 'PUT';\n      cfg.url = cfg.url || window.location;\n      this.send(cfg, callback);\n    }\n\n    /**\n     * @method post\n     * Issue a `POST` request.\n     * @param  {object} cfg\n     * See the options for @send#cfg\n     * @param  {Function} callback\n     * A callback method to run when the request is complete.\n     * This receives the response object as the only argument.\n     */\n\n  }, {\n    key: 'post',\n    value: function post(cfg, callback) {\n      cfg = cfg || {};\n      cfg.method = 'POST';\n      cfg.url = cfg.url || window.location;\n      this.send(cfg, callback);\n    }\n\n    /**\n     * @method delete\n     * Issue a `DELETE` request.\n     * @param {string} url\n     * The URL to issue the request to.\n     * @param {Function} callback\n     * A callback method to run when the request is complete.\n     * This receives the response object as the only argument.\n     */\n\n  }, {\n    key: 'delete',\n    value: function _delete() {\n      this.run.apply(this.run, this.prepend(arguments, 'DELETE'));\n    }\n\n    /**\n     * @method json\n     * This is a shortcut method for creating a `GET` request and\n     * auto-processing the response body into a JSON object.\n     * @param  {string} url\n     * The URL to issue the request to.\n     * @param  {Function} callback\n     * This receives a JSON response object from the server as it's only argument.\n     */\n\n  }, {\n    key: 'json',\n    value: function json(cfg, url, callback) {\n      if (typeof cfg === 'string') {\n        callback = url;\n        url = cfg;\n        cfg = null;\n      }\n      if (cfg === null) {\n        this.run('GET', url, function (res) {\n          if (res.status !== 200) {\n            throw Error('Could not retrieve JSON data from ' + url + ' (Status Code: ' + res.status + ').');\n          }\n          try {\n            res.json = JSON.parse(res.responseText);\n          } catch (e) {\n            res.json = null;\n          }\n          callback && callback(res.json);\n        });\n      } else {\n        cfg.url = url;\n        this.get(cfg, function (res) {\n          if (res.status !== 200) {\n            throw Error('Could not retrieve JSON data from ' + url + ' (Status Code: ' + res.status + ').');\n          }\n          try {\n            res.json = JSON.parse(res.responseText);\n          } catch (e) {\n            res.json = null;\n          }\n          callback && callback(res.json);\n        });\n      }\n    }\n\n    /**\n     * @method import\n     * Import a remote HTML fragment.\n     * @param {string|array} url\n     * The URL of remote HTML snippet. If the URL has a `.js` or `.css`\n     * extension, it will automatically be added to the `<head>`.\n     * It is also possible to provide an array of string values. Take\n     * note that the callback may return a different value based on\n     * this input.\n     * @param {string|array} callback\n     * If a **string** is provided as the URL, this returns the HTMLElement,\n     * which can be directly inserted into the DOM. If an **array** is\n     * provided as the URL, the callback will return an array of HTMLElements.\n     * For example:\n     *\n     * ```js\n     * NGN.NET.import([\n     *   '/path/a.html',\n     *   '/path/b.html',\n     *   '/path/a.js'],\n     *    function (elements){\n     *      console.dir(elements)\n     *    }\n     * })\n     *```\n     * The result `elements` array would look like:\n     *\n     * ```js\n     * [\n     *   HTMLElement, // DOM element created for a.html\n     *   HTMLElement, // DOM element created for b.html\n     *   HTMLElement  // DOM element created for a.js (this will be in the <head>)\n     * ]\n     * ```\n     * The last array element is `null`\n     * @param {boolean} [bypassCache=false]\n     * When set to `true`, bypass the cache.\n     * @fires html.import\n     * Returns the HTMLElement/NodeList as an argument to the event handler.\n     */\n\n  }, {\n    key: 'import',\n    value: function _import(url, callback, bypassCache) {\n      var _this3 = this;\n\n      // Support multiple simultaneous imports\n      if (Array.isArray(url)) {\n        var _ret3 = function () {\n          var self = _this3;\n          var out = new Array(url.length);\n          var i = 0;\n          url.forEach(function (uri, num) {\n            self.import(uri, function (el) {\n              out[num] = el;\n              i++;\n            }, bypassCache);\n          });\n          if (callback) {\n            (function () {\n              var int = setInterval(function () {\n                if (i === url.length) {\n                  clearInterval(int);\n                  callback(out);\n                }\n              }, 5);\n            })();\n          }\n          return {\n            v: void 0\n          };\n        }();\n\n        if ((typeof _ret3 === 'undefined' ? 'undefined' : _typeof(_ret3)) === \"object\") return _ret3.v;\n      }\n\n      // Support JS/CSS\n      var ext = null;\n      try {\n        (function () {\n          ext = url.split('/').pop().split('?')[0].split('.').pop().toLowerCase();\n          var s = void 0;\n          if (ext === 'js') {\n            s = document.createElement('script');\n            s.setAttribute('type', 'text/javascript');\n            s.setAttribute('src', url);\n          } else if (ext === 'css') {\n            s = document.createElement('link');\n            s.setAttribute('rel', 'stylesheet');\n            s.setAttribute('type', 'text/css');\n            s.setAttribute('href', url);\n          }\n          s.onload = typeof callback === 'function' ? function () {\n            callback(s);\n          } : function () {};\n          document.getElementsByTagName('head')[0].appendChild(s);\n        })();\n      } catch (e) {}\n\n      if (['js', 'css'].indexOf((ext || '').trim().toLowerCase()) >= 0) {\n        return;\n      }\n\n      bypassCache = typeof bypassCache === 'boolean' ? bypassCache : false;\n\n      // If a local reference is provided, complete the path.\n      if (url.substr(0, 4) !== 'http') {\n        var path = window.location.href.split('/');\n        path.pop();\n        url = path.join('/') + '/' + url;\n      }\n\n      // Use the cache if defined & not bypassed\n      if (!bypassCache && this.importCache.hasOwnProperty(url)) {\n        var doc = this.createElement(this.importCache[url]);\n        callback && callback(doc.length === 1 ? doc[0] : doc);\n        if (window.NGN.BUS) {\n          window.NGN.BUS.emit('html.import', doc.length === 1 ? doc[0] : doc);\n        }\n        // console.warn('Used cached version of '+url)\n        return;\n      }\n\n      // Retrieve the file content\n      var me = this;\n      this.get(url, function (res) {\n        if (res.status !== 200) {\n          return console.warn('Check the file path of the snippet that needs to be imported. ' + url + ' could not be found (' + res.status + ')');\n        }\n\n        var doc = me.createElement(res.responseText);\n        me.importCache[url] = res.responseText;\n\n        if (doc.length === 0) {\n          console.warn(me.normalizeUrl(url) + ' import has no HTML tags.');\n          callback && callback(res.responseText);\n          if (window.NGN.BUS) {\n            window.NGN.BUS.emit('html.import', res.responseText);\n          }\n        } else {\n          var el = doc.length === 1 ? doc[0] : doc;\n          callback && callback(el);\n          if (window.NGN.BUS) {\n            window.NGN.BUS.emit('html.import', el);\n          }\n        }\n      });\n    }\n\n    /**\n     * @method importTo\n     * This helper method uses the #import method to retrieve an HTML\n     * fragment and insert it into the specified DOM element. This is\n     * the equivalent of using results of the #import to retrieve a\n     * snippet, then doing a `target.appendChild(importedElement)`.\n     * @param {string} url\n     * The URL of remote HTML snippet.\n     * @param {HTMLElement} target\n     * The DOM element where the resulting code should be appended.\n     * @param {string} callback\n     * Returns the HTMLElement, which can be directly inserted into the DOM.\n     * @param {HTMLElement} callback.element\n     * The new DOM element/NodeList.\n     */\n\n  }, {\n    key: 'importTo',\n    value: function importTo(url, target, callback) {\n      this.processImport(url, target, callback);\n    }\n\n    /**\n     * @method importBefore\n     * This helper method uses the #import method to retrieve an HTML\n     * fragment and insert it into the DOM before the target element. This is\n     * the equivalent of using results of the #import to retrieve a snippet,\n     * then doing a `target.parentNode.insertBefore(importedElement, target)`.\n     * @param {string} url\n     * The URL of remote HTML snippet.\n     * @param {HTMLElement} target\n     * The DOM element where the resulting code should be appended.\n     * @param {string} callback\n     * Returns the HTMLElement/NodeList, which can be directly inserted into the DOM.\n     * @param {HTMLElement} callback.element\n     * The new DOM element/NodeList.\n     */\n\n  }, {\n    key: 'importBefore',\n    value: function importBefore(url, target, callback) {\n      this.processImport(url, target, callback, true);\n    }\n\n    /**\n     * @method predns\n     * This notifies the browser domains which will be accessed at a later\n     * time. This helps the browser resolve DNS inquiries quickly.\n     * @param {string} domain\n     * The domain to resolve.\n     * @param {boolean} [crossorigin]\n     * Set to `true` to identify the request as a cross origin request.\n     * By default, NGN will compare the URL to the current URL in an\n     * attempt to determine if the request is across origins.\n     * @fires network-dns-prefetch\n     * Fired when a pre-fetched DNS request is issued to the browser.\n     */\n\n  }, {\n    key: 'predns',\n    value: function predns(domain, cor) {\n      this.prelink(window.location.protocol + '//' + domain, 'dns-prefetch', cor);\n    }\n\n    /**\n     * @method preconnect\n     * Tell the browser which remote resources will or may be used in the\n     * future by issuing a `Preconnect`. This will resolve DNS (#predns), make the TCP\n     * handshake, and negotiate TLS (if necessary). This can be done directly\n     * in HTML without JS, but this method allows you to easily preconnect\n     * a resource in response to a user interaction or NGN.BUS activity.\n     * @param {string} url\n     * The URL to preconnect to.\n     * @param {boolean} [crossorigin]\n     * Set to `true` to identify the request as a cross origin request.\n     * By default, NGN will compare the URL to the current URL in an\n     * attempt to determine if the request is across origins.\n     * @fires network.preconnect\n     * Fired when a preconnect is issued to the browser.\n     */\n\n  }, {\n    key: 'preconnect',\n    value: function preconnect(url, cor) {\n      this.prelink(url, 'preconnect', cor);\n    }\n\n    /**\n     * @method prefetch\n     * Fetch a specific resource and cache it.\n     * @param {string} url\n     * URL of the resource to download and cache.\n     * @param {boolean} [crossorigin]\n     * Set to `true` to identify the request as a cross origin request.\n     * By default, NGN will compare the URL to the current URL in an\n     * attempt to determine if the request is across origins.\n     * @fires network.prefetch\n     * Fired when a prefetch is issued to the browser.\n     */\n\n  }, {\n    key: 'prefetch',\n    value: function prefetch(url, cor) {\n      this.prelink(url, 'prefetch', cor);\n    }\n\n    /**\n     * @method subresource\n     * A prioritized version of #prefetch. This should be used\n     * if the asset is required for the current page. Think of this\n     * as \"needed ASAP\". Otherwise, use #prefetch.\n     * @param {string} url\n     * URL of the resource to download and cache.\n     * @param {boolean} [crossorigin]\n     * Set to `true` to identify the request as a cross origin request.\n     * By default, NGN will compare the URL to the current URL in an\n     * attempt to determine if the request is across origins.\n     * @fires network.prefetch\n     * Fired when a prefetch is issued to the browser.\n     */\n\n  }, {\n    key: 'subresource',\n    value: function subresource(url, cor) {\n      this.prelink(url, 'subresource', cor);\n    }\n\n    /**\n     * @method prerender\n     * Prerender an entire page. This behaves as though a page is\n     * opened in a hidden tab, then displayed when called. This is\n     * powerful, but should only be used when there is absolutely\n     * certainty that the prerendered page will be needed. Otherwise\n     * all of the assets are loaded for no reason (i.e. uselessly\n     * consuming bandwidth).\n     * @param {string} url\n     * URL of the page to download and cache.\n     * @param {boolean} [crossorigin]\n     * Set to `true` to identify the request as a cross origin request.\n     * By default, NGN will compare the URL to the current URL in an\n     * attempt to determine if the request is across origins.\n     * @fires network.prerender\n     * Fired when a prerender is issued to the browser.\n     */\n\n  }, {\n    key: 'prerender',\n    value: function prerender(url, cor) {\n      this.prelink(url, 'prerender', cor);\n    }\n\n    /**\n     * @method template\n     * Include a simple letiable replacement template and apply\n     * values to it. This is always cached client side.\n     * @param {string} url\n     * URL of the template to retrieve.\n     * @param {object} [letiables]\n     * A key/value objct containing letiables to replace in\n     * the template.\n     * @param {function} callback\n     * The callback receives a single argument with the HTMLElement/\n     * NodeList generated by the template.\n     */\n\n  }, {\n    key: 'template',\n    value: function template(url, data, callback) {\n      url = this.normalizeUrl(url);\n\n      if (typeof data === 'function') {\n        callback = data;\n        data = {};\n      }\n\n      data = data || {};\n\n      var me = this;\n      var tpl = void 0;\n\n      // Check the cache\n      if (this.importCache.hasOwnProperty(url)) {\n        tpl = this.importCache[url];\n        return this.applyData(tpl, data, callback);\n      }\n\n      this.get(url, function (res) {\n        var ext = null;\n        try {\n          ext = url.split('/').pop().split('?')[0].split('.').pop().toLowerCase();\n        } catch (e) {}\n        if (['js', 'css'].indexOf((ext || '').trim().toLowerCase()) >= 0) {\n          console.warn('Cannot use a .' + ext + ' file as a template. Only HTML templates are supported.');\n          return;\n        }\n\n        me.importCache[url] = res.responseText;\n        me.applyData(res.responseText, data, callback);\n      });\n    }\n  }]);\n\n  return Network;\n}();\n\nNGN.NET = new Network();\n\n/**\n * @class NGN.DOM.svg\n * Provides a way to easily manage SVG images within a document while\n * retaining the ability to style them with external CSS.\n * @singleton\n */\n/* This file should be loaded in the <head>, not at the end of the <body>.\n* By loading this script before the rest of the DOM, it will insert the\n* FOUC (Flash of Unstyled Content) CSS into the page BEFORE unstyled SVG images\n* are loaded. If this script is included in the <body>, the CSS will be loaded\n* AFTER the SVG images are loaded, meaning they may display briefly before\n* proper styling can be applied to the DOM.\n*/\n\n// Prevent FOUC\n// (function () {\n//   let ss = document.createElement('style')\n//   let str = document.createTextNode('svg[src]{display:none}svg.loading{height:0px !important;width:0px !important}')\n//   ss.appendChild(str)\n//   document.head.appendChild(ss)\n// })()\nvar fuoc = function fuoc() {\n  var ss = document.createElement('style');\n  var str = document.createTextNode('svg[src]{display:none}svg.loading{height:0px !important;width:0px !important}');\n  ss.appendChild(str);\n  document.head.appendChild(ss);\n};\nfuoc();\n\n// SVG Controller\nNGN.DOM = NGN.DOM || {};\nNGN.DOM.svg = {};\n\nObject.defineProperties(NGN.DOM.svg, {\n  /**\n   * @property {Object} _cache\n   * A cache of SVG images.\n   */\n  _cache: NGN.private({}),\n\n  /**\n   * @method swap\n   * Replace image tags with the SVG equivalent.\n   * @param {HTMLElement|NodeList} imgs\n   * The HTML element or node list containing the images that should be swapped out for SVG files.\n   * @param {function} [callback]\n   * Executed when the image swap is complete. There are no arguments passed to the callback.\n   * @private\n   */\n  swap: NGN.privateconst(function (svgs, callback) {\n    var me = this;\n    for (var i = 0; i < svgs.length; i++) {\n      var attr = svgs[i].attributes;\n      var output = me._cache[svgs[i].getAttribute('src')];\n      var attrs = [];\n\n      try {\n        attrs = /<svg(\\s.*=[\\\"\\'].*?[\\\"\\'])?>/i.exec(output)[1].trim();\n        var sep = /[\\\"\\']\\s/i.exec(attrs);\n        sep = sep !== null ? sep[0] : '\\\" ';\n        attrs = attrs.replace(new RegExp(sep, 'gi'), sep.replace(/\\s/ig, ',')).split(',');\n      } catch (e) {\n        console.error(e);\n      }\n\n      attrs = Array.isArray(attrs) ? attrs : [attrs];\n\n      var map = attrs.map(function (els) {\n        return els.split('=')[0].trim().toLowerCase();\n      });\n\n      for (var x = 0; x < attr.length; x++) {\n        var idx = map.indexOf(attr[x].name.toLowerCase());\n        if (idx < 0) {\n          attrs.push(attr[x].name + '=\"' + attr[x].value + '\"');\n        } else {\n          attrs[idx] = attr[x].name + '=\"' + attr[x].value + '\"';\n        }\n      }\n\n      attrs = attrs.filter(function (a) {\n        return a.split('=')[0].toLowerCase() !== 'src';\n      });\n\n      var svg = '<svg ' + attrs.join(' ') + '>';\n\n      svgs[i].outerHTML = output.replace(/<svg.*?>/i, svg);\n    }\n\n    callback && callback();\n  }),\n\n  /**\n   * @method id\n   * @param  {string} url\n   * Create an ID that can be used to reference an SVG symbol.\n   * @return {string}\n   * @private\n   */\n  id: NGN.privateconst(function (url) {\n    return url.replace(/.*\\:\\/\\/|[^A-Za-z0-9]|www/gi, '');\n  }),\n\n  /**\n   * @method cleanCode\n   * Captures all of the content between the <svg></svg> tag.\n   * @param  {string} code\n   * The code to clean up.\n   * @return {string}\n   * @private\n   */\n  cleanCode: NGN.privateconst(function (code) {\n    try {\n      return code.toString().trim().replace(/(\\r\\n|\\n|\\r)/gm, '').replace(/\\s+/g, ' ').match(/\\<svg.*\\<\\/svg\\>/igm, '')[0];\n    } catch (e) {\n      return '';\n    }\n  }),\n\n  /**\n   * @method viewbox\n   * Retrieves the viewbox attribute from the source code.\n   * @param  {string} code\n   * The code to extract the viewbox attribute from.\n   * @return {string}\n   * @private\n   */\n  viewbox: NGN.privateconst(function (code) {\n    return (/(viewbox=[\"'])(.*?)([\"'])/igm.exec(code.toString().trim())[2] || '0 0 100 100'\n    );\n  }),\n\n  cache: NGN.privateconst(function (url, svg) {\n    this._cache[url] = svg;\n  }),\n\n  fetchFile: NGN.privateconst(function (url, callback) {\n    var _this4 = this;\n\n    if (NGN.nodelike) {\n      callback && callback(require('fs').readFileSync(require('path').resolve(url).replace('file://', '')).toString());\n    } else {\n      (function () {\n        var me = _this4;\n        NGN.NET.get(url, function (res) {\n          callback && callback(res.status !== 200 ? new Error(res.responseText) : me.cleanCode(res.responseText));\n        });\n      })();\n    }\n  }),\n\n  /**\n   * @method update\n   * Replace any <img src=\"*.svg\"> with the SVG equivalent.\n   * @param {HTMLElement|NodeList} section\n   * The HTML DOM element to update. All children of this element will also be updated.\n   * @param {function} callback\n   * Execute this function after the update is complete.\n   */\n  update: NGN.const(function (section, callback) {\n    if (typeof section === 'function') {\n      callback = section;\n      section = document.body;\n    } else {\n      section = section || document.body;\n    }\n\n    if (section.nodeName === '#text') {\n      return;\n    }\n\n    var me = this;\n    section = section.hasOwnProperty('length') === true ? NGN._splice(section) : [section];\n\n    section.forEach(function (sec) {\n      var imgs = sec.querySelectorAll('svg[src]');\n\n      // Loop through images, prime the cache.\n      for (var i = 0; i < imgs.length; i++) {\n        me._cache[imgs[i].getAttribute('src')] = me._cache[imgs[i].getAttribute('src')] || null;\n      }\n\n      // Fetch all of the unrecognized svg files\n      var unfetched = Object.keys(me._cache).filter(function (url) {\n        return me._cache[url] === null;\n      });\n\n      var remaining = unfetched.length;\n      unfetched.forEach(function (url) {\n        me.fetchFile(url, function (content) {\n          if (!(content instanceof Error)) {\n            me.cache(url, content);\n          }\n          remaining--;\n        });\n      });\n\n      // Monitor for download completion\n      var monitor = setInterval(function () {\n        if (remaining === 0) {\n          clearInterval(monitor);\n          me.swap(imgs, callback);\n        }\n      }, 5);\n    });\n  })\n});\n\n'use strict';\n\nNGN.DATA = NGN.DATA || {};\nNGN.DATA.util = {};\n\nObject.defineProperties(NGN.DATA.util, {\n  // CRC table for checksum (cached)\n  crcTable: NGN.private(null),\n\n  /**\n   * @method makeCRCTable\n   * Generate the CRC table for checksums. This is a fairly complex\n   * operation that should only be executed once and cached for\n   * repeat use.\n   * @private\n   */\n  makeCRCTable: NGN.privateconst(function () {\n    var c = void 0;\n    var crcTable = [];\n    for (var n = 0; n < 256; n++) {\n      c = n;\n      for (var k = 0; k < 8; k++) {\n        c = c & 1 ? 0xEDB88320 ^ c >>> 1 : c >>> 1;\n      }\n      crcTable[n] = c;\n    }\n    return crcTable;\n  }),\n\n  /**\n   * @method checksum\n   * Create the checksum of the specified string.\n   * @param  {string} content\n   * The content to generate a checksum for.\n   * @return {string}\n   * Generates a checksum value.\n   */\n  checksum: NGN.const(function (str) {\n    var crcTable = this.crcTable || (this.crcTable = this.makeCRCTable());\n    var crc = 0 ^ -1;\n\n    for (var i = 0; i < str.length; i++) {\n      crc = crc >>> 8 ^ crcTable[(crc ^ str.charCodeAt(i)) & 0xFF];\n    }\n\n    return (crc ^ -1) >>> 0;\n  }),\n\n  /**\n   * @method GUID\n   * Generate  a globally unique identifier.\n   *\n   * This is a \"fast\" GUID generator, designed to work in the browser.\n   * The likelihood of an ID collision is 1:3.26x10^15 (1 in 3.26 Quadrillion),\n   * and it will generate the ID between approximately 105ms (Desktop) and 726ms\n   * (Android) as of May 2016. This code came from StackOverflow, courtesy of\n   * an answer from Jeff Ward.\n   * @return {string}\n   * Returns a V4 GUID.\n   */\n  GUID: NGN.const(function () {\n    var lut = [];\n    for (var i = 0; i < 256; i++) {\n      lut[i] = (i < 16 ? '0' : '') + i.toString(16);\n    }\n\n    var d0 = Math.random() * 0xffffffff | 0;\n    var d1 = Math.random() * 0xffffffff | 0;\n    var d2 = Math.random() * 0xffffffff | 0;\n    var d3 = Math.random() * 0xffffffff | 0;\n\n    return lut[d0 & 0xff] + lut[d0 >> 8 & 0xff] + lut[d0 >> 16 & 0xff] + lut[d0 >> 24 & 0xff] + '-' + lut[d1 & 0xff] + lut[d1 >> 8 & 0xff] + '-' + lut[d1 >> 16 & 0x0f | 0x40] + lut[d1 >> 24 & 0xff] + '-' + lut[d2 & 0x3f | 0x80] + lut[d2 >> 8 & 0xff] + '-' + lut[d2 >> 16 & 0xff] + lut[d2 >> 24 & 0xff] + lut[d3 & 0xff] + lut[d3 >> 8 & 0xff] + lut[d3 >> 16 & 0xff] + lut[d3 >> 24 & 0xff];\n  })\n});\n\n'use strict';\n\n/**\n * @class NGN.DATA.Model\n * Represents a data model/record.\n * @extends NGN.Class\n * @fires field.update\n * Fired when a datafield value is changed.\n * @fires field.create\n * Fired when a datafield is created.\n * @fires field.remove\n * Fired when a datafield is deleted.\n * @fires field.invalid\n * Fired when an invalid value is detected in an data field.\n */\n\nvar Model = function (_NGN$EventEmitter) {\n  _inherits(Model, _NGN$EventEmitter);\n\n  function Model(config) {\n    _classCallCheck(this, Model);\n\n    config = config || {};\n\n    var _this5 = _possibleConstructorReturn(this, Object.getPrototypeOf(Model).call(this));\n\n    var me = _this5;\n\n    Object.defineProperties(_this5, {\n      /**\n       * @cfg {String} [idAttribute='id']\n       * Setting this allows an attribute of the object to be used as the ID.\n       * For example, if an email is the ID of a user, this would be set to\n       * `email`.\n       */\n      idAttribute: NGN.privateconst(config.idAttribute || 'id'),\n\n      /**\n       * @cfg {object} fields\n       * A private object containing the data fields of the model, including\n       * validators & default values.\n       * ```js\n       * fields: {\n       *   fieldname: {\n       *     required: true,\n       *     type: String,\n       *     default: 'default field value'\n       *   },\n       *   fieldname2: null // Uses default field config (default value is null)\n       * }\n       * ```\n       */\n      /**\n       * @datafield {string} [id=null]\n       * The unique ID of the person.\n       */\n      fields: NGN.private(config.fields || {\n        id: {\n          required: true,\n          type: String,\n          'default': config.id || null\n        }\n      }),\n\n      /**\n       * @cfg {object|NGN.DATA.Model|NGN.DATA.Store} relationships\n       * An object containing fields that reference another data set. This can\n       * contain a configuration, an NGN.DATA.Model, or an NGN.DATA.Store.\n       * ```js\n       * // Metadata\n       * relationships: {\n       *   fieldname: {\n       *     required: true,\n       *     ref: MyModel\n       *   },\n       *   fieldname2: {\n       *     required: false,\n       *     ref: MyDataStore,\n       *     default: {}\n       *   }\n       * }\n       * // or\n       * relationships: {\n       *   fieldname: MyModel\n       * }\n       * ```\n       * Using the second syntax assumes the field **is required**.\n       *\n       * It is then possible to reference a join by the fieldname. For example:\n       *\n       * ```js\n       * console.log(MyModel.fieldname.data) // Displays the MyModel data.\n       * ```\n       * @type {[type]}\n       */\n      joins: NGN.private(config.relationships || {}),\n\n      /**\n       * @cfg {Object} virtuals\n       * A private object containing virtual data attributes and generated data.\n       * Virtual datafields are derived values. They are not part of the\n       * underlying data.\n       *\n       * **Example:**\n       *\n       * ```js\n       * let Model = new NGN.DATA.Model({\n       *   fields: {\n       *     dateOfBirth: null\n       *   },\n       *   virtuals: {\n       *     age: function () {\n       *       return YearsApart(new Date(), this.dateOfBirth)\n       *     }\n       *   }\n       * })\n       * ```\n       * The `age` example above compares the `dateOfBirth` field\n       * to the current date, expecting a numeric response.\n       * @private\n       */\n      virtuals: NGN.private(config.virtuals || {}),\n\n      /**\n       * @property {Object}\n       * The validation rules used to verify data integrity when persisting to a datasource.\n       * @private\n       */\n      validators: NGN.private({}),\n\n      /**\n       * @cfgproperty {boolean} [validation=true]\n       * Toggle data validation using this.\n       */\n      validation: NGN.public(NGN.coalesce(config.validation, true)),\n\n      /**\n       * @property {Boolean}\n       * Indicates the model is new or does not exist according to the persistence store.\n       * @private\n       * @readonly\n       */\n      isNew: NGN.private(true),\n\n      /**\n       * @property {Boolean}\n       * Indicates the model has been destroyed/deleted and should no longer exist.\n       * @private\n       * @readonly\n       */\n      isDestroyed: NGN.private(false),\n\n      /**\n       * @property {String} [oid=null]\n       * The raw object ID, which is either the #id or #idAttribute depending\n       * on how the object is configured.\n       * @private\n       */\n      oid: NGN.private(config[_this5.idAttribute] || null),\n\n      /**\n       * @cfg {boolean} [autoid=false]\n       * If the NGN.DATA.Model#idAttribute/id is not provided for a record,\n       * unique ID will be automatically generated for it. This means there\n       * will not be a `null` ID.\n       *\n       * An NGN.DATA.Store using a model with this set to `true` will never\n       * have a duplicate record, since the #id or #idAttribute will always\n       * be unique.\n       */\n      autoid: NGN.public(NGN.coalesce(config.autoid, false)),\n\n      benchmark: NGN.private(null),\n\n      /**\n       * @method setUnmodified\n       * This method forces the model to be viewed as unmodified, as though\n       * the record was just loaded from it's source. This method should only\n       * be used when custom loading data. The #load method automatically\n       * invokes this when record data is loaded. This also clears the history,\n       * just as if the record is brand new.\n       * @private\n       */\n      setUnmodified: NGN.privateconst(function () {\n        this.benchmark = this.checksum;\n        this.changelog = [];\n      }),\n\n      /**\n       * @cfg {Boolean} [allowInvalidSave=false]\n       * Set this to true to allow a save even though not all of the data properties\n       * pass validation tests.\n       */\n      allowInvalidSave: NGN.private(NGN.coalesce(config.allowInvalidSave, false)),\n\n      /**\n       * @cfg {Boolean} [disableDataValidation=false]\n       * Only used when #save is called. Setting this to `true` will bypass data validation.\n       */\n      disableDataValidation: NGN.private(NGN.coalesce(config.disableDataValidation, false)),\n\n      invalidDataAttributes: NGN.private([]),\n\n      initialDataAttributes: NGN.private([]),\n\n      /**\n       * @property {array} changelog\n       * An ordered array of changes made to the object data properties.\n       * This cannot be changed manually. Instead, use #history\n       * and #undo to manage this list.\n       * @private\n       */\n      changelog: NGN.private([]),\n\n      _nativeValidators: NGN.privateconst({\n        min: function min(_min, value) {\n          if (NGN.typeof(value) === 'array') {\n            return value.length >= _min;\n          }\n          if (NGN.typeof(value) === 'number') {\n            return value >= _min;\n          }\n          if (NGN.typeof(value) === 'string') {\n            return value.trim().length >= _min;\n          }\n          if (NGN.typeof(value) === 'date') {\n            return value.parse() >= _min.parse();\n          }\n          return false;\n        },\n        max: function max(_max, value) {\n          if (NGN.typeof(value) === 'array') {\n            return value.length <= _max;\n          }\n          if (NGN.typeof(value) === 'number') {\n            return value <= _max;\n          }\n          if (NGN.typeof(value) === 'string') {\n            return value.trim().length <= _max;\n          }\n          if (NGN.typeof(value) === 'date') {\n            return value.parse() <= _max.parse();\n          }\n          return false;\n        },\n        enum: function _enum(valid, value) {\n          return valid.indexOf(value) >= 0;\n        },\n        required: function required(field, value) {\n          return me.hasOwnProperty(field) && me[value] !== null;\n        }\n      }),\n\n      /**\n       * @cfgproperty {Object} dataMap\n       * An object mapping model attribute names to data storage field names.\n       *\n       * _Example_\n       * ```\n       * {\n       *   father: 'dad',\n       *\t email: 'eml',\n       *\t image: 'img',\n       *\t displayName: 'dn',\n       *\t firstName: 'gn',\n       *\t lastName: 'sn',\n       *\t middleName: 'mn',\n       *\t gender: 'sex',\n       *\t dob: 'bd',\n       * }\n       * ```\n       */\n      _dataMap: NGN.private(config.dataMap || null),\n      _reverseDataMap: NGN.public(null),\n\n      /**\n       * @property {object} raw\n       * The raw data.\n       * @private\n       */\n      raw: NGN.private({}),\n\n      /**\n       * @property {object} rawjoins\n       * The related data models/stores.\n       * @private\n       */\n      rawjoins: NGN.private({}),\n\n      _store: NGN.private(null)\n    });\n\n    // Make sure there aren't duplicate field names defined (includes joins)\n    var allfields = _this5.datafields.concat(_this5.virtualdatafields).concat(_this5.relationships).filter(function (key, i, a) {\n      return a.indexOf(key) !== i;\n    });\n\n    if (allfields.length > 0) {\n      throw new Error('Duplicate field names exist: ' + allfields.join(', ') + '. Unique fieldnames are required for data fields, virtuals, and relationship fields.');\n    }\n\n    // Make sure an ID reference is available.\n    if (!_this5.fields.hasOwnProperty('id')) {\n      config.fields.id = {\n        required: true,\n        type: String,\n        'default': config.id || null\n      };\n    }\n\n    // Add fields\n    Object.keys(_this5.fields).forEach(function (field) {\n      if (_typeof(me.fields[field]) !== 'object' && me.fields[field] !== null) {\n        me.fields[field] = {\n          required: true,\n          type: me.fields[field],\n          default: null,\n          name: field\n        };\n      }\n      me.addField(field, true);\n    });\n\n    // Add virtuals\n    Object.keys(_this5.virtuals).forEach(function (v) {\n      Object.defineProperty(me, v, NGN.get(function () {\n        return me.virtuals[v].apply(me);\n      }));\n    });\n\n    // Add relationships\n    Object.keys(_this5.joins).forEach(function (field) {\n      me.addRelationshipField(field, me.joins[field], true);\n    });\n\n    var events = ['field.update', 'field.create', 'field.remove', 'field.invalid', 'validator.add', 'validator.remove', 'relationship.create', 'relationship.remove'];\n\n    if (NGN.BUS) {\n      events.forEach(function (eventName) {\n        me.on(eventName, function () {\n          var args = NGN.slice(arguments);\n          args.push(me);\n          args.unshift(eventName);\n          NGN.BUS.emit.apply(NGN.BUS, args);\n        });\n      });\n    }\n    return _this5;\n  }\n\n  /**\n   * @property {Boolean}\n   * Indicates one or more data properties has changed.\n   * @readonly\n   */\n\n\n  _createClass(Model, [{\n    key: 'addValidator',\n\n\n    /**\n      * @method addValidator\n      * Add or update a validation rule for a specific model property.\n      * @param {String} field\n      * The data field to test.\n      * @param {Function/String[]/Number[]/Date[]/RegExp/Array} validator\n      * The validation used to test the property value. This should return\n      * `true` when the data is valid and `false` when it is not.\n      *\n      * * When this is a _function_, the value is passed to it as an argument.\n      * * When this is a _String_, the value is compared for an exact match (case sensitive)\n      * * When this is a _Number_, the value is compared for equality.\n      * * When this is a _Date_, the value is compared for exact equality.\n      * * When this is a _RegExp_, the value is tested and the results of the RegExp#test are used to validate.\n      * * When this is an _Array_, the value is checked to exist in the array, regardless of data type. This is treated as an `enum`.\n      * * When this is _an array of dates_, the value is compared to each date for equality.\n      * @fires validator.add\n      */\n    value: function addValidator(property, validator) {\n      if (!this.hasOwnProperty(property)) {\n        console.warn('No validator could be create for %c' + property + '%c. It is not an attribute of %c' + this.type + '%c.', NGN.css, '', NGN.css, '');\n        return;\n      }\n\n      switch (typeof validator === 'undefined' ? 'undefined' : _typeof(validator)) {\n        case 'function':\n          this.validators[property] = this.validators[property] || [];\n          this.validators[property].push(validator);\n          this.emit('validator.add', property);\n          break;\n        case 'object':\n          if (Array.isArray(validator)) {\n            this.validators[property] = this.validators[property] || [];\n            this.validators[property].push(function (value) {\n              return validator.indexOf(value) >= 0;\n            });\n            this.emit('validator.add', property);\n          } else if (validator.test) {\n            // RegExp\n            this.validators[property] = this.validators[property] || [];\n            this.validators[property].push(function (value) {\n              return validator.test(value);\n            });\n            this.emit('validator.add', property);\n          } else {\n            console.warn('No validator could be created for %c' + property + '%c. The validator appears to be invalid.', NGN.css, '');\n          }\n          break;\n        case 'string':\n        case 'number':\n        case 'date':\n          this.validators[property] = this.validators[property] || [];\n          this.validators[property].push(function (value) {\n            return value === validator;\n          });\n          this.emit('validator.add', property);\n          break;\n        default:\n          console.warn('No validator could be create for %c' + property + '%c. The validator appears to be invalid.', NGN.css, '');\n      }\n    }\n\n    /**\n      * @method removeValidator\n      * Remove a data validator from the object.\n      * @param {String} attribute\n      * The name of the attribute to remove from the validators.\n      * @fires validator.remove\n      */\n\n  }, {\n    key: 'removeValidator',\n    value: function removeValidator(attribute) {\n      if (this.validators.hasOwnProperty(attribute)) {\n        delete this.validators[attribute];\n        this.emit('validator.remove', attribute);\n      }\n    }\n\n    /**\n      * @method validate\n      * Validate one or all attributes of the data.\n      * @param {String} [attribute=null]\n      * Validate a specific attribute. By default, all attributes are tested.\n      * @private\n      * @returns {Boolean}\n      * Returns true or false based on the validity of data.\n      */\n\n  }, {\n    key: 'validate',\n    value: function validate(attribute) {\n      var _pass = true;\n      var me = this;\n\n      this.invalidDataAttributes = [];\n\n      // Single Attribute Validation\n      if (attribute) {\n        if (this.validators.hasOwnProperty(attribute)) {\n          for (var i = 0; i < this.validators[attribute].length; i++) {\n            if (!me.validators[attribute][i](me[attribute])) {\n              me.invalidDataAttributes.indexOf(attribute) < 0 && me.invalidDataAttributes.push(attribute);\n              return false;\n            }\n          }\n          if (!this.validateDataType(attribute)) {\n            this.invalidDataAttributes.push(attribute);\n          }\n          return;\n        }\n      }\n\n      // Validate All Attributes\n      for (var rule in this.validators) {\n        if (this[rule]) {\n          if (this.validators.hasOwnProperty(rule)) {\n            var pass = true;\n            for (var _i = 0; _i < this.validators[rule].length; _i++) {\n              pass = this.validators[rule][_i](this[rule]);\n              if (!pass) {\n                break;\n              }\n            }\n            if (!pass && this.invalidDataAttributes.indexOf(rule) < 0) {\n              this.invalidDataAttributes.push(rule);\n            }\n\n            if (_pass && !pass) {\n              _pass = false;\n            }\n          }\n        }\n      }\n\n      this.datafields.forEach(function (field) {\n        if (!me.validateDataType(field) && me.raw.hasOwnProperty(field)) {\n          me.invalidDataAttributes.push(field);\n        }\n      });\n\n      return;\n    }\n\n    /**\n     * @method validateDataType\n     * Indicates the data types match.\n     * @param {string} fieldname\n     * Name of the field whose data should be validated.\n     * @private\n     * @return {boolean}\n     */\n\n  }, {\n    key: 'validateDataType',\n    value: function validateDataType(field) {\n      var fieldType = NGN.typeof(this[field]);\n      var expectedType = NGN.typeof(this.fields[field].type);\n\n      if (fieldType !== 'null') {\n        return fieldType === expectedType;\n      }\n\n      if (this[field] === null && this.fields[field].required) {\n        if (this.autoid && field === this.idAttribute) {\n          return true;\n        }\n        return false;\n      }\n\n      return true;\n    }\n\n    /**\n     * @method getRelationshipField\n     * Provides specific detail/configuration about a join/relationship.\n     * @param {String} fieldname\n     * The name of the field.\n     * @returns {Object}\n     */\n\n  }, {\n    key: 'getRelationshipField',\n    value: function getRelationshipField(fieldname) {\n      return this.joins[fieldname];\n    }\n\n    /**\n     * @method hasRelationship\n     * Indicates a data join exists.\n     * @param {String} fieldname\n     * The name of the data field.\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: 'hasRelationship',\n    value: function hasRelationship(fieldname) {\n      return this.joins.hasOwnProperty(fieldname);\n    }\n\n    /**\n       * @method getDataField\n       * Provides specific detail/configuration about a field.\n       * @param {String} fieldname\n       * The name of the data field.\n       * @returns {Object}\n       */\n\n  }, {\n    key: 'getDataField',\n    value: function getDataField(fieldname) {\n      return this.fields[fieldname];\n    }\n\n    /**\n     * @method hasDataField\n     * Indicates a data field exists.\n     * @param {String} fieldname\n     * The name of the data field.\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: 'hasDataField',\n    value: function hasDataField(fieldname) {\n      return this.fields.hasOwnProperty(fieldname);\n    }\n\n    /**\n      * @method serialize\n      * Creates a JSON data object with no functions. Only uses enumerable attributes of the object by default.\n      * Specific data values can be included/excluded using #enumerableProperties & #nonEnumerableProperties.\n      *\n      * Any object property that begins with a special character will be ignored by default. Functions & Setters are always\n      * ignored. Getters are evaluated recursively until a simple object type is found or there are no further nested attributes.\n      *\n      * If a value is an instance of NGN.model.Model (i.e. a nested model or array of models), reference string is returned in the data.\n      * The model itself can be returned using #getXRef.\n      * @param {Object} [obj]\n      * Defaults to this object.\n      * @protected\n      */\n\n  }, {\n    key: 'serialize',\n    value: function serialize(obj) {\n      var _obj = obj || this.raw;\n      var rtn = {};\n\n      for (var key in _obj) {\n        _obj.nonEnumerableProperties = _obj.nonEnumerableProperties || '';\n        if (this.fields.hasOwnProperty(key)) {\n          key = key === 'id' ? this.idAttribute : key;\n          if (_obj.hasOwnProperty(key) && _obj.nonEnumerableProperties.indexOf(key) < 0 && /^[a-z0-9 ]$/.test(key.substr(0, 1)) || _obj[key] !== undefined && _obj.enumerableProperties.indexOf(key) >= 0) {\n            var dsc = Object.getOwnPropertyDescriptor(_obj, key);\n            if (!dsc.set) {\n              // Handle everything else\n              switch (_typeof(dsc.value)) {\n                case 'function':\n                  // Support date & regex proxies\n                  if (dsc.value.name === 'Date') {\n                    rtn[key] = _obj[key].refs.toJSON();\n                  } else if (dsc.value.name === 'RegExp') {\n                    rtn[key] = dsc.value();\n                  }\n                  break;\n                case 'object':\n                  // Support array proxies\n                  if (_obj[key] instanceof Array && !Array.isArray(_obj[key])) {\n                    _obj[key] = _obj[key].slice(0);\n                  }\n\n                  rtn[key] = _obj[key];\n                  break;\n                default:\n                  rtn[key] = _obj[key];\n                  break;\n              }\n            }\n          }\n        }\n      }\n\n      var me = this;\n      this.relationships.forEach(function (r) {\n        rtn[r] = me.rawjoins[r].data;\n      });\n\n      return rtn;\n    }\n\n    /**\n     * @method addField\n     * Add a data field after the initial model definition.\n     * @param {string} fieldname\n     * The name of the field.\n     * @param {object} [fieldConfiguration=null]\n     * The field configuration (see cfg#fields for syntax).\n     * @param {boolean} [suppressEvents=false]\n     * Set to `true` to prevent events from firing when the field is added.\n     */\n\n  }, {\n    key: 'addField',\n    value: function addField(field, fieldcfg, suppressEvents) {\n      if (typeof fieldcfg === 'boolean') {\n        suppressEvents = fieldcfg;\n        fieldcfg = null;\n      }\n      suppressEvents = suppressEvents !== undefined ? suppressEvents : false;\n      var me = this;\n      var cfg = null;\n      if (field.toLowerCase() !== 'id') {\n        if ((typeof field === 'undefined' ? 'undefined' : _typeof(field)) === 'object') {\n          if (!field.name) {\n            throw new Error('Cannot create data field. The supplied configuration does not contain a unique data field name.');\n          }\n          cfg = field;\n          field = cfg.name;\n          delete cfg.name;\n        }\n\n        if (me[field] !== undefined) {\n          var source = NGN.stack.pop();\n          console.warn('%c' + field + '%c data field defined multiple times (at %c' + source.path + '%c). Only the last defintion will be used.', NGN.css, '', NGN.css, '');\n          delete me[field];\n        }\n\n        // Create the data field as an object attribute & getter/setter\n        me.fields[field] = cfg || me.fields[field] || {};\n        me.fields[field].required = NGN.coalesce(me.fields[field].required, false);\n        me.fields[field].type = NGN.coalesce(me.fields[field].type, String);\n        if (field === me.idAttribute && me.autoid === true) {\n          me.fields[field].type = String;\n          me.fields[field]['default'] = NGN.DATA.util.GUID();\n        } else {\n          me.fields[field]['default'] = me.fields[field]['default'] || null;\n        }\n        me.raw[field] = me.fields[field]['default'];\n        me[field] = me.raw[field];\n\n        Object.defineProperty(me, field, {\n          get: function get() {\n            return me.raw[field];\n          },\n          set: function set(value) {\n            var old = me.raw[field];\n            me.raw[field] = value;\n            var c = {\n              action: 'update',\n              field: field,\n              old: old,\n              new: me.raw[field]\n            };\n            this.changelog.push(c);\n            this.emit('field.update', c);\n            if (!me.validate(field)) {\n              me.emit('field.invalid', {\n                field: field\n              });\n            }\n          }\n        });\n\n        if (!suppressEvents) {\n          var c = {\n            action: 'create',\n            field: field\n          };\n          this.changelog.push(c);\n          this.emit('field.create', c);\n        }\n\n        // Add field validators\n        if (me.fields.hasOwnProperty(field)) {\n          if (me.fields[field].hasOwnProperty('pattern')) {\n            me.addValidator(field, me.fields[field].pattern);\n          }\n          ['min', 'max', 'enum'].forEach(function (v) {\n            if (me.fields[field].hasOwnProperty(v)) {\n              me.addValidator(field, function (val) {\n                return me._nativeValidators[v](me.fields[field], val);\n              });\n            }\n          });\n          if (me.fields[field].hasOwnProperty('required')) {\n            if (me.fields[field].required) {\n              me.addValidator(field, function (val) {\n                return me._nativeValidators.required(field, val);\n              });\n            }\n          }\n          if (me.fields[field].hasOwnProperty('validate')) {\n            if (typeof me.fields[field] === 'function') {\n              me.addValidator(field, function (val) {\n                return me.fields[field](val);\n              });\n            } else {\n              var _source = NGN.stack.pop();\n              console.warn('Invalid custom validation function (in %c' + _source.path + '%c). The value passed to the validate attribute must be a function.', NGN.css, '');\n            }\n          }\n        }\n      } else if (me.id === null && me.autoid) {\n        me.id = NGN.DATA.util.GUID();\n      }\n    }\n\n    /**\n     * @method addVirtual\n     * Add a virtual field dynamically.\n     * @param {string} name\n     * The name of the attribute to add.\n     * @param {function} handler\n     * The synchronous method (or generator) that produces\n     * the desired output.\n     */\n\n  }, {\n    key: 'addVirtual',\n    value: function addVirtual(name, fn) {\n      var me = this;\n      Object.defineProperty(this, name, {\n        get: function get() {\n          return fn.apply(me);\n        }\n      });\n    }\n\n    /**\n     * @method addRelationshipField\n     * Join another model dynamically.\n     * @param {string} name\n     * The name of the field to add.\n     * @param {Object|NGN.DATA.Model} config\n     * The configuration or data model type. This follows the same syntax\n     * defined in the #joins attribute.\n     * @param {boolean} [suppressEvents=false]\n     * Set to `true` to prevent events from firing when the field is added.\n     */\n\n  }, {\n    key: 'addRelationshipField',\n    value: function addRelationshipField(name, cfg, suppressEvents) {\n      suppressEvents = suppressEvents !== undefined ? suppressEvents : false;\n\n      if (this.rawjoins.hasOwnProperty(name) || this.fields.hasOwnProperty(name) || this.hasOwnProperty(name)) {\n        throw new Error(name + ' already exists. It cannot be added to the model again.');\n      }\n\n      if (typeof cfg === 'function' || (typeof cfg === 'undefined' ? 'undefined' : _typeof(cfg)) === 'object' && !cfg.hasOwnProperty('type')) {\n        cfg = {\n          type: cfg\n        };\n      }\n\n      if (!cfg.type) {\n        throw new Error('Configuration has no reference! The reference must be an NGN.DATA.Model or NGN.DATA.Store.');\n      }\n\n      cfg.required = NGN.coalesce(cfg.required, true);\n      cfg.default = cfg.default || null;\n\n      var me = this;\n      var entityType = 'model';\n      if (cfg.type instanceof NGN.DATA.Store) {\n        entityType = 'store';\n      } else if (NGN.typeof(cfg.type) === 'array') {\n        if (cfg.type.length === 0) {\n          throw new Error(name + ' cannot be an empty store. A model must be provided.');\n        }\n        if (NGN.typeof(cfg.type[0]) === 'modelloader') {\n          entityType = 'collection';\n        } else {\n          throw new Error(name + ' does not specify a valid store.');\n        }\n      } else if (_typeof(cfg.type) === 'object') {\n        if (cfg.type.model) {\n          entityType = 'store';\n        }\n      }\n\n      if (entityType === 'store') {\n        var storeCfg = {};\n        if (cfg.type instanceof NGN.DATA.Store) {\n          this.rawjoins[name] = cfg.type;\n          storeCfg = null;\n        } else if (cfg.type.model) {\n          storeCfg = cfg.type;\n        } else {\n          throw new Error('Nested store configuration is invalid or was not recognized.');\n        }\n\n        if (storeCfg !== null) {\n          this.rawjoins[name] = new NGN.DATA.Store(storeCfg);\n        }\n        this.applyStoreMonitor(name);\n      } else if (entityType === 'collection') {\n        this.rawjoins[name] = new NGN.DATA.Store({\n          model: cfg.type[0]\n        });\n        this.applyStoreMonitor(name);\n      } else if (!cfg.type.data) {\n        this.rawjoins[name] = cfg.default !== null ? new cfg.type(cfg.default) : new cfg.type(); // eslint-disable-line new-cap\n        this.applyModelMonitor(name);\n      } else if (cfg.type.data) {\n        this.rawjoins[name] = cfg.type;\n        this.applyStoreMonitor(name);\n      } else {\n        throw new Error('Nested store configuration is invalid or was not recognized.');\n      }\n\n      Object.defineProperty(this, name, {\n        enumerable: true,\n        get: function get() {\n          return me.rawjoins[name];\n        }\n      });\n\n      if (!suppressEvents) {\n        var c = {\n          action: 'create',\n          field: name\n        };\n        this.changelog.push(c);\n        this.emit('relationship.create', c);\n      }\n    }\n\n    /**\n     * @method applyModelMonitor\n     * Applies event handlers for bubbling model events.\n     * @param {string} field\n     * The relationship field name.\n     * @private\n     */\n\n  }, {\n    key: 'applyModelMonitor',\n    value: function applyModelMonitor(name) {\n      var model = this.rawjoins[name];\n      var me = this;\n\n      model.on('field.update', function (delta) {\n        me.emit('field.update', {\n          action: 'update',\n          field: name + '.' + delta.field,\n          old: delta.old,\n          new: delta.new,\n          join: true\n        });\n      });\n\n      model.on('field.create', function (delta) {\n        me.emit('field.update', {\n          action: 'update',\n          field: name + '.' + delta.field,\n          old: null,\n          new: null,\n          join: true\n        });\n      });\n\n      model.on('field.remove', function (delta) {\n        me.emit('field.update', {\n          action: 'update',\n          field: name + '.' + delta.field,\n          old: delta.value,\n          new: null,\n          join: true\n        });\n      });\n    }\n\n    /**\n     * @method applyStoreMonitor\n     * Applies event handlers for store data.\n     * @param {string} name\n     * Name of the raw join.\n     * @private\n     */\n\n  }, {\n    key: 'applyStoreMonitor',\n    value: function applyStoreMonitor(name) {\n      var _this6 = this;\n\n      if (!this.rawjoins.hasOwnProperty(name)) {\n        return;\n      }\n      if (this.rawjoins[name].hasOwnProperty('proxy')) {\n        (function () {\n          var me = _this6;\n\n          _this6.rawjoins[name].on('record.create', function (record) {\n            var old = me[name].data;\n            old.pop();\n            var c = {\n              action: 'update',\n              field: name,\n              join: true,\n              old: old,\n              new: me[name].data\n            };\n            me.emit('field.update', c);\n          });\n          _this6.rawjoins[name].on('record.update', function (record, delta) {\n            if (!delta) {\n              return;\n            }\n            var c = {\n              action: 'update',\n              field: name + '.' + delta.field,\n              join: true,\n              old: delta.old,\n              new: delta.new\n            };\n            me.emit('field.update', c);\n          });\n          _this6.rawjoins[name].on('record.delete', function (record) {\n            var old = me[name].data;\n            old.push(record.data);\n            var c = {\n              action: 'update',\n              field: name,\n              join: true,\n              old: old,\n              new: me[name].data\n            };\n            me.emit('field.update', c);\n          });\n        })();\n      }\n    }\n\n    /**\n     * @method removeField\n     * Remove a field from the data model.\n     * @param {string} name\n     * Name of the field to remove.\n     */\n\n  }, {\n    key: 'removeField',\n    value: function removeField(name) {\n      if (this.raw.hasOwnProperty(name)) {\n        var val = this.raw[name];\n        delete this[name];\n        delete this.fields[name]; // eslint-disable-line no-undef\n        delete this.raw[name]; // eslint-disable-line no-undef\n        if (this.invalidDataAttributes.indexOf(name) >= 0) {\n          this.invalidDataAttributes.splice(this.invalidDataAttributes.indexOf(name), 1);\n        }\n        var c = {\n          action: 'delete',\n          field: name,\n          value: val\n        };\n        this.emit('field.remove', c);\n        this.changelog.push(c);\n      }\n    }\n\n    /**\n     * @method removeVirtual\n     * Remove a virtual field.\n     * @param {string} name\n     * Name of the field.\n     */\n\n  }, {\n    key: 'removeVirtual',\n    value: function removeVirtual(name) {\n      delete this[name];\n    }\n\n    /**\n     * @method removeRelationshipField\n     * Remove an existing join dynamically.\n     * @param {string} name\n     * The name of the relationship field to remove.\n     * @param {boolean} [suppressEvents=false]\n     * Set to `true` to prevent events from firing when the field is added.\n     */\n\n  }, {\n    key: 'removeRelationshipField',\n    value: function removeRelationshipField(name, suppressEvents) {\n      suppressEvents = suppressEvents !== undefined ? suppressEvents : false;\n      if (this.joins.hasOwnProperty(name)) {\n        var val = this.rawjoins[name];\n        delete this.rawjoins[name];\n        delete this[name];\n        delete this.joins[name];\n        if (!suppressEvents) {\n          var c = {\n            action: 'delete',\n            field: name,\n            old: val,\n            join: true\n          };\n          this.changelog.push(c);\n          this.emit('relationship.remove', c);\n        }\n      }\n    }\n\n    /**\n     * @method undo\n     * A rollback function to undo changes. This operation affects\n     * the changelog. It is possible to undo an undo (i.e. redo).\n     * This works with relationship creating/removing relationship fields,\n     * but not updates to the related model. To undo changes to a relationship\n     * field, the `undo()` method _of the related model_ must be called.\n     * @param {number} [OperationCount=1]\n     * The number of operations to \"undo\". Defaults to a single operation.\n     */\n\n  }, {\n    key: 'undo',\n    value: function undo(back) {\n      back = back || 1;\n      var old = this.changelog.splice(this.changelog.length - back, back);\n      var me = this;\n\n      old.reverse().forEach(function (change) {\n        if (!(typeof change.join === 'boolean' ? change.join : false)) {\n          switch (change.action) {\n            case 'update':\n              me[change.field] = change.old;\n              break;\n            case 'create':\n              me.removeField(change.field);\n              break;\n            case 'delete':\n              me.addField(change.field);\n              me[change.field] = me.old;\n              break;\n          }\n        } else {\n          switch (change.action) {\n            case 'create':\n              me.removeRelationshipField(change.field);\n              break;\n            case 'delete':\n              me.addRelationshipField(change.field);\n              me[change.field] = change.old;\n              break;\n          }\n        }\n      });\n    }\n\n    /**\n     * @method load\n     * Load a data record. This clears the #history. #modified\n     * will be set to `false`, as though the record has been untouched.\n     * @param {object} data\n     * The data to apply to the model.\n     */\n\n  }, {\n    key: 'load',\n    value: function load(data) {\n      data = data || {};\n\n      // Handle data maps\n      var me = this;\n      if (this._dataMap !== null) {\n        Object.keys(this.reverseMap).forEach(function (key) {\n          if (data.hasOwnProperty(key)) {\n            data[me.reverseMap[key]] = data[key];\n            delete data[key];\n          }\n        });\n      }\n\n      // Loop through the keys and add data fields\n      Object.keys(data).forEach(function (key) {\n        if (me.fields.hasOwnProperty(key)) {\n          if (me.raw.hasOwnProperty(key)) {\n            me.raw[key] = data[key];\n          } else if (key === me.idAttribute) {\n            me.id = data[key];\n          }\n        } else if (me.joins.hasOwnProperty(key)) {\n          // let tmp = new me.getRelated(key).type() // eslint-disable-line new-cap\n          // tmp.load(data[key])\n          // me.rawjoin[key] = tmp\n          me.rawjoins[key].load(data[key]);\n        } else {\n          var source = NGN.stack.pop();\n          console.warn('%c' + key + '%c specified in %c' + source.path + '%c as a data field but is not defined in the model.', NGN.css, '', NGN.css, '');\n        }\n      });\n\n      this.setUnmodified();\n    }\n  }, {\n    key: 'modified',\n    get: function get() {\n      return this.checksum !== this.benchmark;\n    }\n\n    /**\n     * @cfgproperty {String/Number/Date} [id=null]\n     * The unique ID of the model object. If #idAttribute is defined,\n     * this will get/set the #idAttribute value.\n     */\n\n  }, {\n    key: 'id',\n    get: function get() {\n      return this.oid;\n    },\n    set: function set(value) {\n      this.oid = value;\n    }\n\n    /**\n     * @property checksum\n     * The unique checksum of the record (i.e. a record fingerprint).\n     * This will change as the data changes.\n     */\n\n  }, {\n    key: 'checksum',\n    get: function get() {\n      return NGN.DATA.util.checksum(JSON.stringify(this.data));\n    }\n\n    /**\n     * @property {Object} dataMap\n     * The current data map.\n     * @private\n     */\n\n  }, {\n    key: 'dataMap',\n    get: function get() {\n      return this._dataMap;\n    },\n    set: function set(value) {\n      this._dataMap = value;\n      this._reverseDataMap = null;\n    }\n\n    /**\n     * @property {NGN.DATA.Store} store\n     * If a store is associated with the model, this will\n     * provide a reference to it. If there is no store, this\n     * will return `null`.\n     */\n\n  }, {\n    key: 'datastore',\n    get: function get() {\n      return this._store;\n    }\n\n    /**\n     * @property {boolean} valid\n     * Indicates the record is valid.\n     */\n\n  }, {\n    key: 'valid',\n    get: function get() {\n      this.validate();\n      return this.invalidDataAttributes.length === 0;\n    }\n\n    /**\n     * @property datafields\n     * Provides an array of data fields associated with the model.\n     * @returns {String[]}\n     */\n\n  }, {\n    key: 'datafields',\n    get: function get() {\n      return Object.keys(this.fields);\n    }\n\n    /**\n     * @property reslationships\n     * Provides an array of join fields associated with the model.\n     * @returns {String[]}\n     */\n\n  }, {\n    key: 'relationships',\n    get: function get() {\n      return Object.keys(this.joins);\n    }\n\n    /**\n     * @property virtualdatafields\n     * Provides an array of virtual data fields associated with the model.\n     * @returns {String[]}\n     */\n\n  }, {\n    key: 'virtualdatafields',\n    get: function get() {\n      return Object.keys(this.virtuals);\n    }\n\n    /**\n     * @property {object} reverseMap\n     * Reverses the data map. For example, if the original #dataMap\n     * looks like:\n     *\n     * ```js\n     * {\n     *    firstname: 'gn',\n     *    lastname: 'sn\n     * }\n     * ```\n     *\n     * The reverse map will look like:\n     *\n     * ```js\n     * {\n     *    gn: 'firstname',\n     *    sn: 'lastname\n     * }\n     * ```\n     */\n\n  }, {\n    key: 'reverseMap',\n    get: function get() {\n      var _this7 = this;\n\n      if (this.dataMap !== null) {\n        var _ret8 = function () {\n          if (_this7._reverseDataMap !== null) {\n            return {\n              v: _this7._reverseDataMap\n            };\n          }\n          var rmap = {};\n          var me = _this7;\n          Object.keys(_this7._dataMap).forEach(function (attr) {\n            rmap[me._dataMap[attr]] = attr;\n          });\n          _this7._reverseDataMap = rmap;\n          return {\n            v: rmap\n          };\n        }();\n\n        if ((typeof _ret8 === 'undefined' ? 'undefined' : _typeof(_ret8)) === \"object\") return _ret8.v;\n      }\n      return null;\n    }\n\n    /**\n      * @property data\n      * Creates a JSON representation of the data entity. This is\n      * a record that can be persisted to a database or other data store.\n      * @readonly.\n      */\n\n  }, {\n    key: 'data',\n    get: function get() {\n      var _this8 = this;\n\n      var d = this.serialize();\n      if (!d.hasOwnProperty(this.idAttribute) && this.autoid) {\n        d[this.idAttribute] = this[this.idAttribute];\n      }\n      if (this.dataMap) {\n        (function () {\n          var me = _this8;\n          // Loop through the map keys\n          Object.keys(_this8.dataMap).forEach(function (key) {\n            // If the node contains key, make the mapping\n            if (d.hasOwnProperty(key)) {\n              if (d[key] instanceof NGN.DATA.Model) {\n                d[me.dataMap[key]] = d[key].data;\n              } else {\n                d[me.dataMap[key]] = d[key];\n              }\n              delete d[key];\n            }\n          });\n        })();\n      }\n      return d;\n    }\n\n    /**\n     * @property history\n     * The history of the entity (i.e. changelog).The history\n     * is shown from most recent to oldest change. Keep in mind that\n     * some actions, such as adding new custom fields on the fly, may\n     * be triggered before other updates.\n     * @returns {array}\n     */\n\n  }, {\n    key: 'history',\n    get: function get() {\n      return this.changelog.reverse();\n    }\n  }]);\n\n  return Model;\n}(NGN.EventEmitter);\n\nNGN.DATA = NGN.DATA || {};\n\n// Object.defineProperty(NGN.DATA, 'Model', NGN.public(Entity))\n\nObject.defineProperties(NGN.DATA, {\n  Model: NGN.public(function (cfg) {\n    var ModelLoader = function ModelLoader(data) {\n      var model = new Model(cfg);\n      if (data) {\n        model.load(data);\n      }\n      return model;\n    };\n\n    return ModelLoader;\n  }),\n\n  Entity: NGN.private(Model)\n});\n\nif (NGN.nodelike) {\n  module.exports = NGN.DATA;\n}\n\n'use strict';\n\n/**\n * @class NGN.DATA.Store\n * Represents a collection of data.\n * @fires record.create\n * Fired when a new record is created. The new\n * record is provided as an argument to the event\n * handler.\n * @fires record.delete\n * Fired when a record(s) is removed. The old record\n * is provided as an argument to the event handler.\n */\n\nvar Store = function (_NGN$EventEmitter2) {\n  _inherits(Store, _NGN$EventEmitter2);\n\n  function Store(cfg) {\n    _classCallCheck(this, Store);\n\n    cfg = cfg || {};\n\n    var _this9 = _possibleConstructorReturn(this, Object.getPrototypeOf(Store).call(this, cfg));\n\n    Object.defineProperties(_this9, {\n      /**\n       * @cfg {NGN.DATA.Model} model\n       * An NGN Data Model to which data records conform.\n       */\n      model: NGN.const(cfg.model || null),\n\n      // The raw data collection\n      _data: NGN.private([]),\n\n      // The raw filters\n      _filters: NGN.private([]),\n\n      // The raw indexes\n      _index: NGN.private(cfg.index || []),\n\n      // Placeholders to track the data that's added/removed\n      // during the lifespan of the store. Modified data is\n      // tracked within each model record.\n      _created: NGN.private([]),\n      _deleted: NGN.private([]),\n      _loading: NGN.private(false),\n\n      /**\n       * @property {NGN.DATA.Proxy} proxy\n       * The proxy used to transmit data over a network.\n       * @private\n       */\n      proxy: NGN.private(null),\n\n      /**\n       * @cfg {boolean} [allowDuplicates=true]\n       * Set to `false` to prevent duplicate records from being added.\n       * If a duplicate record is added, it will be ignored and an\n       * error will be thrown.\n       */\n      allowDuplicates: NGN.public(NGN.coalesce(cfg.allowDuplicates, true)),\n\n      /**\n       * @cfg {boolean} [errorOnDuplicate=false]\n       * Set to `true` to throw an error when a duplicate record is detected.\n       * If this is not set, it will default to the value of #allowDuplicates.\n       * If #allowDuplicates is not defined either, this will be `true`\n       */\n      errorOnDuplicate: NGN.const(NGN.coalesce(cfg.errorOnDuplicate, cfg.allowDuplicates, true))\n    });\n\n    var obj = {};\n    _this9._index.forEach(function (i) {\n      obj[i] = [];\n    });\n    _this9._index = obj;\n\n    var events = ['record.duplicate', 'record.create', 'record.update', 'record.delete', 'clear', 'filter.create', 'filter.delete', 'index.create', 'index.delete'];\n\n    if (NGN.BUS) {\n      (function () {\n        var me = _this9;\n        events.forEach(function (eventName) {\n          me.on(eventName, function () {\n            var args = NGN.slice(arguments);\n            args.shift();\n            args.push(me);\n            NGN.BUS.emit(eventName, args);\n          });\n        });\n      })();\n    }\n    return _this9;\n  }\n\n  /**\n   * @property {array} data\n   * The complete and unfiltered raw underlying dataset. This data\n   * is usually persisted to a database.\n   * @readonly\n   */\n\n\n  _createClass(Store, [{\n    key: 'add',\n\n\n    /**\n     * @method add\n     * Add a data record.\n     * @param {NGN.DATA.Model|object} data\n     * Accepts an existing NGN Data Model or a JSON object.\n     * If a JSON object is supplied, it will be applied to\n     * the data model specified in cfg#model. If no model\n     * is specified, the raw JSON data will be stored.\n     * @param {boolean} [suppressEvent=false]\n     * Set this to `true` to prevent the `record.create` event\n     * from firing.\n     * @return {NGN.DATA.Model}\n     * Returns the new record.\n     */\n    value: function add(data, suppressEvent) {\n      var record = void 0;\n      var me = this;\n\n      if (!(data instanceof NGN.DATA.Entity)) {\n        try {\n          data = JSON.parse(data);\n        } catch (e) {}\n        if ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) !== 'object') {\n          throw new Error('Cannot add a non-object record.');\n        }\n        if (this.model) {\n          record = new this.model(data); // eslint-disable-line new-cap\n        } else {\n          record = data;\n        }\n      } else {\n        record = data;\n      }\n\n      if (record.hasOwnProperty('_store')) {\n        record._store = me;\n      }\n\n      var dupe = this.isDuplicate(record);\n      if (dupe) {\n        this.emit('record.duplicate', record);\n        if (!this.allowDuplicates) {\n          if (this.errorOnDuplicate) {\n            throw new Error('Cannot add duplicate record (allowDuplicates = false).');\n          }\n          return;\n        }\n      }\n\n      this.listen(record);\n      this.applyIndices(record, this._data.length);\n      this._data.push(record);\n      !this._loading && this._created.indexOf(record) < 0 && this._created.push(record);\n      !NGN.coalesce(suppressEvent, false) && this.emit('record.create', record);\n      return record;\n    }\n\n    /**\n     * @method isDuplicate\n     * Indicates whether the specified record is a duplicate.\n     * This compares checksum values. Any match is considered a\n     * duplicate. It will also check for duplication of raw JSON\n     * objects (i.e. non-NGN.DATA.Model records).\n     * @param  {NGN.DATA.Model|Object} record\n     * The record or JSON object.\n     * @return {boolean}\n     */\n\n  }, {\n    key: 'isDuplicate',\n    value: function isDuplicate(record) {\n      if (this._data.indexOf(record) >= 0) {\n        return false;\n      }\n      return this._data.filter(function (rec) {\n        return rec.checksum === record.checksum;\n      }).length > 0;\n    }\n\n    /**\n     * @method listen\n     * Listen to a specific record's events and respond.\n     * @param {NGN.DATA.Model} record\n     * The record to listen to.\n     * @fires record.update\n     * Fired when a record is updated. The #record is passed as an argument to\n     * the event handler.\n     * @private\n     */\n\n  }, {\n    key: 'listen',\n    value: function listen(record) {\n      var me = this;\n      record.on('field.update', function (delta) {\n        me.updateIndice(delta.field, delta.old, delta.new, me._data.indexOf(record));\n        me.emit('record.update', record, delta);\n      });\n      record.on('field.delete', function (delta) {\n        me.updateIndice(delta.field, delta.old, undefined, me._data.indexOf(record));\n        me.emit('record.update', record, delta);\n      });\n    }\n\n    /**\n     * @method bulk\n     * Bulk load data.\n     * @param {string} eventName\n     * @param {array} data\n     * @private\n     */\n\n  }, {\n    key: 'bulk',\n    value: function bulk(event, data) {\n      this._loading = true;\n      var me = this;\n      data.forEach(function (record) {\n        me.add(record, true);\n      });\n      this._loading = false;\n      this._deleted = [];\n      this._created = [];\n      this.emit(event || 'load');\n    }\n\n    /**\n     * @method load\n     * Bulk load data. This acts the same as adding records,\n     * but it suppresses individual record creation events.\n     * This will add data to the existing collection. If you\n     * want to load fresh data, use the #reload method.\n     * @param {array} data\n     * An array of data. Each array element should be an\n     * NGN.DATA.Model or a JSON object that can be applied\n     * to the store's #model.\n     */\n\n  }, {\n    key: 'load',\n    value: function load() {\n      var array = Array.isArray(arguments[0]) ? arguments[0] : NGN.slice(arguments);\n      this.bulk('load', array);\n    }\n\n    /**\n     * @method reload\n     * Reload data. This is the same as running #clear followed\n     * by #load.\n     */\n\n  }, {\n    key: 'reload',\n    value: function reload(data) {\n      this.clear();\n      var array = Array.isArray(arguments[0]) ? arguments[0] : NGN.slice(arguments);\n      this.bulk('reload', array);\n    }\n\n    /**\n     * @method indexOf\n     * Find the index number of a record within the collection.\n     * @param  {NGN.DATA.Model} record\n     * The record whose index should be identified.\n     * @return {Number}\n     * Returns a number from `0-collection length`. Returns `-1` if\n     * the record is not found in the collection.\n     */\n\n  }, {\n    key: 'indexOf',\n    value: function indexOf(record) {\n      if ((typeof record === 'undefined' ? 'undefined' : _typeof(record)) !== 'object' || !(record instanceof NGN.DATA.Entity) && !record.checksum) {\n        return -1;\n      }\n      return this._data.findIndex(function (el) {\n        return el.checksum === record.checksum;\n      });\n    }\n\n    /**\n     * @method contains\n     * A convenience method that indicates whether a record is in\n     * the store or not.\n     * @param {NGN.DATA.Model} record\n     * The record to check for inclusion in the data collection.\n     * @return {Boolean}\n     */\n\n  }, {\n    key: 'contains',\n    value: function contains(record) {\n      return this.indexOf(record) >= 0;\n    }\n\n    /**\n     * @method remove\n     * Remove a record.\n     * @param {NGN.DATA.Model|object|number} data\n     * Accepts an existing NGN Data Model, JSON object,\n     * or index number. Using a JSON object is slower\n     * than using a reference to a data model or an index\n     * number (index is fastest).\n     * @fires record.delete\n     * @returns {NGN.DATA.Model}\n     * Returns the data model that was just removed. If a model\n     * is unavailable (i.e. remove didn't find the specified record),\n     * this will return `null`.\n     */\n\n  }, {\n    key: 'remove',\n    value: function remove(data, suppressEvents) {\n      var _this10 = this;\n\n      var removedRecord = [];\n      var dataIndex = void 0;\n\n      if (typeof data === 'number') {\n        dataIndex = data;\n      } else if (data && data.checksum && data.checksum !== null || data instanceof NGN.DATA.Model) {\n        dataIndex = this.indexOf(data);\n      } else {\n        (function () {\n          var m = new _this10.model(data, true); // eslint-disable-line new-cap\n          dataIndex = _this10._data.findIndex(function (el) {\n            return el.checksum === m.checksum;\n          });\n        })();\n      }\n\n      // If no record is found, the operation fails.\n      if (dataIndex < 0) {\n        throw new Error('Record removal failed (record not found at index ' + (dataIndex || '').toString() + ').');\n      }\n\n      removedRecord = this._data.splice(dataIndex, 1);\n\n      if (removedRecord.length > 0) {\n        removedRecord = removedRecord[0];\n        this.unapplyIndices(dataIndex);\n        if (!this._loading) {\n          var i = this._created.indexOf(removedRecord);\n          if (i >= 0) {\n            i >= 0 && this._created.splice(i, 1);\n          } else if (this._deleted.indexOf(removedRecord) < 0) {\n            this._deleted.push(removedRecord);\n          }\n        }\n\n        if (!NGN.coalesce(suppressEvents, false)) {\n          this.emit('record.delete', removedRecord);\n        }\n\n        return removedRecord;\n      }\n\n      return null;\n    }\n\n    /**\n     * @method clear\n     * Removes all data.\n     * @fires clear\n     * Fired when all data is removed\n     */\n\n  }, {\n    key: 'clear',\n    value: function clear() {\n      this._data = [];\n      var me = this;\n      Object.keys(this._index).forEach(function (index) {\n        me._index[index] = [];\n      });\n      this.emit('clear');\n    }\n\n    /**\n     * @method find\n     * Retrieve a specific record or set of records.\n     * @param {number|function|string|object} [query=null]\n     * When this is set to a `number`, the corresponding zero-based\n     * record will be returned. A `function` can also be used, which\n     * acts like a filter. Each record is passed to this function.\n     *\n     * For example, if we want to find all administrators within a\n     * set of users, the following could be used:\n     *\n     * ```js\n     *   let record = MyStore.find(function (record) {\n     *     return record.usertype = 'admin'\n     *   })\n     * ```\n     *\n     * It's also possible to supply a String. When this is supplied,\n     * the store will look for a record whose ID (see NGN.DATA.Model#idAttribute)\n     * matches the string. Numberic ID's are matched on their string\n     * equivalent for search purposes (data is not modified).\n     *\n     * An object can be used to search for specific field values. For example:\n     *\n     * ```js\n     * MyStore.find({\n     *   firstname: 'Corey',\n     *   lastname: /Butler|Doe/\n     * })\n     * ```\n     *\n     * The code above will find everyone named Corey Butler or Corey Doe. The\n     * first attribute must match the value exactly whereas `lastname` will\n     * match against the regular expression.\n     *\n     * If this parameter is `undefined` or `null`, all records will be\n     * returned (i.e. no search criteria specified, so return everything).\n     *\n     * If you're using a large dataset, indexing can speed up queries. To take\n     * full advantage of indexing, all of the query elements should be indexed.\n     * For example, if you have `lastname`, 'firstname' in your query and\n     * both of those are indexed, the response time will be substantially faster\n     * than if they're not (in large data sets). However; if one of those\n     * elements is _not_ indexed, performance may not increase.\n     * @param {boolean} [ignoreFilters=false]\n     * Set this to `true` to search the full unfiltered record set.\n     * @return {NGN.DATA.Model|array|null}\n     * An array is returned when a function is specified for the query.\n     * Otherwise the specific record is return. This method assumes\n     * records have unique ID's.\n     */\n\n  }, {\n    key: 'find',\n    value: function find(query, ignoreFilters) {\n      var _this11 = this;\n\n      if (this._data.length === 0) {\n        return [];\n      }\n\n      var resultSet = [];\n      var me = this;\n\n      var _ret12 = function () {\n        switch (typeof query === 'undefined' ? 'undefined' : _typeof(query)) {\n          case 'function':\n            resultSet = _this11._data.filter(query);\n            break;\n          case 'number':\n            resultSet = query < 0 || query >= _this11._data.length ? null : _this11._data[query];\n            break;\n          case 'string':\n            var indice = _this11.getIndices(_this11._data[0].idAttribute, query.trim());\n            if (indice !== null && indice.length > 0) {\n              indice.forEach(function (index) {\n                resultSet.push(me._data[index]);\n              });\n              return {\n                v: resultSet\n              };\n            }\n\n            var recordSet = _this11._data.filter(function (record) {\n              return (record[record.idAttribute] || '').toString().trim() === query.trim();\n            });\n\n            resultSet = recordSet.length === 0 ? null : recordSet[0];\n\n            break;\n          case 'object':\n            if (query instanceof NGN.DATA.Model) {\n              if (_this11.contains(query)) {\n                return {\n                  v: query\n                };\n              }\n              return {\n                v: null\n              };\n            }\n\n            var match = [];\n            var noindex = [];\n            var queryKeys = Object.keys(query);\n\n            queryKeys.forEach(function (field) {\n              var index = me.getIndices(field, query[field]);\n              if (index) {\n                match = match.concat(index || []);\n              } else {\n                field !== null && noindex.push(field);\n              }\n            });\n\n            // Deduplicate\n            match.filter(function (index, i) {\n              return match.indexOf(index) === i;\n            });\n\n            // Get non-indexed matches\n            if (noindex.length > 0) {\n              resultSet = _this11._data.filter(function (record, i) {\n                if (match.indexOf(i) >= 0) {\n                  return false;\n                }\n                for (var x = 0; x < noindex.length; x++) {\n                  if (record[noindex[x]] !== query[noindex[x]]) {\n                    return false;\n                  }\n                }\n                return true;\n              });\n            }\n\n            // If a combined indexable + nonindexable query\n            resultSet = resultSet.concat(match.map(function (index) {\n              return me._data[index];\n            })).filter(function (record) {\n              for (var y = 0; y < queryKeys.length; y++) {\n                if (query[queryKeys[y]] !== record[queryKeys[y]]) {\n                  return false;\n                }\n              }\n              return true;\n            });\n            break;\n          default:\n            resultSet = _this11._data;\n        }\n      }();\n\n      if ((typeof _ret12 === 'undefined' ? 'undefined' : _typeof(_ret12)) === \"object\") return _ret12.v;\n      if (resultSet === null) {\n        return null;\n      }\n\n      if (!NGN.coalesce(ignoreFilters, false)) {\n        this.applyFilters(resultSet instanceof Array ? resultSet : [resultSet]);\n      }\n\n      return resultSet;\n    }\n\n    /**\n     * @method applyFilters\n     * Apply filters to a data set.\n     * @param {array} data\n     * The array of data to apply filters to.\n     * @private\n     */\n\n  }, {\n    key: 'applyFilters',\n    value: function applyFilters(data) {\n      if (this._filters.length === 0) {\n        return data;\n      }\n\n      this._filters.forEach(function (filter) {\n        data = data.filter(filter);\n      });\n\n      return data;\n    }\n\n    /**\n     * @method addFilter\n     * Add a filter to the record set.\n     * @param {function} fn\n     * The filter function. This function should comply\n     * with the [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter) specification,\n     * returning a boolean value.\n     * The item passed to the filter will be the NGN.DATA.Model specified\n     * in the cfg#model.\n     * @fires filter.create\n     * Fired when a filter is created.\n     */\n\n  }, {\n    key: 'addFilter',\n    value: function addFilter(fn) {\n      this._filters.push(fn);\n      this.emit('filter.create', fn);\n    }\n\n    /**\n     * @method removeFilter\n     * Remove a filter from the record set.\n     * @param {function|index} filter\n     * This can be the function which was originally passed to\n     * the #addFilter method, or the zero-based #filters index\n     * @param {boolean} [suppressEvents=false]\n     * Prevent events from firing one the creation of the filter.\n     * @fires filter.delete\n     * Fired when a filter is removed.\n     */\n\n  }, {\n    key: 'removeFilter',\n    value: function removeFilter(fn, suppressEvents) {\n      suppressEvents = NGN.coalesce(suppressEvents, false);\n\n      var removed = [];\n\n      if (typeof fn === 'number') {\n        removed = this._filters.splice(fn, 1);\n      } else {\n        removed = this._filters.splice(this._filters.indexOf(fn), 1);\n      }\n\n      if (removed.length > 0 && !suppressEvents) {\n        this.emit('filter.delete', removed[0]);\n      }\n    }\n\n    /**\n     * @method clearFilters\n     * Remove all filters.\n     * @param {boolean} [suppressEvents=false]\n     * Prevent events from firing one the removal of each filter.\n     */\n\n  }, {\n    key: 'clearFilters',\n    value: function clearFilters(suppressEvents) {\n      suppressEvents = NGN.coalesce(suppressEvents, false);\n\n      if (suppressEvents) {\n        this._filters = [];\n        return;\n      }\n\n      var me = this;\n      while (this._filters.length > 0) {\n        me.emit('filter.delete', this._filters.pop());\n      }\n    }\n\n    /**\n     * @method deduplicate\n     * Deduplicates the recordset. This compares the checksum of\n     * each of the records to each other and removes duplicates.\n     * This suppresses the removal\n     * @param {boolean} [suppressEvents=true]\n     * Suppress the event that gets fired when a record is removed.\n     */\n\n  }, {\n    key: 'deduplicate',\n    value: function deduplicate(suppressEvents) {\n      suppressEvents = NGN.coalesce(suppressEvents, true);\n\n      var records = this.data.map(function (rec) {\n        return JSON.stringify(rec);\n      });\n\n      var dupes = [];\n      var me = this;\n\n      records.forEach(function (record, i) {\n        if (records.indexOf(record) < i) {\n          dupes.push(me.find(i));\n        }\n      });\n\n      dupes.forEach(function (duplicate) {\n        me.remove(duplicate);\n      });\n    }\n\n    /**\n     * @method sort\n     * Sort the #records. This forces a #reindex, which may potentially be\n     * an expensive operation on large data sets.\n     * @param {function|object} sorter\n     * Using a function is exactly the same as using the\n     * [Array.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FArray%2Fsort) method\n     * (this is the compare function). The arguments passed to the\n     * method are NGN.DATA.Model objects.\n     * Alternatively, it is possible to sort by one or more model\n     * attributes. Each attribute For example:\n     *\n     * ```js\n     * let Person = new NGN.DATA.Model({\n     *   fields: {\n     *     fname: null,\n     *     lname: null\n     *   }\n     * })\n     *\n     * let People = new NGN.DATA.Store({\n     *   model: Person\n     * })\n     *\n     * People.add({\n     *   fname: 'John',\n     *   lname: 'Doe',\n     *   age: 37\n     * }, {\n     *   fname: 'Jane',\n     *   lname: 'Doe',\n     *   age: 36\n     * }, {\n     *   fname: 'Jane',\n     *   lname: 'Vaughn',\n     *   age: 42\n     * })\n     *\n     * People.sort({\n     *   lname: 'asc',  // Sort by last name in normal alphabetical order.\n     *   age: 'desc'    // Sort by age, oldest to youngest.\n     * })\n     *\n     * People.records.forEach(function (p) {\n     *   console.log(fname, lname, age)\n     * })\n     *\n     * // DISPLAYS\n     * // John Doe 37\n     * // Jane Doe 36\n     * // Jane Vaughn 42\n     *\n     * People.sort({\n     *   age: 'desc',  // Sort by age, oldest to youngest.\n     *   lname: 'asc'  // Sort by name in normal alphabetical order.\n     * })\n     *\n     * People.records.forEach(function (p) {\n     *   console.log(fname, lname, age)\n     * })\n     *\n     * // DISPLAYS\n     * // Jane Vaughn 42\n     * // John Doe 37\n     * // Jane Doe 36\n     * ```\n     *\n     * It is also posible to provide complex sorters. For example:\n     *\n     * ```js\n     * People.sort({\n     *   lname: 'asc',\n     *   age: function (a, b) {\n     *     if (a.age < 40) {\n     *       return 1\n     *     }\n     *     return a.age < b.age\n     *   }\n     * })\n     * ```\n     *\n     * The sorter above says \"sort alphabetically by last name,\n     * then by age where anyone under 40yrs old shows up before\n     * everyone else, but sort the remainder ages in descending order.\n     */\n\n  }, {\n    key: 'sort',\n    value: function sort(fn) {\n      var _this12 = this;\n\n      if (typeof fn === 'function') {\n        this.records.sort(fn);\n      } else if ((typeof fn === 'undefined' ? 'undefined' : _typeof(fn)) === 'object') {\n        (function () {\n          var functionKeys = Object.keys(fn);\n\n          _this12.records.sort(function (a, b) {\n            for (var i = 0; i < functionKeys.length; i++) {\n              // Make sure both objects have the same sorting key\n              if (a.hasOwnProperty(functionKeys[i]) && !b.hasOwnProperty(functionKeys[i])) {\n                return 1;\n              }\n\n              if (!a.hasOwnProperty(functionKeys[i]) && b.hasOwnProperty(functionKeys[i])) {\n                return -1;\n              }\n\n              // For objects who have the key, sort in the order defined in object.\n              if (a[functionKeys[i]] !== b[functionKeys[i]]) {\n                switch (fn[functionKeys[i]].toString().trim().toLowerCase()) {\n                  case 'asc':\n                    return a[functionKeys[i]] > b[functionKeys[i]] ? 1 : -1;\n                  case 'desc':\n                    return a[functionKeys[i]] < b[functionKeys[i]] ? 1 : -1;\n                  default:\n                    if (typeof fn[functionKeys[i]] === 'function') {\n                      return fn[functionKeys[i]](a, b);\n                    }\n                    return 0;\n                }\n              }\n            }\n\n            // Everything is equal\n            return 0;\n          });\n        })();\n      }\n\n      this.reindex();\n    }\n\n    /**\n     * @method createIndex\n     * Add a simple index to the recordset.\n     * @param {string} datafield\n     * The #model data field to index.\n     * @param {boolean} [suppressEvents=false]\n     * Prevent events from firing on the creation of the index.\n     * @fires index.create\n     * Fired when an index is created. The datafield name and\n     * store are supplied as an argument to event handlers.\n     */\n\n  }, {\n    key: 'createIndex',\n    value: function createIndex(field, suppressEvents) {\n      if (!this.model.hasOwnProperty(field)) {\n        console.warn('The store\\'s model does not contain a data field called %c' + field + '%c.', NGN.css, '');\n      }\n\n      var exists = this._index.hasOwnProperty(field);\n\n      this._index[field] = this._index[field] || [];\n      if (!NGN.coalesce(suppressEvents, false) && !exists) {\n        this.emit('index.created', {\n          field: field,\n          store: this\n        });\n      }\n    }\n\n    /**\n     * @method deleteIndex\n     * Remove an index.\n     * @param {string} datafield\n     * The #model data field to stop indexing.\n     * @param {boolean} [suppressEvents=false]\n     * Prevent events from firing on the removal of the index.\n     * @fires index.delete\n     * Fired when an index is deleted. The datafield name and\n     * store are supplied as an argument to event handlers.\n     */\n\n  }, {\n    key: 'deleteIndex',\n    value: function deleteIndex(field, suppressEvents) {\n      if (this._index.hasOwnProperty(field)) {\n        delete this._index[field];\n        if (!NGN.coalesce(suppressEvents, false)) {\n          this.emit('index.created', {\n            field: field,\n            store: this\n          });\n        }\n      }\n    }\n\n    /**\n     * @method clearIndices\n     * Clear all indices from the indexes.\n     */\n\n  }, {\n    key: 'clearIndices',\n    value: function clearIndices() {\n      var me = this;\n\n      Object.keys(this._index).forEach(function (key) {\n        me._index[key] = [];\n      });\n    }\n\n    /**\n     * @method deleteIndexes\n     * Remove all indexes.\n     * @param {boolean} [suppressEvents=true]\n     * Prevent events from firing on the removal of each index.\n     */\n\n  }, {\n    key: 'deleteIndexes',\n    value: function deleteIndexes(suppressEvents) {\n      suppressEvents = NGN.coalesce(suppressEvents, true);\n\n      var me = this;\n\n      Object.keys(this._index).forEach(function (key) {\n        me.deleteIndex(key, suppressEvents);\n      });\n    }\n\n    /**\n     * @method applyIndices\n     * Apply the values to the index.\n     * @param {NGN.DATA.Model} record\n     * The record which should be applied to the index.\n     * @param {number} number\n     * The record index number.\n     * @private\n     */\n\n  }, {\n    key: 'applyIndices',\n    value: function applyIndices(record, number) {\n      var indexes = Object.keys(this._index);\n\n      if (indexes.length === 0) {\n        return;\n      }\n\n      var me = this;\n\n      indexes.forEach(function (field) {\n        if (record.hasOwnProperty(field)) {\n          var values = me._index[field];\n\n          // Check existing records for similar values\n          for (var i = 0; i < values.length; i++) {\n            if (values[i][0] === record[field]) {\n              me._index[field][i].push(number);\n              return;\n            }\n          }\n\n          // No matching words, create a new one.\n          me._index[field].push([record[field], number]);\n        }\n      });\n    }\n\n    /**\n     * @method unapplyIndices\n     * This removes a record from all relevant indexes simultaneously.\n     * Commonly used when removing a record from the store.\n     * @param  {number} indexNumber\n     * The record index.\n     * @private\n     */\n\n  }, {\n    key: 'unapplyIndices',\n    value: function unapplyIndices(num) {\n      var me = this;\n\n      Object.keys(this._index).forEach(function (field) {\n        var i = me._index[field].indexOf(num);\n        if (i >= 0) {\n          me._index[field].splice(i, 1);\n        }\n      });\n    }\n\n    /**\n     * @method updateIndice\n     * Update the index with new values.\n     * @param  {string} fieldname\n     * The name of the indexed field.\n     * @param  {any} oldValue\n     * The original value. This is used to remove the old value from the index.\n     * @param  {any} newValue\n     * The new value.\n     * @param  {number} indexNumber\n     * The number of the record index.\n     * @private\n     */\n\n  }, {\n    key: 'updateIndice',\n    value: function updateIndice(field, oldValue, newValue, num) {\n      if (!this._index.hasOwnProperty(field) || oldValue === newValue) {\n        return;\n      }\n\n      var ct = 0;\n      var me = this;\n\n      for (var i = 0; i < me._index[field].length; i++) {\n        var value = me._index[field][i][0];\n\n        if (value === oldValue) {\n          me._index[field][i].splice(me._index[field][i].indexOf(num), 1);\n          ct++;\n        } else if (newValue === undefined) {\n          // If thr new value is undefined, the field was removed for the record.\n          // This can be skipped.\n          ct++;\n        } else if (value === newValue) {\n          me._index[field][i].push(num);\n          me._index[field][i].shift();\n          me._index[field][i].sort();\n          me._index[field][i].unshift(value);\n          ct++;\n        }\n\n        if (ct === 2) {\n          return;\n        }\n      }\n    }\n\n    /**\n     * @method getIndices\n     * Retrieve a list of index numbers pertaining to a field value.\n     * @param  {string} field\n     * Name of the data field.\n     * @param  {any} value\n     * The value of the index to match against.\n     * @return {array}\n     * Returns an array of integers representing the index where the\n     * values exist in the record set.\n     */\n\n  }, {\n    key: 'getIndices',\n    value: function getIndices(field, value) {\n      if (!this._index.hasOwnProperty(field)) {\n        return null;\n      }\n\n      var indexes = this._index[field].filter(function (dataArray) {\n        return dataArray.length > 0 && dataArray[0] === value;\n      });\n\n      if (indexes.length === 1) {\n        indexes[0].shift();\n        return indexes[0];\n      }\n\n      return [];\n    }\n\n    /**\n     * @method reindex\n     * Reindex the entire record set. This can be expensive operation.\n     * Use with caution.\n     * @private\n     */\n\n  }, {\n    key: 'reindex',\n    value: function reindex() {\n      this.clearIndices();\n      var me = this;\n      this._data.forEach(function (record, index) {\n        me.applyIndices(record, index);\n      });\n    }\n  }, {\n    key: 'data',\n    get: function get() {\n      return this._data.map(function (d) {\n        return d.data;\n      });\n    }\n\n    /**\n     * @property {array} records\n     * An array of NGN.DATA.Model records. If the store has\n     * filters applied, the records will reflect the filtration.\n     * @readonly\n     */\n\n  }, {\n    key: 'records',\n    get: function get() {\n      return this.applyFilters(this._data);\n    }\n\n    /**\n     * @property recordCount\n     * The total number of #records in the collection.\n     * @readonly\n     */\n\n  }, {\n    key: 'recordCount',\n    get: function get() {\n      return this.applyFilters(this._data).length;\n    }\n\n    /**\n     * @property {array} filtered\n     * An array of NGN.DATA.Model records that have been filtered out.\n     * The results reflect the inverse of #records.\n     */\n\n  }, {\n    key: 'filtered',\n    get: function get() {\n      var records = this.records;\n      return this._data.filter(function (record) {\n        return records.filter(function (rec) {\n          return rec.checksum === record.checksum;\n        }).length === 0;\n      });\n    }\n\n    /**\n     * @property {NGN.DATA.Model} first\n     * Return the first record in the store. Returns `null`\n     * if the store is empty.\n     */\n\n  }, {\n    key: 'first',\n    get: function get() {\n      if (this.records.length === 0) {\n        return null;\n      }\n      return this.records[0];\n    }\n\n    /**\n     * @property {NGN.DATA.Model} last\n     * Return the last record in the store. Returns `null`\n     * if the store is empty.\n     */\n\n  }, {\n    key: 'last',\n    get: function get() {\n      if (this.records.length === 0) {\n        return null;\n      }\n      return this.records[this.records.length - 1];\n    }\n  }]);\n\n  return Store;\n}(NGN.EventEmitter);\n\n/**\n * indexes\n * An index consists of an object whose key is name of the\n * data field being indexed. The value is an array of record values\n * and their corresponding index numbers. For example:\n *\n * ```js\n * {\n *   \"lastname\": [[\"Butler\", 0, 1, 3], [\"Doe\", 2, 4]]\n * }\n * ```\n * The above example indicates the store has two unique `lastname`\n * values, \"Butler\" and \"Doe\". Records containing a `lastname` of\n * \"Butler\" exist in the record store as the first, 2nd, and 4th\n * records. Records with the last name \"Doe\" are 3rd and 5th.\n * Remember indexes are zero based since records are stored as an\n * array.\n */\n\nNGN.DATA.Store = Store;\n\n'use strict';\n\n/**\n * @class NGN.DATA.Proxy\n * Provides a gateway to remote services such as HTTP and\n * websocket endpoints. This can be used directly to create\n * custom proxies. However; NGN.DATA.HttpProxy and NGN.DATA.WebSocketProxy\n * are also available for use.\n */\n\nvar Proxy = function (_NGN$EventEmitter3) {\n  _inherits(Proxy, _NGN$EventEmitter3);\n\n  function Proxy(config) {\n    _classCallCheck(this, Proxy);\n\n    config = config || {};\n\n    if (!config.store) {\n      throw new Error('NGN.DATA.Proxy requires a NGN.DATA.Store.');\n    }\n\n    var _this13 = _possibleConstructorReturn(this, Object.getPrototypeOf(Proxy).call(this));\n\n    config.store.proxy = _this13;\n\n    Object.defineProperties(_this13, {\n      /**\n       * @configproperty {NGN.DATA.Store} store (required)\n       * THe store for data being proxied.\n       */\n      store: NGN.const(config.store),\n\n      /**\n       * @configproperty {string} [url=http://localhost\n       * The root URL for making network requests (HTTP/WS/TLS).\n       */\n      url: NGN.public(config.url || 'http://localhost'),\n\n      /**\n       * @config {string} username\n       * If using basic authentication, provide this as the username.\n       */\n      username: NGN.public(config.username || null),\n\n      /**\n       * @config {string} password\n       * If using basic authentication, provide this as the password.\n       */\n      password: NGN.public(config.password || null),\n\n      /**\n       * @config {string} token\n       * If using an access token, provide this as the value. This\n       * will override basic authentication (#username and #password\n       * are ignored). This sets an `Authorization: Bearer <token>`\n       * HTTP header.\n       */\n      token: NGN.public(config.token || null)\n    });\n    return _this13;\n  }\n\n  /**\n   * @property actions\n   * A list of the record changes that have occurred.\n   * @returns {object}\n   * An object is returned with 3 keys representative of the\n   * action taken:\n   *\n   * ```js\n   * {\n   *   create: [NGN.DATA.Model, NGN.DATA.Model],\n   *   update: [NGN.DATA.Model],\n   *   delete: []\n   * }\n   * ```\n   *\n   * The object above indicates two records have been created\n   * while one record was modified and no records were deleted.\n   * **NOTICE:** If you add or load a JSON object to the store\n   * (as opposed to adding an instance of NGN.DATA.Model), the\n   * raw object will be returned. It is also impossible for the\n   * data store/proxy to determine if these have changed since\n   * the NGN.DATA.Model is responsible for tracking changes to\n   * data objects.\n   * @private\n   */\n\n\n  _createClass(Proxy, [{\n    key: 'save',\n    value: function save() {\n      console.warn('Save should be overridden by a proxy implementation class.');\n    }\n  }, {\n    key: 'fetch',\n    value: function fetch() {\n      console.warn('Fetch should be overridden by a proxy implementation class.');\n    }\n  }, {\n    key: 'actions',\n    get: function get() {\n      var me = this;\n      return {\n        create: this.store._created,\n        update: this.store.records.filter(function (record) {\n          if (me.store._created.indexOf(record) < 0 && me.store._deleted.indexOf(record) < 0) {\n            return false;\n          }\n          return record.modified;\n        }).map(function (record) {\n          return record;\n        }),\n        delete: this.store._deleted\n      };\n    }\n  }]);\n\n  return Proxy;\n}(NGN.EventEmitter);\n\nObject.defineProperty(NGN.DATA, 'Proxy', NGN.const(Proxy));","'use strict'\n\n/**\n * @class NGN.EventEmitter\n * @inheritdoc\n */\nNGN.inherit(Object.defineProperties({}, {\n  queued: NGN.private({}),\n\n  /**\n   * @method pool\n   * A helper command to create multiple related subscribers\n   * all at once. This is a convenience function.\n   * @property {string} [prefix]\n   * Supply a prefix to be added to every event. For example,\n   * `myScope.` would turn `someEvent` into `myScope.someEvent`.\n   * @property {Object} subscriberObject\n   * A key:value object where the key is the name of the\n   * unprefixed event and the key is the handler function.\n   * @property {Function} [callback]\n   * A callback to run after the entire pool is registered. Receives\n   * a single {Object} argument containing all of the subscribers for\n   * each event registered within the pool.\n   */\n  pool: NGN.const(function (prefix, group, callback) {\n    if (typeof prefix !== 'string') {\n      group = prefix\n      prefix = ''\n    }\n\n    let pool = {}\n\n    for (let eventName in group) {\n      let topic = (prefix.trim() || '') + eventName\n      if (typeof group[eventName] === 'function') {\n        pool[eventName] = this.on(topic, group[eventName])\n      } else {\n        console.warn('%c' + topic + '%c could not be pooled in the event emitter because it\\'s value is not a function.', NGN.css, '')\n      }\n    }\n    if (callback) {\n      callback(pool)\n    }\n  }),\n\n  /**\n   * @method attach\n   * Attach a function to a topic. This can be used\n   * to forward events in response to asynchronous functions.\n   *\n   * For example:\n   *\n   * ```js\n   * myAsyncDataFetch(NGN.BUS.attach('topicName'))\n   * ```\n   *\n   * This is the same as:\n   *\n   * ```js\n   * myAsyncCall(function(data){\n   *  NGN.BUS.emit('topicName', data)\n   * })\n   * ```\n   * @param {string} eventName\n   * The name of the event to attach a handler method to.\n   * @param {boolean} [preventDefaultAction=false]\n   * Setting this to `true` will execute a `event.preventDefault()` before\n   * attaching the handler.\n   * @returns {function}\n   * Returns a function that will automatically be associated with an event.\n   */\n  attach: NGN.const(function (eventName, preventDefaultAction) {\n    const me = this\n    preventDefaultAction = NGN.coalesce(preventDefaultAction, false)\n\n    return function (e) {\n      if (preventDefaultAction && e.hasOwnProperty('preventDefault')) {\n        e.preventDefault()\n      }\n      let args = NGN.slice(arguments)//NGN.slice(arguments)\n      args.unshift(eventName)\n      me.emit.apply(me, args)\n    }\n  }),\n\n  /**\n   * @method bind\n   * A special subscriber that fires one or more event in response to\n   * to an event. This is used to bubble events up/down an event chain.\n   *\n   * For example:\n   *\n   * ```js\n   * BUS.bind('sourceEvent', ['someEvent','anotherEvent'], {payload:true})\n   * ```\n   * When `sourceEvent` is published, the bind method triggers `someEvent` and\n   * `anotherEvent`, passing the payload object to `someEvent` and\n   * `anotherEvent` subscribers simultaneously.\n   *\n   * @param {String} sourceEvent\n   * The event to subscribe to.\n   * @param {String|Array} triggeredEvent\n   * An event or array of events to fire in response to the sourceEvent.\n   * @param {any} data\n   * Optional data to pass to each bound event handler.\n   * @returns {Object}\n   * Returns an object with a single `remove()` method.\n   */\n  bind: NGN.const(function (eventName, triggers, payload) {\n    triggers = typeof triggers === 'string' ? [triggers] : triggers\n\n    const me = this\n    let listener = function () {\n      let args = NGN.slice(arguments)\n\n      if (payload) {\n        args.push(payload)\n      }\n\n      for (let trigger in triggers) {\n        let argList = args.slice()\n        argList.unshift(triggers[trigger])\n        me.emit.apply(me, argList)\n      }\n    }\n\n    this.on(eventName, listener)\n\n    // Provide handle back for removal of topic\n    return {\n      remove: function () {\n        me.off(eventName, listener)\n      }\n    }\n  }),\n\n  /**\n   * @method queue\n   * This method waits for the specified duration, then publishes an\n   * event once. This will publish the event only once at the end of the\n   * wait period, even if the event is triggered multiple times. This can\n   * be useful when working with many events triggered in rapid succession.\n   *\n   * For example, an NGN.DATA.Model representing a person may be used to\n   * track a user profile. The NGN.DATA.Model fires an event called `field.update`\n   * every time a data field is modified. In many cases, a user may update\n   * multiple fields of their profile using a form with a \"Save\" button.\n   * Instead of generating a new \"save\" (to disk, to memory, to an API, etc)\n   * operation for each field, the publishOnce event can wait until all\n   * changes are made before running the save operation.\n   *\n   * ```js\n   * // Create a data model representing a person.\n   * var Person = new NGN.DATA.Model({....})\n   *\n   * // Create a new person record for a user.\n   * var user = new Person()\n   *\n   * // When the user is modified, save the data.\n   * user.on('field.update', function () {\n   * \t // Wait 300 milliseconds to trigger the save event\n   *   NGN.BUS.queue('user.save', 300)\n   * })\n   *\n   * // Save the user using an API\n   * NGN.BUS.on('user.save', function () {\n   * \t NGN.HTTP.put({\n   * \t   url: 'https://my.api.com/user',\n   * \t   json: user.data\n   * \t })\n   * })\n   *\n   * // Modify the record attributes (which are blank by default)\n   * user.firstname = 'John'\n   * user.lastname = 'Doe'\n   * user.age = 42\n   *\n   * // Make another update 1 second later\n   * setTimeout(function () {\n   *   user.age = 32\n   * }, 1000)\n   * ```\n   *\n   * The code above sets up a model and record. Then it listens to the record\n   * for field updates. Each time it recognizes an update, it queues the \"save\"\n   * event. When the queue matures, it fires the `user.save` event.\n   *\n   * The first `field.update` is triggered when `user.firstname = 'John'` runs.\n   * This initiates a queue for `user.save`, set to mature in 300 millisenconds.\n   * Next, a `field.update` is triggered when `user.lastname = 'Doe'` runs.\n   * This time, since the queue for `user.save` is already initiated, notthing\n   * new happens. Finally, a `field.update` is triggered when `user.age = 42`\n   * runs. Just like the last one, nothing happens since the `user.save` queue\n   * is already active.\n   *\n   * The `user.save` queue \"matures\" after 300 milliseconds. This means after\n   * 300 milliseconds have elapsed, the `user.save` event is triggered. In this\n   * example, it means the `NGN.HTTP.put()` code will be executed. As a result,\n   * all 3 change (firstname, lastname, and age) will be complete before the\n   * API request is executed. The queue is cleared immediately.\n   *\n   * The final update occurs 1 second later (700 milliseconds after the queue\n   * matures). This triggers a `field.update`, but since the queue is no\n   * longer active, it is re-initiated. 300 milliseconds later, the `user.save`\n   * event is fired again, thus executing the API request again (1.3 seconds\n   * in total).\n   * @param {string} eventName\n   * The event/topic to publish/emit.\n   * @param {Number} [delay=300]\n   * The number of milliseconds to wait before firing the event.\n   * @param {Any} [payload]\n   * An optional payload, such as data to be passed to an event handler.\n   */\n  queue: NGN.const(function (eventName, delay) {\n    if (!this.queued.hasOwnProperty(eventName)) {\n      const me = this\n      let args = NGN.slice(arguments)\n      args.splice(1, 1)\n\n      this.queued[eventName] = setTimeout(function () {\n        delete me.queued[eventName]\n        me.emit.apply(me, args)\n      }, delay)\n    }\n  })\n}), NGN.EventEmitter)\n","// Polyfill for IE11 & Safari\n// This is required to make the remove method work properly.\nif (!Array.prototype.findIndex) {\n  Array.prototype.findIndex = function (predicate) { // eslint-disable-line no-extend-native\n    if (this === null) {\n      throw new Error('Array.prototype.findIndex called on null or undefined')\n    }\n    // if (typeof predicate !== 'function') {\n    //   throw new Error('Predicate must be a function (received ' + (typeof predicate) + ')')\n    // }\n    var list = Object(this)\n    var length = list.length >>> 0\n    var thisArg = arguments[1]\n    var value\n\n    for (var i = 0; i < length; i++) {\n      value = list[i]\n      if (predicate.call(thisArg, value, i, list)) {\n        return i\n      }\n    }\n    return -1\n  }\n}\n","'use strict'\n\n/**\n * @class NGN\n * @singleton\n */\n/**\n  * @method define\n  * Create an object definition for a property.\n  * For example:\n  *\n  * ```\n  * Object.defineProperty('attr', NGN.define(true, false, true, 'value'))\n  *\n  * // The snippet above is the same as:\n  * Object.defineProperty(this, 'attr', {\n  *  enumberable: true,\n  *  writable: false,\n  *  configurable: true,\n  *  value: 'value'\n  * })\n  * ```\n  * @param  {boolean} enumerable\n  * Determines if the attribute is considered an accessible part of the object.\n  * Making an attribute enumerable will make it show up as a key in an object,\n  * which can be iterated over (ex: `Object.keys()`). A non-enumerable asset is\n  * treated as a private attribute.\n  * @param  {boolean} writable\n  * Determines whether the value can be changed.\n  * @param  {boolean} configurable\n  * Determines whether the attribute can be removed from the object.\n  * @param  {any} value\n  * The actual value of the attribute.\n  * @private\n  */\nObject.defineProperty(NGN, 'define', {\n  enumerable: false,\n  writable: false,\n  configurable: false,\n  value: function (e, w, c, v) {\n    return {\n      enumerable: e,\n      writable: w,\n      configurable: c,\n      value: v\n    }\n  }\n})\n\nObject.defineProperties(NGN, {\n  /**\n   * @method public\n   * Create a `public` property definition for an object.\n   * Example:\n   *\n   * ```\n   * Object.defineProperty(this, 'attr', NGN.public('somevalue'))\n   *\n   * // Longhand equivalent\n   * Object.defineProperty(this, 'attr', {\n   *  enumerable: true,\n   *  writable: true,\n   *  configurable: false,\n   *  value: 'somevalue'\n   * })\n   * ```\n   * @param  {any} value\n   * Any valid JavaScript value (function, boolean, number, string, etc)\n   * used as the value for the object attribute.\n   * @private\n   */\n  public: NGN.define(false, false, false, function (value) {\n    return NGN.define(true, typeof value !== 'function', false, value)\n  }),\n\n  /**\n   * @method private\n   * Create a `private` property definition for an object.\n   * Example:\n   *\n   * ```\n   * Object.defineProperty(this, 'attr', NGN.private('somevalue'))\n   *\n   * // Longhand equivalent\n   * Object.defineProperty(this, 'attr', {\n   *  enumerable: false,\n   *  writable: true,\n   *  configurable: false,\n   *  value: 'somevalue'\n   * })\n   * ```\n   * @param  {any} value\n   * Any valid JavaScript value (function, boolean, number, string, etc)\n   * used as the value for the object attribute.\n   * @private\n   */\n  private: NGN.define(false, false, false, function (value) {\n    return NGN.define(false, typeof value !== 'function', false, value)\n  }),\n\n  /**\n   * @method const\n   * Create a `public` constant property definition for an object.\n   * Example:\n   *\n   * ```\n   * Object.defineProperty(this, 'attr', NGN.const('somevalue'))\n   *\n   * // Longhand equivalent\n   * Object.defineProperty(this, 'attr', {\n   *  enumerable: true,\n   *  writable: false,\n   *  configurable: false,\n   *  value: 'somevalue'\n   * })\n   * ```\n   * @param  {any} value\n   * Any valid JavaScript value (function, boolean, number, string, etc)\n   * used as the value for the object attribute.\n   * @private\n   */\n  const: NGN.define(false, false, false, function (value) {\n    return NGN.define(true, false, false, value)\n  }),\n\n  /**\n   * @method privateconst\n   * Create a `private` constant property definition for an object.\n   * Example:\n   *\n   * ```\n   * Object.defineProperty(this, 'attr', NGN.privateconst('somevalue'))\n   *\n   * // Longhand equivalent\n   * Object.defineProperty(this, 'attr', {\n   *  enumerable: false,\n   *  writable: false,\n   *  configurable: false,\n   *  value: 'somevalue'\n   * })\n   * ```\n   * @param  {any} value\n   * Any valid JavaScript value (function, boolean, number, string, etc)\n   * used as the value for the object attribute.\n   * @private\n   */\n  privateconst: NGN.define(false, false, false, function (value) {\n    return NGN.define(false, false, false, value)\n  }),\n\n  /**\n   * @method get\n   * Create a private `getter` property definition for an object.\n   * Public getters are part of the ES2015 class spec.\n   *\n   * Example:\n   *\n   * ```\n   * let myFunction = function () {\n   *  return 'somevalue'\n   * }\n   *\n   * // Longhand equivalent\n   * Object.defineProperty(this, 'attr', {\n   *  enumerable: false,\n   *  get: function () {\n   *    return 'somevalue'\n   *  }\n   * })\n   * ```\n   * @param  {function} fn\n   * Any valid async JavaScript function with a `return` value.\n   * @private\n   */\n  get: NGN.define(false, false, false, function (fn) {\n    return {\n      enumerable: false,\n      get: fn\n    }\n  }),\n\n  /**\n   * @method get\n   * Create a private `setter` property definition for an object.\n   * Public setters are part of the ES2015 class spec.\n   *\n   * Example:\n   *\n   * ```\n   * let myFunction = function () {\n   *  return 'somevalue'\n   * }\n   *\n   * // Longhand equivalent\n   * Object.defineProperty(this, 'attr', {\n   *  enumerable: false,\n   *  set: function (value) {\n   *    somethingElse = value\n   *  }\n   * })\n   * ```\n   * @param  {function} fn\n   * Any valid async JavaScript function with a `return` value.\n   * @private\n   */\n  set: NGN.define(false, false, false, function (fn) {\n    return {\n      enumerable: false,\n      set: fn\n    }\n  })\n})\n\nObject.defineProperties(NGN, {\n  /**\n   * @method extend\n   * Extend the NGN core object. Extending NGN is the equivalent of:\n   *\n   * Example:\n   * ```\n   * NGN.extend('greet', NGN.public(function (recipient) {\n   *  return 'Hello, ' + recipient + '!'\n   * }))\n   *\n   * // Equivalent of:\n   *\n   * Object.defineProperty(NGN, 'greet', {\n   *  enumerable: true,\n   *  writable: false,\n   *  configurable: false,\n   *  value: function (recipient) {\n   *    return 'Hello, ' + recipient + '!'\n   *  }\n   * })\n   * ```\n   * The example above produces a public function available from NGN:\n   *\n   * ```\n   * console.log(NGN.greet('world')) // outputs Hello, world!\n   * @param  {string} attribute\n   * Name of the attribute to add to the object.\n   * @param  {Object} specification\n   * The object specification, i.e.\n   * ```\n   * {\n   *  enumerable: true/false,\n   *  writable: true/false,\n   *  configurable: true/false,\n   *  value: {any}\n   * }\n   *\n   * // OR\n   *\n   * {\n   *  enumerable: true/false,\n   *  get: function () { return ... },\n   *  set: function (value) { some = value ... }\n   * }\n   * ```\n   * @private\n   */\n  extend: NGN.privateconst(function (attribute, specification) {\n    Object.defineProperty(this, attribute, specification)\n  }),\n\n  /**\n   * @method inherit\n   * Inherit the properties of another object/class.\n   * @param  {object|function} source\n   * The source object (i.e. what gets copied)\n   * @param  {object|function} destination\n   * The object properties get copied to.\n   */\n  inherit: NGN.const(function (source, dest) {\n    if (!source || !dest) {\n      return\n    }\n    source = typeof source === 'function' ? source.prototype : source\n    dest = typeof dest === 'function' ? dest.prototype : dest\n    Object.getOwnPropertyNames(source).forEach(function (attr) {\n      const definition = Object.getOwnPropertyDescriptor(source, attr)\n      Object.defineProperty(dest, attr, definition)\n    })\n  }),\n\n  /**\n   * @method slice\n   * Converts an array-like object to an array.\n   *\n   * Example:\n   * ```\n   * function () {\n   *  return NGN.slice(arguments)\n   * }\n   * @param  {Object} obj\n   * The object to slice into an array.\n   * @return {array}\n   * @private\n   */\n  slice: NGN.private(function (obj) {\n    return Array.prototype.slice.call(obj)\n  }),\n\n  /**\n   * @method splice\n   * Converts an array-like object to a spliced array.\n   *\n   * Example:\n   * ```\n   * function () {\n   *  return NGN.splice(arguments)\n   * }\n   * @param  {Object} obj\n   * The object to splice into an array.\n   * @return {array}\n   * @private\n   */\n  splice: NGN.private(function (obj) {\n    return Array.prototype.splice.call(obj)\n  }),\n\n  /**\n   * @method coalesce\n   * Finds the first non-null/defined value in a list of arguments.\n   * This can be used with {@link Boolean Boolean} values, since `true`/`false` is a\n   * non-null/defined value.\n   * @param {Mixed} args\n   * Any number of arguments can be passed to this method.\n   */\n  coalesce: NGN.public(function () {\n    for (let arg in arguments) {\n      if (arguments[arg] !== undefined && arguments[arg] !== null) {\n        return arguments[arg]\n      }\n    }\n    return null\n  }),\n\n  /**\n   * @property {boolean} nodelike\n   * Indicates NGN is running in a node-like environment supporting\n   * the `require` statement. This will detect node, io.js, Electron,\n   * NW.js, and other environments presumably supporting Node.js.\n   * @private\n   */\n  nodelike: NGN.get(function () {\n    let node = false\n    try {\n      node = require !== undefined\n    } catch (e) {}\n    return node\n  }),\n\n  /**\n   * @method dedupe\n   * Deduplicate a simple array.\n   * @param {array} array\n   * The array to deduplicate.\n   * @return {array}\n   * The array with unique records.\n   * @private\n   */\n  dedupe: NGN.private(function (array) {\n    return array.filter(function (element, index) {\n      return array.indexOf(element) === index\n    })\n  }),\n\n  /**\n   * @method typeof\n   * A more specific typeof method.\n   * @param  {any} element\n   * The element to determine the type of.\n   * @return {string}\n   * Returns the type (all lower case).\n   */\n  typeof: NGN.define(false, false, false, function (el) {\n    let value = Object.prototype.toString.call(el).split(' ')[1].replace(/\\]|\\[/gi, '').toLowerCase()\n    if (value === 'function') {\n      value = el.name || 'function'\n    }\n    return value.toLowerCase()\n  }),\n\n  /**\n   * @method stack\n   * Retrieve the stack trace from a specific code location without throwing\n   * an exception.\n   * @private\n   * @returns {array}\n   * Returns an array of objects. Each object contains the file, line, column,\n   * and path within the stack. For example:\n   *\n   * ```\n   * {\n   * \t path: 'path/to/file.js:127:14'\n   *   file: 'path/to/file.js',\n   *   line: 127,\n   *   column: 14\n   * }\n   * ```\n   */\n  stack: NGN.get(function () {\n    const me = this\n\n    let stack = (new Error).stack.split('\\n') || []\n\n    stack = stack.filter(function (item) {\n      return item.split(':').length > 1\n    }).map(function (item) {\n      item = item\n        .replace(/^.*\\s\\(/i, '')\n        .replace(/\\)/gi, '')\n        .replace(/^.*\\@/i, '')\n        .replace((me.nodelike ? process.cwd() : window.location.origin), '')\n        .replace(/^.*\\:\\/\\//, '')\n        .replace(/\\s{1,100}at\\s{1,100}/gi, '')\n        .replace(/anonymous\\>/, 'console')\n        .trim().split(':')\n\n      if (NGN.nodelike) {\n        item.replace(__dirname, '')\n      }\n\n      return {\n        path: item[0].substr(1, item[0].length - 1) + ':' + item[1] + ':' + item[2],\n        file: item[0].substr(1, item[0].length - 1),\n        line: parseInt(item[1], 10),\n        column: parseInt(item[2], 10)\n      }\n    })\n\n    return stack\n  }),\n\n  /**\n   * @property css\n   * A CSS string used for highlighting console output in Chrome and Firefox.\n   *\n   * **Example:**\n   *\n   * ```js\n   * console.log('%cHighlight %c some text and leave the rest normal.', NGN.css, '')\n   * ```\n   * @private\n   */\n  css: NGN.privateconst('font-family: bold;')\n})\n","'use strict'\n\nObject.defineProperty(NGN, 'global', NGN.privateconst(NGN.nodelike ? global : window))\n\n// Force scope\ndocument.addEventListener('DOMContentLoaded', function () {\n  document.body.classList.add('ngn')\n})\n","'use strict'\n\n/**\n * @class NGN\n * @inheritdoc\n */\n /**\n  * @method createException\n  * Create a custom global exception.\n  * For more information, see the [Custom Exceptions Guide](#!/guide/customerrors).\n  * @param {Object} config\n  * The configuration of the new error.\n  * @param {String} [config.name=NgnError]\n  * The pretty name of the exception. Alphanumeric characters only (underscore is acceptable).\n  * @param {String} [config.type=TypeError]\n  * The type of error. This is commonly `TypeError` or `ReferenceError`, but\n  * it can be any custom value.\n  * @param {String} [config.severity=minor]\n  * A descriptive \"level\" indicating how critical the error is.\n  * @param {String} [config.message=Unknown Error]\n  * The default message to output when none is specified.\n  * @param {Object} [config.custom]\n  * Provide a key/value object of custom attributes for the error.\n  * There are two \"special\" custom attributes: `help` and `cause`.\n  * When provided, these will be written to stdout whenever the error's\n  * stack is viewed.\n  *\n  * For example:\n  *\n  * ```js\n  * require('ngn')\n  *\n  * NGN.createException({\n  *   name: 'Test Problem',\n  *   message: 'An example error.',\n  *   custom: {\n  *     help: 'Remove the throw statement.',\n  *     cause: 'Testing the error output.'\n  *   }\n  * });\n  *\n  * throw TestProblem()\n  * ```\n  * The code above generates the following console output:\n  *\n  * ```sh\n  * Testing the error output.\n  * Remove the throw statement.\n  * /path/to/test.js:12\n  *    throw TestProblem();\n  *    ^\n  *\n  * TestProblem: An example error.\n  *    at null._onTimeout (/path/to/test.js:12:11)\n  *    at Timer.listOnTimeout (timers.js:92:15)\n  * ```\n  */\nNGN.extend('createException', NGN.public(function (config) {\n  config = config || {}\n  config = typeof config === 'string' ? { message: config } : config\n  config.name = config.name || 'NgnError'\n  config.name = config.name.replace(/[^a-zA-Z0-9_]/gi, '')\n\n  // Create the error as a function\n  NGN.global[config.name] = function () {\n    if (arguments.length > 0) {\n      config.message = arguments[0]\n    }\n    return new CustomException(config)\n  }\n}))\n","/**\n * @class DOM\n * A utility class to simplify smoe DOM management tasks.\n */\nNGN.DOM = {}\n\nObject.defineProperties(NGN.DOM, {\n  /**\n   * @method ready\n   * Executes code after the DOM is loaded.\n   * @param {function} callback\n   * The function to call when the DOM is fully loaded.\n   */\n  ready: NGN.const(function (callback) {\n    document.addEventListener('DOMContentLoaded', callback)\n  }),\n\n  /**\n   * @method destroy\n   * Remove a DOM element.\n   * @param {HTMLElement|NodeList|String|Array} node\n   * Accepts a single `HTMLElement`, a `NodeList`, a CSS selector, or\n   * an array or `HTMLElements`/`NodeList`/CSS Selectors.\n   */\n  destroy: NGN.const(function (element) {\n    // Process a CSS selector\n    if (typeof element === 'string') {\n      let str = element\n      element = document.querySelectorAll(element)\n\n      if (element.length === 0) {\n        console.warn('The \\\"' + str + '\\\" selector did not return any elements.')\n        return\n      }\n      // Iterate through results and remove each element.\n      NGN.slice(element).forEach(this.destroy)\n    } else {\n      switch (NGN.typeof(element)) {\n        case 'array':\n          element.forEach(this.destroy)\n          return\n        case 'nodelist':\n          NGN.slice(element).forEach(this.destroy)\n          return\n        case 'htmlelement':\n          element.parentNode.removeChild(element)\n          return\n        default:\n          if (/^html.*element$/.test(NGN.typeof(element))) {\n            element.parentNode.removeChild(element)\n            return\n          }\n          console.warn('An unknown error occurred while trying to remove DOM elements.')\n          console.log('Unknown Element', element)\n      }\n    }\n  }),\n\n  /**\n   * @method findParent\n   * Find a distant parent of a DOM element. This can be thought\n   * of as a reverse CSS selector that traverse UP the DOM chain\n   * to find the parent element.\n   *\n   * For example:\n   *\n   * Assume the following HTML structure & JS code:\n   *\n   * ```html\n   * <section>\n   *   <header class=\"MyGroup\">\n   *     <div>\n   *       <div>\n   *         <button>Delete Entire Group</button>\n   *       </div>\n   *     </div>\n   *   </header>\n   * </section>\n   * ```\n   *\n   * ```js\n   * ref.find('button.remove').addEventListener('click', function (event) {\n   *   event.preventDefault()\n   *   let removeButton = event.currentTarget\n   *   let group = ref.findParent(removeButton,'header')\n   *   ref.destroy(group)\n   * })\n   * ```\n   *\n   * The code above listens for a click on the button. When the button\n   * is clicked, the `findPerent` method recognizes the \"Delete Entire Group\"\n   * button and traverses UP the DOM chain until it finds a `header` DOM\n   * element. The `header` DOM element is returned (as `group` letiable). The\n   * group is then removed using the `ref.destroy` method.\n   *\n   * Alternatively, the same effect could have been achieved if line 4\n   * of the JS code was:\n   * ```js\n   * let group = ref.findParent(removeButton, '.MyGroup')\n   * ```\n   * @param {HTMLElement|String} element\n   * The DOM element or a CSS selector string identifying the\n   * element whose parent should be found.\n   * @param {String} selector\n   * A minimal CSS selector used to identify the parent.\n   * @param {Number} maxDepth\n   * The maximum number of elements to traverse. This can be used to\n   * cap a selector and force it to fail before reaching a known limit.\n   * By default, there is no limit (i.e. maxDepth=null).\n   * @returns {HTMLElement}\n   * Responds with the DOM Element, or `null` if none was found.\n   */\n  findParent: NGN.const(function (node, selector, maxDepth) {\n    if (typeof node === 'string') {\n      node = document.querySelectorAll(node)\n      if (node.length === 0) {\n        console.warn('\\\"' + node + '\\\" is an invalid CSS selector (Does not identify any DOM elements).')\n        return null\n      }\n      node = node[0]\n    }\n\n    let currentNode = node.parentNode\n    let i = 0\n    maxDepth = typeof maxDepth === 'number' ? maxDepth : -1\n\n    while (currentNode.parentNode.querySelector(selector) === null && currentNode.nodeName !== 'BODY') {\n      i++\n      if (maxDepth > 0 && i > maxDepth) {\n        return null\n      }\n      currentNode = currentNode.parentNode\n    }\n\n    return currentNode\n  }),\n\n  /**\n   * @method indexOfParent\n   * Returns the zero-based index of the DOM element related\n   * to it's parent element.\n   * For example:\n   *\n   * `html\n   * <div>\n   *   <p>...</p>\n   *   <p>...</p>\n   *   <button id=\"btn\"></button>\n   *   <p>...</p>\n   * </div>\n   * ```\n   *\n   * ```js\n   * let i = NGN.DOM.indexOfParent(document.getElementById('btn'))\n   * console.log(i) // 2\n   * ```\n   * @param {HTMLElement} el\n   * The reference element.\n   * @returns {number}\n   */\n  indexOfParent: NGN.const(function (element) {\n    return NGN.slice(element.parentNode.children).indexOf(element)\n  })\n})\n","/**\n * @class BUS\n * The bus acts as a pub/sub messaging system (as opposed to a queue). It is primarily\n * designed for asynchronous communication between javascript objects, but can also be\n * bound to DOM events.\n *\n * The most common use looks like:\n * ```js\n *   var subscriber = NGN.BUS.subscribe('test', function () {\n *     console.log('test handled')\n *   })\n *\n *   NGN.BUS.subscribeOnce('test', function () {\n *     console.log('RESPOND ONCE!')\n *   })\n *\n *   NGN.BUS.publish('test') // Outputs \"test handled\" and \"RESPOND ONCE\".\n *\n *   NGN.BUS.publish('test') // Outputs \"test handled\" only.\n *\n *   subscriber.unsubscribe() // Removes the listener\n *\n *   NGN.BUS.publish('test') // Outputs nothing since the subscription was removed.\n * ```\n * There are a few aliases for ease of use, including `on() --> subscribe()`,\n * `once() --> subscribeOnce()`, and `emit() --> publish()`.\n *\n * It is also possible to use a wildcard in a subscription.\n *\n * ```js\n *   var subscriber = NGN.BUS.subscribe('test.*', function () {\n *     console.log('test handled')\n *   })\n *   var subscriber = NGN.BUS.subscribe('test.create', function () {\n *     console.log('test create handled')\n *   })\n *\n *   NGN.BUS.publish('test.create') // Outputs \"test handled\" and \"test create handled\"\n *\n *   NGN.BUS.publish('test.delete') // Outputs \"test handled\"\n * ```\n * @singleton\n */\nNGN.extend('BUS', NGN.const(new NGN.EventEmitter()))\n","/**\n * @class NGN.ref\n * A global \"pointer\" to DOM elements. This is used to reference and manipulate\n * DOM elements in a simple and standard way, without restricting native functionality.\n */\n'use strict'\n\nNGN.ref = new function () {\n  var requireBUS = function (trigger, event, scope, nm, preventDefault) {\n    if (NGN.BUS === undefined) {\n      return console.error('The event BUS is required for ' + nm + '().')\n    }\n    preventDefault = NGN.coalesce(preventDefault, false)\n    var fn = function (e) {\n      if (preventDefault && e.preventDefault) {\n        e.preventDefault()\n      }\n      NGN.BUS.emit(event, e)\n    }\n    scope.addEventListener(trigger, fn)\n  }\n\n  var qs = function (value, selector, all) {\n    if (typeof value === 'string') {\n      return document[all ? 'querySelector' : 'querySelectorAll']((value + ' > ' + selector).trim())\n    }\n    return value[all ? 'querySelector' : 'querySelectorAll'](selector.trim())\n  }\n\n  Object.defineProperties(this, {\n\n    keys: NGN.define(false, true, false, {}),\n\n    _find: NGN.define(false, false, false, function (value, selector) {\n      if (typeof value === 'string') {\n        var reference = NGN.ref.find((value + ' > ' + selector).trim())\n        if (reference.length === 0) {\n          var tmpref = NGN.ref.find((value).trim())[0].parentNode.querySelectorAll(selector)\n          if (tmpref.length > 0) {\n            if (tmpref.length === 1) {\n              return tmpref[0]\n            }\n            return tmpref\n          }\n        }\n        return reference\n      }\n      return NGN.ref.find(value.querySelectorAll(selector))\n    }),\n\n    /**\n     * @method find\n     * Retrieve the DOM element(s) for the given selector. This method provides\n     * an **unmanaged** reference object.\n     * @private\n     * @param {String} selector\n     * The selector (CSS-style).\n     * @returns {ref}\n     * Returns an instance of the reference.\n     */\n    find: NGN.define(false, false, false, function (value) {\n      var html = typeof value !== 'string'\n      var els = html === false ? document.querySelectorAll(value) : value\n      var result = null\n\n      if (els.length === 1) {\n        if (!els[0].hasOwnProperty('isArray')) {\n          Object.defineProperties(els[0], {\n            isArray: NGN.get(function () {\n              return false\n            }, false)\n          })\n        }\n\n        if (!els[0].hasOwnProperty('find')) {\n          Object.defineProperty(els[0], 'find', NGN.const(function (selector) {\n            return NGN.ref._find(value, selector)\n          }))\n        }\n\n        if (!els[0].hasOwnProperty('forward')) {\n          Object.defineProperty(els[0], 'forward', NGN.const(function (trigger, event) {\n            requireBUS(trigger, event, this, 'forward')\n          }))\n        }\n\n        if (!els[0].hasOwnProperty('on')) {\n          Object.defineProperty(els[0], 'on', NGN.const(function () {\n            this.addEventListener.apply(this, arguments)\n          }))\n        }\n\n        result = els[0]\n      } else {\n        var base = NGN.slice(els)\n        if (NGN.typeof(els) === 'nodelist' && base.length === 1) {\n          base = base[0]\n        }\n\n        // Apply querySelector/All to the response for chaining.\n        Object.defineProperties(base, {\n          querySelector: NGN.define(false, false, false, function (selector) {\n            qs(value, selector)\n          }),\n\n          querySelectorAll: NGN.define(false, false, false, function (selector) {\n            qs(value, selector, true)\n          }),\n\n          addEventListener: NGN.define(false, false, false, function (evt, fn) {\n            for (var el = 0; el < this.length; el++) {\n              this[el].addEventListener(evt, fn)\n            }\n          }),\n\n          removeEventListener: NGN.define(false, false, false, function (evt, fn) {\n            for (var el = 0; el < this.length; el++) {\n              this[el].removeEventListener(evt, fn)\n            }\n          }),\n\n          find: NGN.const(function (selector) {\n            return NGN.ref._find(value, selector)\n          }),\n\n          isArray: NGN.get(function () {\n            return true\n          }, false),\n\n          forward: NGN.define(false, false, false, function (trigger, event) {\n            requireBUS(trigger, event, this, 'forward')\n          })\n        })\n        result = base\n      }\n\n      return result\n    }),\n\n    /**\n     * @method create\n     * Add a reference.\n     * @param {String} [key]\n     * The key/name of the reference. For example, if this is `myElement`,\n     * then `ref.myElement` will return a pointer to this reference.\n     * @param {string} selector\n     * The CSS selector path.\n     */\n    create: {\n      enumerble: true,\n      writable: false,\n      configurable: false,\n      value: function (key, value) {\n        // If the key is not provided but the value is a DOM element, make\n        // an ephemeral reference.\n        if (!value && typeof key !== 'string') {\n          return this.find(key)\n        }\n\n        // Basic error checking\n        if (typeof key !== 'string' && typeof key !== 'number') {\n          throw new Error('Cannot add a non-alphanumeric selector reference.')\n        }\n        if (key.trim().length === 0) {\n          throw new Error('Cannot add a blank selector reference.')\n        }\n        if (value === undefined || value === null || value.trim().length === 0) {\n          throw new Error('Cannot create a null/undefined selector reference.')\n        }\n\n        // Create a reference object\n        var cleankey = this.cleanKey(key)\n        var me = this\n        Object.defineProperty(NGN.ref, cleankey, NGN.private(value))\n\n        Object.defineProperty(NGN.ref, key, {\n          enumerable: true,\n          get: function () {\n            return me.find(value)\n          },\n          set: function (val) {\n            if (val === undefined || val === null || val.trim().length === 0) {\n              throw new Error('Cannot create a null/undefined selector reference.')\n            }\n            NGN.ref[cleankey] = val\n          }\n        })\n\n        this.keys[key] = value\n        this.keys[this.cleanKey(key)] = value\n      }\n    },\n\n    /**\n     * @method remove\n     * Removes a key from the reference manager.\n     */\n    remove: NGN.const(function (key) {\n      if (this.key) {\n        delete this.key\n        delete this.keys[key]\n      }\n      var ck = this.cleanKey(key)\n      if (this[ck]) {\n        delete this[ck]\n        delete this.keys[ck]\n      }\n    }),\n\n    /**\n     * @method cleanKey\n     * Creates a clean version of the key used to uniquely identify the reference.\n     * @private\n     * @param {String} key\n     * The key to clean.\n     */\n    cleanKey: NGN.define(false, false, false, function (key) {\n      return key.replace(/[^A-Za-z0-9\\_\\#\\$\\@\\-\\+]/gi, '') + key.length\n    }),\n\n    /**\n     * @property json\n     * A JSON representation of the managed keys and their associated selectors.\n     * @returns {Object}\n     * A key:selector object.\n     */\n    json: {\n      enumerable: true,\n      get: function () {\n        var me = this\n        var obj = {}\n\n        Object.keys(this).forEach(function (el) {\n          if (me.hasOwnProperty(el) && ['json', 'find', 'remove'].indexOf(el.trim().toLowerCase()) < 0 && typeof me[el] !== 'function') {\n            obj[el] = me.keys[el]\n          }\n        })\n        return obj\n      }\n    }\n  })\n}()\n","/**\n * @class NGN.NET\n * A library to issue network requests, typically viaHTTP/S requests.\n * This acts as an AJAX library among other things.\n * @author Corey Butler\n * @singleton\n */\nconst parser = new DOMParser()\nlet fs = NGN.nodelike ? require('fs') : null\n\nclass Network {\n  constructor () {\n    Object.defineProperties(this, {\n      /**\n       * @method xhr\n       * Issue an XHR request.\n       * @private\n       * @param  {Function} callback\n       * The callback to execute when the request finishes (or times out.)\n       */\n      xhr: NGN.privateconst(function (callback) {\n        let res\n\n        if (window.XMLHttpRequest) {\n          // code for IE7+, Firefox, Chrome, Opera, Safari\n          res = new XMLHttpRequest()\n        }\n\n        res.onreadystatechange = function () {\n          if (res.readyState === 4) {\n            if (callback) {\n              callback(res)\n            }\n          }\n        }\n\n        return res\n      }),\n\n      /**\n       * @method run\n       * A wrapper to execute a request.\n       * @private\n       * @param  {string} method required\n       * The method to issue, such as GET, POST, PUT, DELETE, OPTIONS, etc.\n       * @param  {string} url\n       * The URL where the request is issued to.\n       * @param  {Function} callback\n       * A function to call upon completion.\n       */\n      run: NGN.privateconst(function (method, url, callback) {\n        let res = NGN.NET.xhr(callback)\n        res.open(method, url, true)\n        res.send()\n      }),\n\n      /**\n       * @method applyRequestSettings\n       * Apply any configuration details to issue with the request,\n       * such as `username`, `password`, `headers`, etc.\n       * @private\n       * @param {object} xhr\n       * The XHR request object.\n       * @param {object} cfg\n       * The key/value configuration object to apply to the request.\n       * @param {object} cfg.params\n       * A key/value object containing URL paramaters to be passed with the request.\n       * These will automatically be URI-encoded.\n       * @param {object} cfg.headers\n       * A key/value object containing additional headers and associated values to\n       * be passed with the request.\n       * @param {object} cfg.body\n       * An arbitrary body to pass with the request. If no `Content-Type` header is\n       * provided, a `Content-Type: application/textcharset=UTF-8` header is automatically supplied.\n       * This cannot be used with @cfg.json.\n       * @param {object} cfg.json\n       * A JSON object to be sent with the request. It will automatically be\n       * parsed for submission. By default, a `Content-Type: application/json`\n       * header will be applied (this can be overwritten useing @cfg.headers).\n       * @param {object} cfg.form\n       * This accepts a key/value object of form elements, or a reference to a <FORM>\n       * HTML element. This automatically adds the appropriate headers.\n       * @param {string} username\n       * A basicauth username to add to the request. This is sent in plain\n       * text, so using SSL to encrypt/protect it is recommended.\n       * @param {string} password\n       * A basicauth password to add to the request. This is sent in plain\n       * text, so using SSL to encrypt/protect it is recommended.\n       * @param {boolean} [withCredentials=false]\n       * indicates whether or not cross-site `Access-Control` requests should be\n       * made using credentials such as cookies or authorization headers.\n       * The default is `false`.\n       */\n      applyRequestSettings: NGN.privateconst(function (xhr, cfg) {\n        if (!xhr || !cfg) {\n          throw new Error('No XHR or configuration object defined.')\n        }\n\n        // Add URL Parameters\n        if (cfg.params) {\n          let parms = Object.keys(cfg.params).map(function (parm) {\n            return parm + '=' + encodeURIComponent(cfg.params[parm])\n          })\n          cfg.url += '?' + parms.join('&')\n        }\n\n        xhr.open(cfg.method || 'POST', cfg.url, true)\n\n        // Set headers\n        cfg.header = cfg.header || cfg.headers || {}\n        Object.keys(cfg.header).forEach(function (header) {\n          xhr.setRequestHeader(header, cfg.header[header])\n        })\n\n        // Handle body (Blank, plain text, or JSON)\n        let body = null\n        if (cfg.json) {\n          if (!cfg.header || (cfg.header && !cfg.header['Content-Type'])) {\n            xhr.setRequestHeader('Content-Type', 'application/jsoncharset=UTF-8')\n          }\n          body = JSON.stringify(cfg.json).trim()\n        } else if (cfg.body) {\n          if (!cfg.header || (cfg.header && !cfg.header['Content-Type'])) {\n            xhr.setRequestHeader('Content-Type', 'application/text')\n          }\n          body = cfg.body\n        } else if (cfg.form) {\n          body = new FormData()\n          Object.keys(cfg.form).forEach(function (el) {\n            body.append(el, cfg.form[el])\n          })\n        }\n\n        // Handle withCredentials\n        if (cfg.withCredentials) {\n          xhr.withCredentials = cfg.withCredentials\n        }\n\n        // Handle credentials sent with request\n        if (cfg.username && cfg.password) {\n          // Basic Auth\n          xhr.setRequestHeader('Authorization', 'Basic ' + btoa(cfg.username + ':' + cfg.password))\n        } else if (cfg.accessToken) {\n          // Bearer Auth\n          xhr.setRequestHeader('Authorization', 'Bearer ' + cfg.accessToken)\n        }\n\n        return body\n      }),\n\n      /**\n       * @method prepend\n       * A helper method to prepend arguments.\n       * @private\n       * @param  {[type]} args [description]\n       * @param  {[type]} el   [description]\n       * @return {[type]}      [description]\n       */\n      prepend: NGN.privateconst(function (args, el) {\n        args = NGN.slice(args)\n        args.unshift(el)\n        return args\n      }),\n\n      /**\n       * @method getFile\n       * A \"get\" method specifically for node-like environments.\n       * @param {string} url\n       * The URL to issue the request to.\n       * @param {Function} callback\n       * A callback method to run when the request is complete.\n       * This receives the response object as the only argument.\n       * @private\n       */\n      getFile: NGN.privateconst(function (url) {\n        if (fs !== null) {\n          let rsp = {\n            status: fs.existsSync(url.replace('file://', '')) ? 200 : 400\n          }\n          rsp.responseText = rsp.status === 200 ? fs.readFileSync(url.replace('file://', '')).toString() : 'File could not be found.'\n          return rsp\n        } else {\n          throw new Error(url + ' does not exist or could not be found.')\n        }\n      }),\n\n      /**\n       * @method normalizeUrl\n       * Cleanup a URL.\n       * @private\n       */\n      normalizeUrl: NGN.privateconst(function (url) {\n        let uri = []\n\n        url.split('/').forEach(function (el) {\n          if (el === '..') {\n            uri.pop()\n          } else if (el !== '.') {\n            uri.push(el)\n          }\n        })\n\n        return uri.join('/').replace(/\\:\\/{3,50}/gi, '://')\n      }),\n\n      /**\n       * @method processImport\n       * A helper class to process imported content and place\n       * it in the DOM accordingly.\n       * @param {string} url\n       * The URL of remote HTML snippet.\n       * @param {HTMLElement} target\n       * The DOM element where the resulting code should be appended.\n       * @param {string} callback\n       * Returns the HTMLElement, which can be directly inserted into the DOM.\n       * @param {HTMLElement} callback.element\n       * The new DOM element/NodeList.\n       * @param {boolean} [before=false]\n       * If set to true, insert before the callback.element.\n       * @private\n       */\n      processImport: NGN.privateconst(function (url, target, callback, before) {\n        before = before !== undefined ? before : false\n        this.import(url, function (element) {\n          if (typeof element === 'string') {\n            element = document.createTextNode(element)\n          } else if (element.length) {\n            let out = []\n            NGN.slice(element).forEach(function (el) {\n              if (before) {\n                out.push(target.parentNode.insertBefore(el, target))\n                target = el\n              } else {\n                out.push(target.appendChild(el))\n              }\n            })\n            callback && callback(out)\n            return\n          }\n          if (before) {\n            target.parentNode.insertBefore(element, target)\n          } else {\n            target.appendChild(element)\n          }\n          callback && callback(element)\n        })\n      }),\n\n      /**\n       * @method domainRoot\n       * Returns the root (no http/s) of the URL.\n       * @param {string} url\n       * The URL to get the root of.\n       * @private\n       */\n      domainRoot: NGN.privateconst(function (url) {\n        let r = (url.search(/^https?\\:\\/\\//) !== -1 ? url.match(/^https?\\:\\/\\/([^\\/?#]+)(?:[\\/?#]|$)/i, '') : url.match(/^([^\\/?#]+)(?:[\\/?#]|$)/i, ''))\n        return r === null || r[1].length < 3 ? window.location.host : r[1]\n      }),\n\n      /**\n       * @method isCrossOrigin\n       * Determine if accessing a URL is considered a cross origin request.\n       * @param {string} url\n       * The URL to identify as a COR.\n       * @returns {boolean}\n       * @private\n       */\n      isCrossOrigin: NGN.privateconst(function (url) {\n        return this.domainRoot(url) !== window.location.host\n      }),\n\n      /**\n       * @method prelink\n       * A helper method to construct pre-fetch style DOM elements.\n       * This also fires an event when the element is added to the DOM.\n       * @param {string} url\n       * The URL of the operation.\n       * @param {string} rel\n       * The type of operation. For example: `preconnect`.\n       * @param {boolean} [crossorigin]\n       * Set to `true` to identify the request as a cross origin request.\n       * By default, NGN will compare the URL to the current URL in an\n       * attempt to determine if the request is across origins.\n       * @private\n       */\n      prelink: NGN.privateconst(function (url, rel, cor) {\n        if (!document.head) {\n          console.warn('Cannot use a preconnect, predns, etc because there is no HEAD in the HTML document.')\n          return\n        }\n\n        let p = document.createElement('link')\n        p.rel = rel\n        p.href = url.trim().toLowerCase().substr(0, 4) !== 'http' ? this.normalizeUrl(window.location.origin + window.location.pathname + url) : url\n\n        NGN.coalesce(cor, this.isCrossOrigin(url)) && (p.setAttribute('crossorigin', 'true'))\n        document.head.appendChild(p)\n        NGN.BUS.emit('network.' + rel)\n      }),\n\n      importCache: NGN.private({}),\n\n      createElement: NGN.privateconst(function (str) {\n        return parser.parseFromString(str, 'text/html').querySelector('body').children\n      }),\n\n      applyData: NGN.privateconst(function (tpl, data, callback) {\n        if (tpl === undefined) {\n          console.warn('Empty template.')\n          callback && callback()\n          return\n        }\n\n        // Apply data to the template.\n        Object.keys(data).forEach(function (key) {\n          let re = new RegExp('\\{\\{' + key + '\\}\\}', 'gm')\n          tpl = tpl.replace(re, data[key])\n        })\n\n        // Clear any unused template code\n        tpl = tpl.replace(/(\\{\\{.*\\}\\})/gm, '')\n\n        let el = this.createElement(tpl)\n        callback && callback(el[0])\n      })\n    })\n  }\n\n  /**\n   * @method send\n   * Send the request via HTTP/S.\n   * @param  {object} cfg\n   * The configuration to use when sending the request. See @applyRequestSettings#cfg\n   * for configuration details.\n   * @param  {Function} callback\n   * A callback to excute upon completion. This receives a standard response\n   * object.\n   */\n  send (cfg, callback) {\n    cfg = cfg || {}\n    let res = this.xhr(callback)\n    let body = this.applyRequestSettings(res, cfg)\n    res.send(body)\n  }\n\n  /**\n   * @method get\n   * Issue a `GET` request.\n   * @param {string} url\n   * The URL to issue the request to.\n   * @param {Function} callback\n   * A callback method to run when the request is complete.\n   * This receives the response object as the only argument.\n   */\n  get () {\n    if (typeof arguments[0] === 'object') {\n      let cfg = arguments[0]\n      cfg.method = 'GET'\n      cfg.url = typeof arguments[1] === 'string' ? arguments[1] : cfg.url\n      if (cfg.url.substr(0, 4) && NGN.nodelike) {\n        return arguments[arguments.length - 1](this.getFile(cfg.url))\n      }\n      return this.send(cfg, arguments[arguments.length - 1])\n    }\n    if (arguments[0].substr(0, 4) === 'file' && NGN.nodelike) {\n      return arguments[arguments.length - 1](this.getFile(arguments[0]))\n    }\n    this.run.apply(this.run, this.prepend(arguments, 'GET'))\n  }\n\n  /**\n   * @method head\n   * Issue a `HEAD` request.\n   * @param {string} url\n   * The URL to issue the request to.\n   * @param {Function} callback\n   * A callback method to run when the request is complete.\n   * This receives the response object as the only argument.\n   */\n  head (uri, callback) {\n    if (typeof arguments[0] === 'object') {\n      let cfg = arguments[0]\n      cfg.method = 'HEAD'\n      cfg.url = typeof arguments[1] === 'string' ? arguments[1] : cfg.url\n      return this.send(cfg, arguments[arguments.length - 1])\n    }\n    this.run.apply(this.run, this.prepend(arguments, 'HEAD'))\n  }\n\n  /**\n   * @method put\n   * Issue a `PUT` request.\n   * @param  {object} cfg\n   * See the options for @send#cfg\n   * @param  {Function} callback\n   * A callback method to run when the request is complete.\n   * This receives the response object as the only argument.\n   */\n  put (cfg, callback) {\n    cfg = cfg || {}\n    cfg.method = 'PUT'\n    cfg.url = cfg.url || window.location\n    this.send(cfg, callback)\n  }\n\n  /**\n   * @method post\n   * Issue a `POST` request.\n   * @param  {object} cfg\n   * See the options for @send#cfg\n   * @param  {Function} callback\n   * A callback method to run when the request is complete.\n   * This receives the response object as the only argument.\n   */\n  post (cfg, callback) {\n    cfg = cfg || {}\n    cfg.method = 'POST'\n    cfg.url = cfg.url || window.location\n    this.send(cfg, callback)\n  }\n\n  /**\n   * @method delete\n   * Issue a `DELETE` request.\n   * @param {string} url\n   * The URL to issue the request to.\n   * @param {Function} callback\n   * A callback method to run when the request is complete.\n   * This receives the response object as the only argument.\n   */\n  delete () {\n    this.run.apply(this.run, this.prepend(arguments, 'DELETE'))\n  }\n\n  /**\n   * @method json\n   * This is a shortcut method for creating a `GET` request and\n   * auto-processing the response body into a JSON object.\n   * @param  {string} url\n   * The URL to issue the request to.\n   * @param  {Function} callback\n   * This receives a JSON response object from the server as it's only argument.\n   */\n  json (cfg, url, callback) {\n    if (typeof cfg === 'string') {\n      callback = url\n      url = cfg\n      cfg = null\n    }\n    if (cfg === null) {\n      this.run('GET', url, function (res) {\n        if (res.status !== 200) {\n          throw Error('Could not retrieve JSON data from ' + url + ' (Status Code: ' + res.status + ').')\n        }\n        try {\n          res.json = JSON.parse(res.responseText)\n        } catch (e) {\n          res.json = null\n        }\n        callback && callback(res.json)\n      })\n    } else {\n      cfg.url = url\n      this.get(cfg, function (res) {\n        if (res.status !== 200) {\n          throw Error('Could not retrieve JSON data from ' + url + ' (Status Code: ' + res.status + ').')\n        }\n        try {\n          res.json = JSON.parse(res.responseText)\n        } catch (e) {\n          res.json = null\n        }\n        callback && callback(res.json)\n      })\n    }\n  }\n\n  /**\n   * @method import\n   * Import a remote HTML fragment.\n   * @param {string|array} url\n   * The URL of remote HTML snippet. If the URL has a `.js` or `.css`\n   * extension, it will automatically be added to the `<head>`.\n   * It is also possible to provide an array of string values. Take\n   * note that the callback may return a different value based on\n   * this input.\n   * @param {string|array} callback\n   * If a **string** is provided as the URL, this returns the HTMLElement,\n   * which can be directly inserted into the DOM. If an **array** is\n   * provided as the URL, the callback will return an array of HTMLElements.\n   * For example:\n   *\n   * ```js\n   * NGN.NET.import([\n   *   '/path/a.html',\n   *   '/path/b.html',\n   *   '/path/a.js'],\n   *    function (elements){\n   *      console.dir(elements)\n   *    }\n   * })\n   *```\n   * The result `elements` array would look like:\n   *\n   * ```js\n   * [\n   *   HTMLElement, // DOM element created for a.html\n   *   HTMLElement, // DOM element created for b.html\n   *   HTMLElement  // DOM element created for a.js (this will be in the <head>)\n   * ]\n   * ```\n   * The last array element is `null`\n   * @param {boolean} [bypassCache=false]\n   * When set to `true`, bypass the cache.\n   * @fires html.import\n   * Returns the HTMLElement/NodeList as an argument to the event handler.\n   */\n  import (url, callback, bypassCache) {\n    // Support multiple simultaneous imports\n    if (Array.isArray(url)) {\n      let self = this\n      let out = new Array(url.length)\n      let i = 0\n      url.forEach(function (uri, num) {\n        self.import(uri, function (el) {\n          out[num] = el\n          i++\n        }, bypassCache)\n      })\n      if (callback) {\n        let int = setInterval(function () {\n          if (i === url.length) {\n            clearInterval(int)\n            callback(out)\n          }\n        }, 5)\n      }\n      return\n    }\n\n    // Support JS/CSS\n    let ext = null\n    try {\n      ext = url.split('/').pop().split('?')[0].split('.').pop().toLowerCase()\n      let s\n      if (ext === 'js') {\n        s = document.createElement('script')\n        s.setAttribute('type', 'text/javascript')\n        s.setAttribute('src', url)\n      } else if (ext === 'css') {\n        s = document.createElement('link')\n        s.setAttribute('rel', 'stylesheet')\n        s.setAttribute('type', 'text/css')\n        s.setAttribute('href', url)\n      }\n      s.onload = typeof callback === 'function' ? function () { callback(s) } : function () {}\n      document.getElementsByTagName('head')[0].appendChild(s)\n    } catch (e) {}\n\n    if (['js', 'css'].indexOf((ext || '').trim().toLowerCase()) >= 0) {\n      return\n    }\n\n    bypassCache = typeof bypassCache === 'boolean' ? bypassCache : false\n\n    // If a local reference is provided, complete the path.\n    if (url.substr(0, 4) !== 'http') {\n      let path = window.location.href.split('/')\n      path.pop()\n      url = path.join('/') + '/' + url\n    }\n\n    // Use the cache if defined & not bypassed\n    if (!bypassCache && this.importCache.hasOwnProperty(url)) {\n      let doc = this.createElement(this.importCache[url])\n      callback && callback(doc.length === 1 ? doc[0] : doc)\n      if (window.NGN.BUS) {\n        window.NGN.BUS.emit('html.import', doc.length === 1 ? doc[0] : doc)\n      }\n      // console.warn('Used cached version of '+url)\n      return\n    }\n\n    // Retrieve the file content\n    let me = this\n    this.get(url, function (res) {\n      if (res.status !== 200) {\n        return console.warn('Check the file path of the snippet that needs to be imported. ' + url + ' could not be found (' + res.status + ')')\n      }\n\n      let doc = me.createElement(res.responseText)\n      me.importCache[url] = res.responseText\n\n      if (doc.length === 0) {\n        console.warn(me.normalizeUrl(url) + ' import has no HTML tags.')\n        callback && callback(res.responseText)\n        if (window.NGN.BUS) {\n          window.NGN.BUS.emit('html.import', res.responseText)\n        }\n      } else {\n        let el = doc.length === 1 ? doc[0] : doc\n        callback && callback(el)\n        if (window.NGN.BUS) {\n          window.NGN.BUS.emit('html.import', el)\n        }\n      }\n    })\n  }\n\n  /**\n   * @method importTo\n   * This helper method uses the #import method to retrieve an HTML\n   * fragment and insert it into the specified DOM element. This is\n   * the equivalent of using results of the #import to retrieve a\n   * snippet, then doing a `target.appendChild(importedElement)`.\n   * @param {string} url\n   * The URL of remote HTML snippet.\n   * @param {HTMLElement} target\n   * The DOM element where the resulting code should be appended.\n   * @param {string} callback\n   * Returns the HTMLElement, which can be directly inserted into the DOM.\n   * @param {HTMLElement} callback.element\n   * The new DOM element/NodeList.\n   */\n  importTo (url, target, callback) {\n    this.processImport(url, target, callback)\n  }\n\n  /**\n   * @method importBefore\n   * This helper method uses the #import method to retrieve an HTML\n   * fragment and insert it into the DOM before the target element. This is\n   * the equivalent of using results of the #import to retrieve a snippet,\n   * then doing a `target.parentNode.insertBefore(importedElement, target)`.\n   * @param {string} url\n   * The URL of remote HTML snippet.\n   * @param {HTMLElement} target\n   * The DOM element where the resulting code should be appended.\n   * @param {string} callback\n   * Returns the HTMLElement/NodeList, which can be directly inserted into the DOM.\n   * @param {HTMLElement} callback.element\n   * The new DOM element/NodeList.\n   */\n  importBefore (url, target, callback) {\n    this.processImport(url, target, callback, true)\n  }\n\n  /**\n   * @method predns\n   * This notifies the browser domains which will be accessed at a later\n   * time. This helps the browser resolve DNS inquiries quickly.\n   * @param {string} domain\n   * The domain to resolve.\n   * @param {boolean} [crossorigin]\n   * Set to `true` to identify the request as a cross origin request.\n   * By default, NGN will compare the URL to the current URL in an\n   * attempt to determine if the request is across origins.\n   * @fires network-dns-prefetch\n   * Fired when a pre-fetched DNS request is issued to the browser.\n   */\n  predns (domain, cor) {\n    this.prelink(window.location.protocol + '//' + domain, 'dns-prefetch', cor)\n  }\n\n  /**\n   * @method preconnect\n   * Tell the browser which remote resources will or may be used in the\n   * future by issuing a `Preconnect`. This will resolve DNS (#predns), make the TCP\n   * handshake, and negotiate TLS (if necessary). This can be done directly\n   * in HTML without JS, but this method allows you to easily preconnect\n   * a resource in response to a user interaction or NGN.BUS activity.\n   * @param {string} url\n   * The URL to preconnect to.\n   * @param {boolean} [crossorigin]\n   * Set to `true` to identify the request as a cross origin request.\n   * By default, NGN will compare the URL to the current URL in an\n   * attempt to determine if the request is across origins.\n   * @fires network.preconnect\n   * Fired when a preconnect is issued to the browser.\n   */\n  preconnect (url, cor) {\n    this.prelink(url, 'preconnect', cor)\n  }\n\n  /**\n   * @method prefetch\n   * Fetch a specific resource and cache it.\n   * @param {string} url\n   * URL of the resource to download and cache.\n   * @param {boolean} [crossorigin]\n   * Set to `true` to identify the request as a cross origin request.\n   * By default, NGN will compare the URL to the current URL in an\n   * attempt to determine if the request is across origins.\n   * @fires network.prefetch\n   * Fired when a prefetch is issued to the browser.\n   */\n  prefetch (url, cor) {\n    this.prelink(url, 'prefetch', cor)\n  }\n\n  /**\n   * @method subresource\n   * A prioritized version of #prefetch. This should be used\n   * if the asset is required for the current page. Think of this\n   * as \"needed ASAP\". Otherwise, use #prefetch.\n   * @param {string} url\n   * URL of the resource to download and cache.\n   * @param {boolean} [crossorigin]\n   * Set to `true` to identify the request as a cross origin request.\n   * By default, NGN will compare the URL to the current URL in an\n   * attempt to determine if the request is across origins.\n   * @fires network.prefetch\n   * Fired when a prefetch is issued to the browser.\n   */\n  subresource (url, cor) {\n    this.prelink(url, 'subresource', cor)\n  }\n\n  /**\n   * @method prerender\n   * Prerender an entire page. This behaves as though a page is\n   * opened in a hidden tab, then displayed when called. This is\n   * powerful, but should only be used when there is absolutely\n   * certainty that the prerendered page will be needed. Otherwise\n   * all of the assets are loaded for no reason (i.e. uselessly\n   * consuming bandwidth).\n   * @param {string} url\n   * URL of the page to download and cache.\n   * @param {boolean} [crossorigin]\n   * Set to `true` to identify the request as a cross origin request.\n   * By default, NGN will compare the URL to the current URL in an\n   * attempt to determine if the request is across origins.\n   * @fires network.prerender\n   * Fired when a prerender is issued to the browser.\n   */\n  prerender (url, cor) {\n    this.prelink(url, 'prerender', cor)\n  }\n\n  /**\n   * @method template\n   * Include a simple letiable replacement template and apply\n   * values to it. This is always cached client side.\n   * @param {string} url\n   * URL of the template to retrieve.\n   * @param {object} [letiables]\n   * A key/value objct containing letiables to replace in\n   * the template.\n   * @param {function} callback\n   * The callback receives a single argument with the HTMLElement/\n   * NodeList generated by the template.\n   */\n  template (url, data, callback) {\n    url = this.normalizeUrl(url)\n\n    if (typeof data === 'function') {\n      callback = data\n      data = {}\n    }\n\n    data = data || {}\n\n    let me = this\n    let tpl\n\n    // Check the cache\n    if (this.importCache.hasOwnProperty(url)) {\n      tpl = this.importCache[url]\n      return this.applyData(tpl, data, callback)\n    }\n\n    this.get(url, function (res) {\n      let ext = null\n      try {\n        ext = url.split('/').pop().split('?')[0].split('.').pop().toLowerCase()\n      } catch (e) {}\n      if (['js', 'css'].indexOf((ext || '').trim().toLowerCase()) >= 0) {\n        console.warn('Cannot use a .' + ext + ' file as a template. Only HTML templates are supported.')\n        return\n      }\n\n      me.importCache[url] = res.responseText\n      me.applyData(res.responseText, data, callback)\n    })\n  }\n}\n\nNGN.NET = new Network()\n","/**\n * @class NGN.DOM.svg\n * Provides a way to easily manage SVG images within a document while\n * retaining the ability to style them with external CSS.\n * @singleton\n */\n/* This file should be loaded in the <head>, not at the end of the <body>.\n* By loading this script before the rest of the DOM, it will insert the\n* FOUC (Flash of Unstyled Content) CSS into the page BEFORE unstyled SVG images\n* are loaded. If this script is included in the <body>, the CSS will be loaded\n* AFTER the SVG images are loaded, meaning they may display briefly before\n* proper styling can be applied to the DOM.\n*/\n\n// Prevent FOUC\n// (function () {\n//   let ss = document.createElement('style')\n//   let str = document.createTextNode('svg[src]{display:none}svg.loading{height:0px !important;width:0px !important}')\n//   ss.appendChild(str)\n//   document.head.appendChild(ss)\n// })()\nconst fuoc = function () {\n  var ss = document.createElement('style')\n  var str = document.createTextNode('svg[src]{display:none}svg.loading{height:0px !important;width:0px !important}')\n  ss.appendChild(str)\n  document.head.appendChild(ss)\n}\nfuoc()\n\n// SVG Controller\nNGN.DOM = NGN.DOM || {}\nNGN.DOM.svg = {}\n\nObject.defineProperties(NGN.DOM.svg, {\n  /**\n   * @property {Object} _cache\n   * A cache of SVG images.\n   */\n  _cache: NGN.private({}),\n\n  /**\n   * @method swap\n   * Replace image tags with the SVG equivalent.\n   * @param {HTMLElement|NodeList} imgs\n   * The HTML element or node list containing the images that should be swapped out for SVG files.\n   * @param {function} [callback]\n   * Executed when the image swap is complete. There are no arguments passed to the callback.\n   * @private\n   */\n  swap: NGN.privateconst(function (svgs, callback) {\n    let me = this\n    for (let i = 0; i < svgs.length; i++) {\n      let attr = svgs[i].attributes\n      let output = me._cache[svgs[i].getAttribute('src')]\n      let attrs = []\n\n      try {\n        attrs = /<svg(\\s.*=[\\\"\\'].*?[\\\"\\'])?>/i.exec(output)[1].trim()\n        let sep = /[\\\"\\']\\s/i.exec(attrs)\n        sep = sep !== null ? sep[0] : '\\\" '\n        attrs = attrs.replace(new RegExp(sep, 'gi'), sep.replace(/\\s/ig, ',')).split(',')\n      } catch (e) {\n        console.error(e)\n      }\n\n      attrs = Array.isArray(attrs) ? attrs : [attrs]\n\n      let map = attrs.map(function (els) {\n        return els.split('=')[0].trim().toLowerCase()\n      })\n\n      for (let x = 0; x < attr.length; x++) {\n        let idx = map.indexOf(attr[x].name.toLowerCase())\n        if (idx < 0) {\n          attrs.push(attr[x].name + '=\"' + attr[x].value + '\"')\n        } else {\n          attrs[idx] = attr[x].name + '=\"' + attr[x].value + '\"'\n        }\n      }\n\n      attrs = attrs.filter(function (a) {\n        return a.split('=')[0].toLowerCase() !== 'src'\n      })\n\n      let svg = '<svg ' + attrs.join(' ') + '>'\n\n      svgs[i].outerHTML = output.replace(/<svg.*?>/i, svg)\n    }\n\n    callback && callback()\n  }),\n\n  /**\n   * @method id\n   * @param  {string} url\n   * Create an ID that can be used to reference an SVG symbol.\n   * @return {string}\n   * @private\n   */\n  id: NGN.privateconst(function (url) {\n    return url.replace(/.*\\:\\/\\/|[^A-Za-z0-9]|www/gi, '')\n  }),\n\n  /**\n   * @method cleanCode\n   * Captures all of the content between the <svg></svg> tag.\n   * @param  {string} code\n   * The code to clean up.\n   * @return {string}\n   * @private\n   */\n  cleanCode: NGN.privateconst(function (code) {\n    try {\n      return code.toString().trim().replace(/(\\r\\n|\\n|\\r)/gm, '').replace(/\\s+/g, ' ').match(/\\<svg.*\\<\\/svg\\>/igm, '')[0]\n    } catch (e) {\n      return ''\n    }\n  }),\n\n  /**\n   * @method viewbox\n   * Retrieves the viewbox attribute from the source code.\n   * @param  {string} code\n   * The code to extract the viewbox attribute from.\n   * @return {string}\n   * @private\n   */\n  viewbox: NGN.privateconst(function (code) {\n    return /(viewbox=[\"'])(.*?)([\"'])/igm.exec(code.toString().trim())[2] || '0 0 100 100'\n  }),\n\n  cache: NGN.privateconst(function (url, svg) {\n    this._cache[url] = svg\n  }),\n\n  fetchFile: NGN.privateconst(function (url, callback) {\n    if (NGN.nodelike) {\n      callback && callback(require('fs').readFileSync(require('path').resolve(url).replace('file://', '')).toString())\n    } else {\n      let me = this\n      NGN.NET.get(url, function (res) {\n        callback && callback(res.status !== 200 ? new Error(res.responseText) : me.cleanCode(res.responseText))\n      })\n    }\n  }),\n\n  /**\n   * @method update\n   * Replace any <img src=\"*.svg\"> with the SVG equivalent.\n   * @param {HTMLElement|NodeList} section\n   * The HTML DOM element to update. All children of this element will also be updated.\n   * @param {function} callback\n   * Execute this function after the update is complete.\n   */\n  update: NGN.const(function (section, callback) {\n    if (typeof section === 'function') {\n      callback = section\n      section = document.body\n    } else {\n      section = section || document.body\n    }\n\n    if (section.nodeName === '#text') {\n      return\n    }\n\n    let me = this\n    section = section.hasOwnProperty('length') === true\n      ? NGN._splice(section)\n      : [section]\n\n    section.forEach(function (sec) {\n      let imgs = sec.querySelectorAll('svg[src]')\n\n      // Loop through images, prime the cache.\n      for (let i = 0; i < imgs.length; i++) {\n        me._cache[imgs[i].getAttribute('src')] = me._cache[imgs[i].getAttribute('src')] || null\n      }\n\n      // Fetch all of the unrecognized svg files\n      let unfetched = Object.keys(me._cache).filter(function (url) {\n        return me._cache[url] === null\n      })\n\n      let remaining = unfetched.length\n      unfetched.forEach(function (url) {\n        me.fetchFile(url, function (content) {\n          if (!(content instanceof Error)) {\n            me.cache(url, content)\n          }\n          remaining--\n        })\n      })\n\n      // Monitor for download completion\n      let monitor = setInterval(function () {\n        if (remaining === 0) {\n          clearInterval(monitor)\n          me.swap(imgs, callback)\n        }\n      }, 5)\n    })\n  })\n})\n","'use strict'\n\nNGN.DATA = NGN.DATA || {}\nNGN.DATA.util = {}\n\nObject.defineProperties(NGN.DATA.util, {\n  // CRC table for checksum (cached)\n  crcTable: NGN.private(null),\n\n  /**\n   * @method makeCRCTable\n   * Generate the CRC table for checksums. This is a fairly complex\n   * operation that should only be executed once and cached for\n   * repeat use.\n   * @private\n   */\n  makeCRCTable: NGN.privateconst(function () {\n    let c\n    let crcTable = []\n    for (let n = 0; n < 256; n++) {\n      c = n\n      for (let k = 0; k < 8; k++) {\n        c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1))\n      }\n      crcTable[n] = c\n    }\n    return crcTable\n  }),\n\n  /**\n   * @method checksum\n   * Create the checksum of the specified string.\n   * @param  {string} content\n   * The content to generate a checksum for.\n   * @return {string}\n   * Generates a checksum value.\n   */\n  checksum: NGN.const(function (str) {\n    let crcTable = this.crcTable || (this.crcTable = this.makeCRCTable())\n    let crc = 0 ^ (-1)\n\n    for (let i = 0; i < str.length; i++) {\n      crc = (crc >>> 8) ^ crcTable[(crc ^ str.charCodeAt(i)) & 0xFF]\n    }\n\n    return (crc ^ (-1)) >>> 0\n  }),\n\n  /**\n   * @method GUID\n   * Generate  a globally unique identifier.\n   *\n   * This is a \"fast\" GUID generator, designed to work in the browser.\n   * The likelihood of an ID collision is 1:3.26x10^15 (1 in 3.26 Quadrillion),\n   * and it will generate the ID between approximately 105ms (Desktop) and 726ms\n   * (Android) as of May 2016. This code came from StackOverflow, courtesy of\n   * an answer from Jeff Ward.\n   * @return {string}\n   * Returns a V4 GUID.\n   */\n  GUID: NGN.const(function () {\n    let lut = []\n    for (var i = 0; i < 256; i++) {\n      lut[i] = (i < 16 ? '0' : '') + (i).toString(16)\n    }\n\n    const d0 = Math.random() * 0xffffffff | 0\n    const d1 = Math.random() * 0xffffffff | 0\n    const d2 = Math.random() * 0xffffffff | 0\n    const d3 = Math.random() * 0xffffffff | 0\n\n    return lut[d0 & 0xff] + lut[d0 >> 8 & 0xff] + lut[d0 >> 16 & 0xff] + lut[d0 >> 24 & 0xff] +\n      '-' + lut[d1 & 0xff] + lut[d1 >> 8 & 0xff] + '-' + lut[d1 >> 16 & 0x0f | 0x40] +\n      lut[d1 >> 24 & 0xff] + '-' + lut[d2 & 0x3f | 0x80] + lut[d2 >> 8 & 0xff] + '-' +\n      lut[d2 >> 16 & 0xff] + lut[d2 >> 24 & 0xff] + lut[d3 & 0xff] + lut[d3 >> 8 & 0xff] +\n      lut[d3 >> 16 & 0xff] + lut[d3 >> 24 & 0xff]\n  })\n})\n","'use strict'\n\n/**\n * @class NGN.DATA.Model\n * Represents a data model/record.\n * @extends NGN.Class\n * @fires field.update\n * Fired when a datafield value is changed.\n * @fires field.create\n * Fired when a datafield is created.\n * @fires field.remove\n * Fired when a datafield is deleted.\n * @fires field.invalid\n * Fired when an invalid value is detected in an data field.\n */\n\nclass Model extends NGN.EventEmitter {\n  constructor (config) {\n    config = config || {}\n\n    super()\n\n    let me = this\n\n    Object.defineProperties(this, {\n      /**\n       * @cfg {String} [idAttribute='id']\n       * Setting this allows an attribute of the object to be used as the ID.\n       * For example, if an email is the ID of a user, this would be set to\n       * `email`.\n       */\n      idAttribute: NGN.privateconst(config.idAttribute || 'id'),\n\n      /**\n       * @cfg {object} fields\n       * A private object containing the data fields of the model, including\n       * validators & default values.\n       * ```js\n       * fields: {\n       *   fieldname: {\n       *     required: true,\n       *     type: String,\n       *     default: 'default field value'\n       *   },\n       *   fieldname2: null // Uses default field config (default value is null)\n       * }\n       * ```\n       */\n      /**\n       * @datafield {string} [id=null]\n       * The unique ID of the person.\n       */\n      fields: NGN.private(config.fields ||\n        {\n          id: {\n            required: true,\n            type: String,\n            'default': config.id || null\n          }\n        }\n      ),\n\n      /**\n       * @cfg {object|NGN.DATA.Model|NGN.DATA.Store} relationships\n       * An object containing fields that reference another data set. This can\n       * contain a configuration, an NGN.DATA.Model, or an NGN.DATA.Store.\n       * ```js\n       * // Metadata\n       * relationships: {\n       *   fieldname: {\n       *     required: true,\n       *     ref: MyModel\n       *   },\n       *   fieldname2: {\n       *     required: false,\n       *     ref: MyDataStore,\n       *     default: {}\n       *   }\n       * }\n       * // or\n       * relationships: {\n       *   fieldname: MyModel\n       * }\n       * ```\n       * Using the second syntax assumes the field **is required**.\n       *\n       * It is then possible to reference a join by the fieldname. For example:\n       *\n       * ```js\n       * console.log(MyModel.fieldname.data) // Displays the MyModel data.\n       * ```\n       * @type {[type]}\n       */\n      joins: NGN.private(config.relationships || {}),\n\n      /**\n       * @cfg {Object} virtuals\n       * A private object containing virtual data attributes and generated data.\n       * Virtual datafields are derived values. They are not part of the\n       * underlying data.\n       *\n       * **Example:**\n       *\n       * ```js\n       * let Model = new NGN.DATA.Model({\n       *   fields: {\n       *     dateOfBirth: null\n       *   },\n       *   virtuals: {\n       *     age: function () {\n       *       return YearsApart(new Date(), this.dateOfBirth)\n       *     }\n       *   }\n       * })\n       * ```\n       * The `age` example above compares the `dateOfBirth` field\n       * to the current date, expecting a numeric response.\n       * @private\n       */\n      virtuals: NGN.private(config.virtuals || {}),\n\n      /**\n       * @property {Object}\n       * The validation rules used to verify data integrity when persisting to a datasource.\n       * @private\n       */\n      validators: NGN.private({}),\n\n      /**\n       * @cfgproperty {boolean} [validation=true]\n       * Toggle data validation using this.\n       */\n      validation: NGN.public(NGN.coalesce(config.validation, true)),\n\n      /**\n       * @property {Boolean}\n       * Indicates the model is new or does not exist according to the persistence store.\n       * @private\n       * @readonly\n       */\n      isNew: NGN.private(true),\n\n      /**\n       * @property {Boolean}\n       * Indicates the model has been destroyed/deleted and should no longer exist.\n       * @private\n       * @readonly\n       */\n      isDestroyed: NGN.private(false),\n\n      /**\n       * @property {String} [oid=null]\n       * The raw object ID, which is either the #id or #idAttribute depending\n       * on how the object is configured.\n       * @private\n       */\n      oid: NGN.private(config[this.idAttribute] || null),\n\n      /**\n       * @cfg {boolean} [autoid=false]\n       * If the NGN.DATA.Model#idAttribute/id is not provided for a record,\n       * unique ID will be automatically generated for it. This means there\n       * will not be a `null` ID.\n       *\n       * An NGN.DATA.Store using a model with this set to `true` will never\n       * have a duplicate record, since the #id or #idAttribute will always\n       * be unique.\n       */\n      autoid: NGN.public(NGN.coalesce(config.autoid, false)),\n\n      benchmark: NGN.private(null),\n\n      /**\n       * @method setUnmodified\n       * This method forces the model to be viewed as unmodified, as though\n       * the record was just loaded from it's source. This method should only\n       * be used when custom loading data. The #load method automatically\n       * invokes this when record data is loaded. This also clears the history,\n       * just as if the record is brand new.\n       * @private\n       */\n      setUnmodified: NGN.privateconst(function () {\n        this.benchmark = this.checksum\n        this.changelog = []\n      }),\n\n      /**\n       * @cfg {Boolean} [allowInvalidSave=false]\n       * Set this to true to allow a save even though not all of the data properties\n       * pass validation tests.\n       */\n      allowInvalidSave: NGN.private(NGN.coalesce(config.allowInvalidSave, false)),\n\n      /**\n       * @cfg {Boolean} [disableDataValidation=false]\n       * Only used when #save is called. Setting this to `true` will bypass data validation.\n       */\n      disableDataValidation: NGN.private(NGN.coalesce(config.disableDataValidation, false)),\n\n      invalidDataAttributes: NGN.private([]),\n\n      initialDataAttributes: NGN.private([]),\n\n      /**\n       * @property {array} changelog\n       * An ordered array of changes made to the object data properties.\n       * This cannot be changed manually. Instead, use #history\n       * and #undo to manage this list.\n       * @private\n       */\n      changelog: NGN.private([]),\n\n      _nativeValidators: NGN.privateconst({\n        min: function (min, value) {\n          if (NGN.typeof(value) === 'array') {\n            return value.length >= min\n          }\n          if (NGN.typeof(value) === 'number') {\n            return value >= min\n          }\n          if (NGN.typeof(value) === 'string') {\n            return value.trim().length >= min\n          }\n          if (NGN.typeof(value) === 'date') {\n            return value.parse() >= min.parse()\n          }\n          return false\n        },\n        max: function (max, value) {\n          if (NGN.typeof(value) === 'array') {\n            return value.length <= max\n          }\n          if (NGN.typeof(value) === 'number') {\n            return value <= max\n          }\n          if (NGN.typeof(value) === 'string') {\n            return value.trim().length <= max\n          }\n          if (NGN.typeof(value) === 'date') {\n            return value.parse() <= max.parse()\n          }\n          return false\n        },\n        enum: function (valid, value) {\n          return valid.indexOf(value) >= 0\n        },\n        required: function (field, value) {\n          return me.hasOwnProperty(field) && me[value] !== null\n        }\n      }),\n\n      /**\n       * @cfgproperty {Object} dataMap\n       * An object mapping model attribute names to data storage field names.\n       *\n       * _Example_\n       * ```\n       * {\n       *   father: 'dad',\n       *\t email: 'eml',\n       *\t image: 'img',\n       *\t displayName: 'dn',\n       *\t firstName: 'gn',\n       *\t lastName: 'sn',\n       *\t middleName: 'mn',\n       *\t gender: 'sex',\n       *\t dob: 'bd',\n       * }\n       * ```\n       */\n      _dataMap: NGN.private(config.dataMap || null),\n      _reverseDataMap: NGN.public(null),\n\n      /**\n       * @property {object} raw\n       * The raw data.\n       * @private\n       */\n      raw: NGN.private({}),\n\n      /**\n       * @property {object} rawjoins\n       * The related data models/stores.\n       * @private\n       */\n      rawjoins: NGN.private({}),\n\n      _store: NGN.private(null)\n    })\n\n    // Make sure there aren't duplicate field names defined (includes joins)\n    let allfields = this.datafields.concat(this.virtualdatafields).concat(this.relationships).filter(function (key, i, a) {\n      return a.indexOf(key) !== i\n    })\n\n    if (allfields.length > 0) {\n      throw new Error('Duplicate field names exist: ' + allfields.join(', ') + '. Unique fieldnames are required for data fields, virtuals, and relationship fields.')\n    }\n\n    // Make sure an ID reference is available.\n    if (!this.fields.hasOwnProperty('id')) {\n      config.fields.id = {\n        required: true,\n        type: String,\n        'default': config.id || null\n      }\n    }\n\n    // Add fields\n    Object.keys(this.fields).forEach(function (field) {\n      if (typeof me.fields[field] !== 'object' && me.fields[field] !== null) {\n        me.fields[field] = {\n          required: true,\n          type: me.fields[field],\n          default: null,\n          name: field\n        }\n      }\n      me.addField(field, true)\n    })\n\n    // Add virtuals\n    Object.keys(this.virtuals).forEach(function (v) {\n      Object.defineProperty(me, v, NGN.get(function () {\n        return me.virtuals[v].apply(me)\n      }))\n    })\n\n    // Add relationships\n    Object.keys(this.joins).forEach(function (field) {\n      me.addRelationshipField(field, me.joins[field], true)\n    })\n\n    let events = [\n      'field.update',\n      'field.create',\n      'field.remove',\n      'field.invalid',\n      'validator.add',\n      'validator.remove',\n      'relationship.create',\n      'relationship.remove'\n    ]\n\n    if (NGN.BUS) {\n      events.forEach(function (eventName) {\n        me.on(eventName, function () {\n          let args = NGN.slice(arguments)\n          args.push(me)\n          args.unshift(eventName)\n          NGN.BUS.emit.apply(NGN.BUS, args)\n        })\n      })\n    }\n  }\n\n  /**\n   * @property {Boolean}\n   * Indicates one or more data properties has changed.\n   * @readonly\n   */\n  get modified () {\n    return this.checksum !== this.benchmark\n  }\n\n  /**\n   * @cfgproperty {String/Number/Date} [id=null]\n   * The unique ID of the model object. If #idAttribute is defined,\n   * this will get/set the #idAttribute value.\n   */\n  get id () {\n    return this.oid\n  }\n\n  set id (value) {\n    this.oid = value\n  }\n\n  /**\n   * @property checksum\n   * The unique checksum of the record (i.e. a record fingerprint).\n   * This will change as the data changes.\n   */\n  get checksum () {\n    return NGN.DATA.util.checksum(JSON.stringify(this.data))\n  }\n\n  /**\n   * @property {Object} dataMap\n   * The current data map.\n   * @private\n   */\n  get dataMap () {\n    return this._dataMap\n  }\n\n  set dataMap (value) {\n    this._dataMap = value\n    this._reverseDataMap = null\n  }\n\n  /**\n   * @property {NGN.DATA.Store} store\n   * If a store is associated with the model, this will\n   * provide a reference to it. If there is no store, this\n   * will return `null`.\n   */\n  get datastore () {\n    return this._store\n  }\n\n  /**\n   * @property {boolean} valid\n   * Indicates the record is valid.\n   */\n  get valid () {\n    this.validate()\n    return this.invalidDataAttributes.length === 0\n  }\n\n  /**\n   * @property datafields\n   * Provides an array of data fields associated with the model.\n   * @returns {String[]}\n   */\n  get datafields () {\n    return Object.keys(this.fields)\n  }\n\n  /**\n   * @property reslationships\n   * Provides an array of join fields associated with the model.\n   * @returns {String[]}\n   */\n  get relationships () {\n    return Object.keys(this.joins)\n  }\n\n  /**\n   * @property virtualdatafields\n   * Provides an array of virtual data fields associated with the model.\n   * @returns {String[]}\n   */\n  get virtualdatafields () {\n    return Object.keys(this.virtuals)\n  }\n\n  /**\n   * @property {object} reverseMap\n   * Reverses the data map. For example, if the original #dataMap\n   * looks like:\n   *\n   * ```js\n   * {\n   *    firstname: 'gn',\n   *    lastname: 'sn\n   * }\n   * ```\n   *\n   * The reverse map will look like:\n   *\n   * ```js\n   * {\n   *    gn: 'firstname',\n   *    sn: 'lastname\n   * }\n   * ```\n   */\n  get reverseMap () {\n    if (this.dataMap !== null) {\n      if (this._reverseDataMap !== null) {\n        return this._reverseDataMap\n      }\n      let rmap = {}\n      let me = this\n      Object.keys(this._dataMap).forEach(function (attr) {\n        rmap[me._dataMap[attr]] = attr\n      })\n      this._reverseDataMap = rmap\n      return rmap\n    }\n    return null\n  }\n\n  /**\n    * @property data\n    * Creates a JSON representation of the data entity. This is\n    * a record that can be persisted to a database or other data store.\n    * @readonly.\n    */\n  get data () {\n    let d = this.serialize()\n    if (!d.hasOwnProperty(this.idAttribute) && this.autoid) {\n      d[this.idAttribute] = this[this.idAttribute]\n    }\n    if (this.dataMap) {\n      let me = this\n      // Loop through the map keys\n      Object.keys(this.dataMap).forEach(function (key) {\n        // If the node contains key, make the mapping\n        if (d.hasOwnProperty(key)) {\n          if (d[key] instanceof NGN.DATA.Model) {\n            d[me.dataMap[key]] = d[key].data\n          } else {\n            d[me.dataMap[key]] = d[key]\n          }\n          delete d[key]\n        }\n      })\n    }\n    return d\n  }\n\n  /**\n   * @property history\n   * The history of the entity (i.e. changelog).The history\n   * is shown from most recent to oldest change. Keep in mind that\n   * some actions, such as adding new custom fields on the fly, may\n   * be triggered before other updates.\n   * @returns {array}\n   */\n  get history () {\n    return this.changelog.reverse()\n  }\n\n  /**\n    * @method addValidator\n    * Add or update a validation rule for a specific model property.\n    * @param {String} field\n    * The data field to test.\n    * @param {Function/String[]/Number[]/Date[]/RegExp/Array} validator\n    * The validation used to test the property value. This should return\n    * `true` when the data is valid and `false` when it is not.\n    *\n    * * When this is a _function_, the value is passed to it as an argument.\n    * * When this is a _String_, the value is compared for an exact match (case sensitive)\n    * * When this is a _Number_, the value is compared for equality.\n    * * When this is a _Date_, the value is compared for exact equality.\n    * * When this is a _RegExp_, the value is tested and the results of the RegExp#test are used to validate.\n    * * When this is an _Array_, the value is checked to exist in the array, regardless of data type. This is treated as an `enum`.\n    * * When this is _an array of dates_, the value is compared to each date for equality.\n    * @fires validator.add\n    */\n  addValidator (property, validator) {\n    if (!this.hasOwnProperty(property)) {\n      console.warn('No validator could be create for %c' + property + '%c. It is not an attribute of %c' + this.type + '%c.', NGN.css, '', NGN.css, '')\n      return\n    }\n\n    switch (typeof validator) {\n      case 'function':\n        this.validators[property] = this.validators[property] || []\n        this.validators[property].push(validator)\n        this.emit('validator.add', property)\n        break\n      case 'object':\n        if (Array.isArray(validator)) {\n          this.validators[property] = this.validators[property] || []\n          this.validators[property].push(function (value) {\n            return validator.indexOf(value) >= 0\n          })\n          this.emit('validator.add', property)\n        } else if (validator.test) { // RegExp\n          this.validators[property] = this.validators[property] || []\n          this.validators[property].push(function (value) {\n            return validator.test(value)\n          })\n          this.emit('validator.add', property)\n        } else {\n          console.warn('No validator could be created for %c' + property + '%c. The validator appears to be invalid.', NGN.css, '')\n        }\n        break\n      case 'string':\n      case 'number':\n      case 'date':\n        this.validators[property] = this.validators[property] || []\n        this.validators[property].push(function (value) {\n          return value === validator\n        })\n        this.emit('validator.add', property)\n        break\n      default:\n        console.warn('No validator could be create for %c' + property + '%c. The validator appears to be invalid.', NGN.css, '')\n    }\n  }\n\n  /**\n    * @method removeValidator\n    * Remove a data validator from the object.\n    * @param {String} attribute\n    * The name of the attribute to remove from the validators.\n    * @fires validator.remove\n    */\n  removeValidator (attribute) {\n    if (this.validators.hasOwnProperty(attribute)) {\n      delete this.validators[attribute]\n      this.emit('validator.remove', attribute)\n    }\n  }\n\n  /**\n    * @method validate\n    * Validate one or all attributes of the data.\n    * @param {String} [attribute=null]\n    * Validate a specific attribute. By default, all attributes are tested.\n    * @private\n    * @returns {Boolean}\n    * Returns true or false based on the validity of data.\n    */\n  validate (attribute) {\n    let _pass = true\n    let me = this\n\n    this.invalidDataAttributes = []\n\n    // Single Attribute Validation\n    if (attribute) {\n      if (this.validators.hasOwnProperty(attribute)) {\n        for (let i = 0; i < this.validators[attribute].length; i++) {\n          if (!me.validators[attribute][i](me[attribute])) {\n            me.invalidDataAttributes.indexOf(attribute) < 0 && me.invalidDataAttributes.push(attribute)\n            return false\n          }\n        }\n        if (!this.validateDataType(attribute)) {\n          this.invalidDataAttributes.push(attribute)\n        }\n        return\n      }\n    }\n\n    // Validate All Attributes\n    for (let rule in this.validators) {\n      if (this[rule]) {\n        if (this.validators.hasOwnProperty(rule)) {\n          let pass = true\n          for (let i = 0; i < this.validators[rule].length; i++) {\n            pass = this.validators[rule][i](this[rule])\n            if (!pass) {\n              break\n            }\n          }\n          if (!pass && this.invalidDataAttributes.indexOf(rule) < 0) {\n            this.invalidDataAttributes.push(rule)\n          }\n\n          if (_pass && !pass) {\n            _pass = false\n          }\n        }\n      }\n    }\n\n    this.datafields.forEach(function (field) {\n      if (!me.validateDataType(field) && me.raw.hasOwnProperty(field)) {\n        me.invalidDataAttributes.push(field)\n      }\n    })\n\n    return\n  }\n\n  /**\n   * @method validateDataType\n   * Indicates the data types match.\n   * @param {string} fieldname\n   * Name of the field whose data should be validated.\n   * @private\n   * @return {boolean}\n   */\n  validateDataType (field) {\n    const fieldType = NGN.typeof(this[field])\n    const expectedType = NGN.typeof(this.fields[field].type)\n\n    if (fieldType !== 'null') {\n      return fieldType === expectedType\n    }\n\n    if (this[field] === null && this.fields[field].required) {\n      if (this.autoid && field === this.idAttribute) {\n        return true\n      }\n      return false\n    }\n\n    return true\n  }\n\n  /**\n   * @method getRelationshipField\n   * Provides specific detail/configuration about a join/relationship.\n   * @param {String} fieldname\n   * The name of the field.\n   * @returns {Object}\n   */\n  getRelationshipField (fieldname) {\n    return this.joins[fieldname]\n  }\n\n  /**\n   * @method hasRelationship\n   * Indicates a data join exists.\n   * @param {String} fieldname\n   * The name of the data field.\n   * @returns {Boolean}\n   */\n  hasRelationship (fieldname) {\n    return this.joins.hasOwnProperty(fieldname)\n  }\n\n  /**\n     * @method getDataField\n     * Provides specific detail/configuration about a field.\n     * @param {String} fieldname\n     * The name of the data field.\n     * @returns {Object}\n     */\n  getDataField (fieldname) {\n    return this.fields[fieldname]\n  }\n\n  /**\n   * @method hasDataField\n   * Indicates a data field exists.\n   * @param {String} fieldname\n   * The name of the data field.\n   * @returns {Boolean}\n   */\n  hasDataField (fieldname) {\n    return this.fields.hasOwnProperty(fieldname)\n  }\n\n  /**\n    * @method serialize\n    * Creates a JSON data object with no functions. Only uses enumerable attributes of the object by default.\n    * Specific data values can be included/excluded using #enumerableProperties & #nonEnumerableProperties.\n    *\n    * Any object property that begins with a special character will be ignored by default. Functions & Setters are always\n    * ignored. Getters are evaluated recursively until a simple object type is found or there are no further nested attributes.\n    *\n    * If a value is an instance of NGN.model.Model (i.e. a nested model or array of models), reference string is returned in the data.\n    * The model itself can be returned using #getXRef.\n    * @param {Object} [obj]\n    * Defaults to this object.\n    * @protected\n    */\n  serialize (obj) {\n    let _obj = obj || this.raw\n    let rtn = {}\n\n    for (let key in _obj) {\n      _obj.nonEnumerableProperties = _obj.nonEnumerableProperties || ''\n      if (this.fields.hasOwnProperty(key)) {\n        key = key === 'id' ? this.idAttribute : key\n        if ((_obj.hasOwnProperty(key) && (_obj.nonEnumerableProperties.indexOf(key) < 0 && /^[a-z0-9 ]$/.test(key.substr(0, 1)))) || (_obj[key] !== undefined && _obj.enumerableProperties.indexOf(key) >= 0)) {\n          let dsc = Object.getOwnPropertyDescriptor(_obj, key)\n          if (!dsc.set) {\n            // Handle everything else\n            switch (typeof dsc.value) {\n              case 'function':\n                // Support date & regex proxies\n                if (dsc.value.name === 'Date') {\n                  rtn[key] = _obj[key].refs.toJSON()\n                } else if (dsc.value.name === 'RegExp') {\n                  rtn[key] = dsc.value()\n                }\n                break\n              case 'object':\n                // Support array proxies\n                if (_obj[key] instanceof Array && !Array.isArray(_obj[key])) {\n                  _obj[key] = _obj[key].slice(0)\n                }\n\n                rtn[key] = _obj[key]\n                break\n              default:\n                rtn[key] = _obj[key]\n                break\n            }\n          }\n        }\n      }\n    }\n\n    let me = this\n    this.relationships.forEach(function (r) {\n      rtn[r] = me.rawjoins[r].data\n    })\n\n    return rtn\n  }\n\n  /**\n   * @method addField\n   * Add a data field after the initial model definition.\n   * @param {string} fieldname\n   * The name of the field.\n   * @param {object} [fieldConfiguration=null]\n   * The field configuration (see cfg#fields for syntax).\n   * @param {boolean} [suppressEvents=false]\n   * Set to `true` to prevent events from firing when the field is added.\n   */\n  addField (field, fieldcfg, suppressEvents) {\n    if (typeof fieldcfg === 'boolean') {\n      suppressEvents = fieldcfg\n      fieldcfg = null\n    }\n    suppressEvents = suppressEvents !== undefined ? suppressEvents : false\n    let me = this\n    let cfg = null\n    if (field.toLowerCase() !== 'id') {\n      if (typeof field === 'object') {\n        if (!field.name) {\n          throw new Error('Cannot create data field. The supplied configuration does not contain a unique data field name.')\n        }\n        cfg = field\n        field = cfg.name\n        delete cfg.name\n      }\n\n      if (me[field] !== undefined) {\n        const source = NGN.stack.pop()\n        console.warn('%c' + field + '%c data field defined multiple times (at %c' + source.path + '%c). Only the last defintion will be used.', NGN.css, '', NGN.css, '')\n        delete me[field]\n      }\n\n      // Create the data field as an object attribute & getter/setter\n      me.fields[field] = cfg || me.fields[field] || {}\n      me.fields[field].required = NGN.coalesce(me.fields[field].required, false)\n      me.fields[field].type = NGN.coalesce(me.fields[field].type, String)\n      if (field === me.idAttribute && me.autoid === true) {\n        me.fields[field].type = String\n        me.fields[field]['default'] = NGN.DATA.util.GUID()\n      } else {\n        me.fields[field]['default'] = me.fields[field]['default'] || null\n      }\n      me.raw[field] = me.fields[field]['default']\n      me[field] = me.raw[field]\n\n      Object.defineProperty(me, field, {\n        get: function () {\n          return me.raw[field]\n        },\n        set: function (value) {\n          let old = me.raw[field]\n          me.raw[field] = value\n          let c = {\n            action: 'update',\n            field: field,\n            old: old,\n            new: me.raw[field]\n          }\n          this.changelog.push(c)\n          this.emit('field.update', c)\n          if (!me.validate(field)) {\n            me.emit('field.invalid', {\n              field: field\n            })\n          }\n        }\n      })\n\n      if (!suppressEvents) {\n        let c = {\n          action: 'create',\n          field: field\n        }\n        this.changelog.push(c)\n        this.emit('field.create', c)\n      }\n\n      // Add field validators\n      if (me.fields.hasOwnProperty(field)) {\n        if (me.fields[field].hasOwnProperty('pattern')) {\n          me.addValidator(field, me.fields[field].pattern)\n        }\n        ['min', 'max', 'enum'].forEach(function (v) {\n          if (me.fields[field].hasOwnProperty(v)) {\n            me.addValidator(field, function (val) {\n              return me._nativeValidators[v](me.fields[field], val)\n            })\n          }\n        })\n        if (me.fields[field].hasOwnProperty('required')) {\n          if (me.fields[field].required) {\n            me.addValidator(field, function (val) {\n              return me._nativeValidators.required(field, val)\n            })\n          }\n        }\n        if (me.fields[field].hasOwnProperty('validate')) {\n          if (typeof me.fields[field] === 'function') {\n            me.addValidator(field, function (val) {\n              return me.fields[field](val)\n            })\n          } else {\n            const source = NGN.stack.pop()\n            console.warn('Invalid custom validation function (in %c' + source.path + '%c). The value passed to the validate attribute must be a function.', NGN.css, '')\n          }\n        }\n      }\n    } else if (me.id === null && me.autoid) {\n      me.id = NGN.DATA.util.GUID()\n    }\n  }\n\n  /**\n   * @method addVirtual\n   * Add a virtual field dynamically.\n   * @param {string} name\n   * The name of the attribute to add.\n   * @param {function} handler\n   * The synchronous method (or generator) that produces\n   * the desired output.\n   */\n  addVirtual (name, fn) {\n    let me = this\n    Object.defineProperty(this, name, {\n      get: function () {\n        return fn.apply(me)\n      }\n    })\n  }\n\n  /**\n   * @method addRelationshipField\n   * Join another model dynamically.\n   * @param {string} name\n   * The name of the field to add.\n   * @param {Object|NGN.DATA.Model} config\n   * The configuration or data model type. This follows the same syntax\n   * defined in the #joins attribute.\n   * @param {boolean} [suppressEvents=false]\n   * Set to `true` to prevent events from firing when the field is added.\n   */\n  addRelationshipField (name, cfg, suppressEvents) {\n    suppressEvents = suppressEvents !== undefined ? suppressEvents : false\n\n    if (this.rawjoins.hasOwnProperty(name) || this.fields.hasOwnProperty(name) || this.hasOwnProperty(name)) {\n      throw new Error(name + ' already exists. It cannot be added to the model again.')\n    }\n\n    if (typeof cfg === 'function' || typeof cfg === 'object' && !cfg.hasOwnProperty('type')) {\n      cfg = {\n        type: cfg\n      }\n    }\n\n    if (!cfg.type) {\n      throw new Error('Configuration has no reference! The reference must be an NGN.DATA.Model or NGN.DATA.Store.')\n    }\n\n    cfg.required = NGN.coalesce(cfg.required, true)\n    cfg.default = cfg.default || null\n\n    let me = this\n    let entityType = 'model'\n    if (cfg.type instanceof NGN.DATA.Store) {\n      entityType = 'store'\n    } else if (NGN.typeof(cfg.type) === 'array') {\n      if (cfg.type.length === 0) {\n        throw new Error(name + ' cannot be an empty store. A model must be provided.')\n      }\n      if (NGN.typeof(cfg.type[0]) === 'modelloader') {\n        entityType = 'collection'\n      } else {\n        throw new Error(name + ' does not specify a valid store.')\n      }\n    } else if (typeof cfg.type === 'object') {\n      if (cfg.type.model) {\n        entityType = 'store'\n      }\n    }\n\n    if (entityType === 'store') {\n      let storeCfg = {}\n      if (cfg.type instanceof NGN.DATA.Store) {\n        this.rawjoins[name] = cfg.type\n        storeCfg = null\n      } else if (cfg.type.model) {\n        storeCfg = cfg.type\n      } else {\n        throw new Error('Nested store configuration is invalid or was not recognized.')\n      }\n\n      if (storeCfg !== null) {\n        this.rawjoins[name] = new NGN.DATA.Store(storeCfg)\n      }\n      this.applyStoreMonitor(name)\n    } else if (entityType === 'collection') {\n      this.rawjoins[name] = new NGN.DATA.Store({\n        model: cfg.type[0]\n      })\n      this.applyStoreMonitor(name)\n    } else if (!cfg.type.data) {\n      this.rawjoins[name] = cfg.default !== null ? new cfg.type(cfg.default) : new cfg.type()  // eslint-disable-line new-cap\n      this.applyModelMonitor(name)\n    } else if (cfg.type.data) {\n      this.rawjoins[name] = cfg.type\n      this.applyStoreMonitor(name)\n    } else {\n      throw new Error('Nested store configuration is invalid or was not recognized.')\n    }\n\n    Object.defineProperty(this, name, {\n      enumerable: true,\n      get: function () {\n        return me.rawjoins[name]\n      }\n    })\n\n    if (!suppressEvents) {\n      let c = {\n        action: 'create',\n        field: name\n      }\n      this.changelog.push(c)\n      this.emit('relationship.create', c)\n    }\n  }\n\n  /**\n   * @method applyModelMonitor\n   * Applies event handlers for bubbling model events.\n   * @param {string} field\n   * The relationship field name.\n   * @private\n   */\n  applyModelMonitor (name) {\n    const model = this.rawjoins[name]\n    const me = this\n\n    model.on('field.update', function (delta) {\n      me.emit('field.update', {\n        action: 'update',\n        field: name + '.' + delta.field,\n        old: delta.old,\n        new: delta.new,\n        join: true\n      })\n    })\n\n    model.on('field.create', function (delta) {\n      me.emit('field.update', {\n        action: 'update',\n        field: name + '.' + delta.field,\n        old: null,\n        new: null,\n        join: true\n      })\n    })\n\n    model.on('field.remove', function (delta) {\n      me.emit('field.update', {\n        action: 'update',\n        field: name + '.' + delta.field,\n        old: delta.value,\n        new: null,\n        join: true\n      })\n    })\n  }\n\n  /**\n   * @method applyStoreMonitor\n   * Applies event handlers for store data.\n   * @param {string} name\n   * Name of the raw join.\n   * @private\n   */\n  applyStoreMonitor (name) {\n    if (!this.rawjoins.hasOwnProperty(name)) {\n      return\n    }\n    if (this.rawjoins[name].hasOwnProperty('proxy')) {\n      const me = this\n\n      this.rawjoins[name].on('record.create', function (record) {\n        let old = me[name].data\n        old.pop()\n        let c = {\n          action: 'update',\n          field: name,\n          join: true,\n          old: old,\n          new: me[name].data\n        }\n        me.emit('field.update', c)\n      })\n      this.rawjoins[name].on('record.update', function (record, delta) {\n        if (!delta) {\n          return\n        }\n        let c = {\n          action: 'update',\n          field: name + '.' + delta.field,\n          join: true,\n          old: delta.old,\n          new: delta.new\n        }\n        me.emit('field.update', c)\n      })\n      this.rawjoins[name].on('record.delete', function (record) {\n        let old = me[name].data\n        old.push(record.data)\n        let c = {\n          action: 'update',\n          field: name,\n          join: true,\n          old: old,\n          new: me[name].data\n        }\n        me.emit('field.update', c)\n      })\n    }\n  }\n\n  /**\n   * @method removeField\n   * Remove a field from the data model.\n   * @param {string} name\n   * Name of the field to remove.\n   */\n  removeField (name) {\n    if (this.raw.hasOwnProperty(name)) {\n      let val = this.raw[name]\n      delete this[name]\n      delete this.fields[name] // eslint-disable-line no-undef\n      delete this.raw[name] // eslint-disable-line no-undef\n      if (this.invalidDataAttributes.indexOf(name) >= 0) {\n        this.invalidDataAttributes.splice(this.invalidDataAttributes.indexOf(name), 1)\n      }\n      let c = {\n        action: 'delete',\n        field: name,\n        value: val\n      }\n      this.emit('field.remove', c)\n      this.changelog.push(c)\n    }\n  }\n\n  /**\n   * @method removeVirtual\n   * Remove a virtual field.\n   * @param {string} name\n   * Name of the field.\n   */\n  removeVirtual (name) {\n    delete this[name]\n  }\n\n  /**\n   * @method removeRelationshipField\n   * Remove an existing join dynamically.\n   * @param {string} name\n   * The name of the relationship field to remove.\n   * @param {boolean} [suppressEvents=false]\n   * Set to `true` to prevent events from firing when the field is added.\n   */\n  removeRelationshipField (name, suppressEvents) {\n    suppressEvents = suppressEvents !== undefined ? suppressEvents : false\n    if (this.joins.hasOwnProperty(name)) {\n      let val = this.rawjoins[name]\n      delete this.rawjoins[name]\n      delete this[name]\n      delete this.joins[name]\n      if (!suppressEvents) {\n        let c = {\n          action: 'delete',\n          field: name,\n          old: val,\n          join: true\n        }\n        this.changelog.push(c)\n        this.emit('relationship.remove', c)\n      }\n    }\n  }\n\n  /**\n   * @method undo\n   * A rollback function to undo changes. This operation affects\n   * the changelog. It is possible to undo an undo (i.e. redo).\n   * This works with relationship creating/removing relationship fields,\n   * but not updates to the related model. To undo changes to a relationship\n   * field, the `undo()` method _of the related model_ must be called.\n   * @param {number} [OperationCount=1]\n   * The number of operations to \"undo\". Defaults to a single operation.\n   */\n  undo (back) {\n    back = back || 1\n    let old = this.changelog.splice(this.changelog.length - back, back)\n    let me = this\n\n    old.reverse().forEach(function (change) {\n      if (!(typeof change.join === 'boolean' ? change.join : false)) {\n        switch (change.action) {\n          case 'update':\n            me[change.field] = change.old\n            break\n          case 'create':\n            me.removeField(change.field)\n            break\n          case 'delete':\n            me.addField(change.field)\n            me[change.field] = me.old\n            break\n        }\n      } else {\n        switch (change.action) {\n          case 'create':\n            me.removeRelationshipField(change.field)\n            break\n          case 'delete':\n            me.addRelationshipField(change.field)\n            me[change.field] = change.old\n            break\n        }\n      }\n    })\n  }\n\n  /**\n   * @method load\n   * Load a data record. This clears the #history. #modified\n   * will be set to `false`, as though the record has been untouched.\n   * @param {object} data\n   * The data to apply to the model.\n   */\n  load (data) {\n    data = data || {}\n\n    // Handle data maps\n    let me = this\n    if (this._dataMap !== null) {\n      Object.keys(this.reverseMap).forEach(function (key) {\n        if (data.hasOwnProperty(key)) {\n          data[me.reverseMap[key]] = data[key]\n          delete data[key]\n        }\n      })\n    }\n\n    // Loop through the keys and add data fields\n    Object.keys(data).forEach(function (key) {\n      if (me.fields.hasOwnProperty(key)) {\n        if (me.raw.hasOwnProperty(key)) {\n          me.raw[key] = data[key]\n        } else if (key === me.idAttribute) {\n          me.id = data[key]\n        }\n      } else if (me.joins.hasOwnProperty(key)) {\n        // let tmp = new me.getRelated(key).type() // eslint-disable-line new-cap\n        // tmp.load(data[key])\n        // me.rawjoin[key] = tmp\n        me.rawjoins[key].load(data[key])\n      } else {\n        const source = NGN.stack.pop()\n        console.warn('%c' + key + '%c specified in %c' + source.path + '%c as a data field but is not defined in the model.', NGN.css, '', NGN.css, '')\n      }\n    })\n\n    this.setUnmodified()\n  }\n}\n\nNGN.DATA = NGN.DATA || {}\n\n\n// Object.defineProperty(NGN.DATA, 'Model', NGN.public(Entity))\n\nObject.defineProperties(NGN.DATA, {\n  Model: NGN.public(function (cfg) {\n    const ModelLoader = function (data) {\n      let model = new Model(cfg)\n      if (data) {\n        model.load(data)\n      }\n      return model\n    }\n\n    return ModelLoader\n  }),\n\n  Entity: NGN.private(Model)\n})\n\nif (NGN.nodelike) {\n  module.exports = NGN.DATA\n}\n","'use strict'\n\n/**\n * @class NGN.DATA.Store\n * Represents a collection of data.\n * @fires record.create\n * Fired when a new record is created. The new\n * record is provided as an argument to the event\n * handler.\n * @fires record.delete\n * Fired when a record(s) is removed. The old record\n * is provided as an argument to the event handler.\n */\nclass Store extends NGN.EventEmitter {\n  constructor (cfg) {\n    cfg = cfg || {}\n    super(cfg)\n\n    Object.defineProperties(this, {\n      /**\n       * @cfg {NGN.DATA.Model} model\n       * An NGN Data Model to which data records conform.\n       */\n      model: NGN.const(cfg.model || null),\n\n      // The raw data collection\n      _data: NGN.private([]),\n\n      // The raw filters\n      _filters: NGN.private([]),\n\n      // The raw indexes\n      _index: NGN.private(cfg.index || []),\n\n      // Placeholders to track the data that's added/removed\n      // during the lifespan of the store. Modified data is\n      // tracked within each model record.\n      _created: NGN.private([]),\n      _deleted: NGN.private([]),\n      _loading: NGN.private(false),\n\n      /**\n       * @property {NGN.DATA.Proxy} proxy\n       * The proxy used to transmit data over a network.\n       * @private\n       */\n      proxy: NGN.private(null),\n\n      /**\n       * @cfg {boolean} [allowDuplicates=true]\n       * Set to `false` to prevent duplicate records from being added.\n       * If a duplicate record is added, it will be ignored and an\n       * error will be thrown.\n       */\n      allowDuplicates: NGN.public(NGN.coalesce(cfg.allowDuplicates, true)),\n\n      /**\n       * @cfg {boolean} [errorOnDuplicate=false]\n       * Set to `true` to throw an error when a duplicate record is detected.\n       * If this is not set, it will default to the value of #allowDuplicates.\n       * If #allowDuplicates is not defined either, this will be `true`\n       */\n      errorOnDuplicate: NGN.const(NGN.coalesce(cfg.errorOnDuplicate, cfg.allowDuplicates, true))\n    })\n\n    let obj = {}\n    this._index.forEach(function (i) {\n      obj[i] = []\n    })\n    this._index = obj\n\n    let events = [\n      'record.duplicate',\n      'record.create',\n      'record.update',\n      'record.delete',\n      'clear',\n      'filter.create',\n      'filter.delete',\n      'index.create',\n      'index.delete'\n    ]\n\n    if (NGN.BUS) {\n      const me = this\n      events.forEach(function (eventName) {\n        me.on(eventName, function () {\n          let args = NGN.slice(arguments)\n          args.shift()\n          args.push(me)\n          NGN.BUS.emit(eventName, args)\n        })\n      })\n    }\n  }\n\n  /**\n   * @property {array} data\n   * The complete and unfiltered raw underlying dataset. This data\n   * is usually persisted to a database.\n   * @readonly\n   */\n  get data () {\n    return this._data.map(function (d) {\n      return d.data\n    })\n  }\n\n  /**\n   * @property {array} records\n   * An array of NGN.DATA.Model records. If the store has\n   * filters applied, the records will reflect the filtration.\n   * @readonly\n   */\n  get records () {\n    return this.applyFilters(this._data)\n  }\n\n  /**\n   * @property recordCount\n   * The total number of #records in the collection.\n   * @readonly\n   */\n  get recordCount () {\n    return this.applyFilters(this._data).length\n  }\n\n  /**\n   * @property {array} filtered\n   * An array of NGN.DATA.Model records that have been filtered out.\n   * The results reflect the inverse of #records.\n   */\n  get filtered () {\n    let records = this.records\n    return this._data.filter(function (record) {\n      return records.filter(function (rec) {\n        return rec.checksum === record.checksum\n      }).length === 0\n    })\n  }\n\n  /**\n   * @property {NGN.DATA.Model} first\n   * Return the first record in the store. Returns `null`\n   * if the store is empty.\n   */\n  get first () {\n    if (this.records.length === 0) {\n      return null\n    }\n    return this.records[0]\n  }\n\n  /**\n   * @property {NGN.DATA.Model} last\n   * Return the last record in the store. Returns `null`\n   * if the store is empty.\n   */\n  get last () {\n    if (this.records.length === 0) {\n      return null\n    }\n    return this.records[this.records.length - 1]\n  }\n\n  /**\n   * @method add\n   * Add a data record.\n   * @param {NGN.DATA.Model|object} data\n   * Accepts an existing NGN Data Model or a JSON object.\n   * If a JSON object is supplied, it will be applied to\n   * the data model specified in cfg#model. If no model\n   * is specified, the raw JSON data will be stored.\n   * @param {boolean} [suppressEvent=false]\n   * Set this to `true` to prevent the `record.create` event\n   * from firing.\n   * @return {NGN.DATA.Model}\n   * Returns the new record.\n   */\n  add (data, suppressEvent) {\n    let record\n    const me = this\n\n    if (!(data instanceof NGN.DATA.Entity)) {\n      try { data = JSON.parse(data) } catch (e) {}\n      if (typeof data !== 'object') {\n        throw new Error('Cannot add a non-object record.')\n      }\n      if (this.model) {\n        record = new this.model(data) // eslint-disable-line new-cap\n      } else {\n        record = data\n      }\n    } else {\n      record = data\n    }\n\n    if (record.hasOwnProperty('_store')) {\n      record._store = me\n    }\n\n    let dupe = this.isDuplicate(record)\n    if (dupe) {\n      this.emit('record.duplicate', record)\n      if (!this.allowDuplicates) {\n        if (this.errorOnDuplicate) {\n          throw new Error('Cannot add duplicate record (allowDuplicates = false).')\n        }\n        return\n      }\n    }\n\n    this.listen(record)\n    this.applyIndices(record, this._data.length)\n    this._data.push(record)\n    !this._loading && this._created.indexOf(record) < 0 && this._created.push(record)\n    !NGN.coalesce(suppressEvent, false) && this.emit('record.create', record)\n    return record\n  }\n\n  /**\n   * @method isDuplicate\n   * Indicates whether the specified record is a duplicate.\n   * This compares checksum values. Any match is considered a\n   * duplicate. It will also check for duplication of raw JSON\n   * objects (i.e. non-NGN.DATA.Model records).\n   * @param  {NGN.DATA.Model|Object} record\n   * The record or JSON object.\n   * @return {boolean}\n   */\n  isDuplicate (record) {\n    if (this._data.indexOf(record) >= 0) {\n      return false\n    }\n    return this._data.filter(function (rec) {\n      return rec.checksum === record.checksum\n    }).length > 0\n  }\n\n  /**\n   * @method listen\n   * Listen to a specific record's events and respond.\n   * @param {NGN.DATA.Model} record\n   * The record to listen to.\n   * @fires record.update\n   * Fired when a record is updated. The #record is passed as an argument to\n   * the event handler.\n   * @private\n   */\n  listen (record) {\n    const me = this\n    record.on('field.update', function (delta) {\n      me.updateIndice(delta.field, delta.old, delta.new, me._data.indexOf(record))\n      me.emit('record.update', record, delta)\n    })\n    record.on('field.delete', function (delta) {\n      me.updateIndice(delta.field, delta.old, undefined, me._data.indexOf(record))\n      me.emit('record.update', record, delta)\n    })\n  }\n\n  /**\n   * @method bulk\n   * Bulk load data.\n   * @param {string} eventName\n   * @param {array} data\n   * @private\n   */\n  bulk (event, data) {\n    this._loading = true\n    const me = this\n    data.forEach(function (record) {\n      me.add(record, true)\n    })\n    this._loading = false\n    this._deleted = []\n    this._created = []\n    this.emit(event || 'load')\n  }\n\n  /**\n   * @method load\n   * Bulk load data. This acts the same as adding records,\n   * but it suppresses individual record creation events.\n   * This will add data to the existing collection. If you\n   * want to load fresh data, use the #reload method.\n   * @param {array} data\n   * An array of data. Each array element should be an\n   * NGN.DATA.Model or a JSON object that can be applied\n   * to the store's #model.\n   */\n  load () {\n    let array = Array.isArray(arguments[0]) ? arguments[0] : NGN.slice(arguments)\n    this.bulk('load', array)\n  }\n\n  /**\n   * @method reload\n   * Reload data. This is the same as running #clear followed\n   * by #load.\n   */\n  reload (data) {\n    this.clear()\n    let array = Array.isArray(arguments[0]) ? arguments[0] : NGN.slice(arguments)\n    this.bulk('reload', array)\n  }\n\n  /**\n   * @method indexOf\n   * Find the index number of a record within the collection.\n   * @param  {NGN.DATA.Model} record\n   * The record whose index should be identified.\n   * @return {Number}\n   * Returns a number from `0-collection length`. Returns `-1` if\n   * the record is not found in the collection.\n   */\n  indexOf (record) {\n    if (typeof record !== 'object' || (!(record instanceof NGN.DATA.Entity) && !record.checksum)) {\n      return -1\n    }\n    return this._data.findIndex(function (el) {\n      return el.checksum === record.checksum\n    })\n  }\n\n  /**\n   * @method contains\n   * A convenience method that indicates whether a record is in\n   * the store or not.\n   * @param {NGN.DATA.Model} record\n   * The record to check for inclusion in the data collection.\n   * @return {Boolean}\n   */\n  contains (record) {\n    return this.indexOf(record) >= 0\n  }\n\n  /**\n   * @method remove\n   * Remove a record.\n   * @param {NGN.DATA.Model|object|number} data\n   * Accepts an existing NGN Data Model, JSON object,\n   * or index number. Using a JSON object is slower\n   * than using a reference to a data model or an index\n   * number (index is fastest).\n   * @fires record.delete\n   * @returns {NGN.DATA.Model}\n   * Returns the data model that was just removed. If a model\n   * is unavailable (i.e. remove didn't find the specified record),\n   * this will return `null`.\n   */\n  remove (data, suppressEvents) {\n    let removedRecord = []\n    let dataIndex\n\n    if (typeof data === 'number') {\n      dataIndex = data\n    } else if (data && data.checksum && data.checksum !== null || data instanceof NGN.DATA.Model) {\n      dataIndex = this.indexOf(data)\n    } else {\n      let m = new this.model(data, true) // eslint-disable-line new-cap\n      dataIndex = this._data.findIndex(function (el) {\n        return el.checksum === m.checksum\n      })\n    }\n\n    // If no record is found, the operation fails.\n    if (dataIndex < 0) {\n      throw new Error('Record removal failed (record not found at index ' + (dataIndex || '').toString() + ').')\n    }\n\n    removedRecord = this._data.splice(dataIndex, 1)\n\n    if (removedRecord.length > 0) {\n      removedRecord = removedRecord[0]\n      this.unapplyIndices(dataIndex)\n      if (!this._loading) {\n        let i = this._created.indexOf(removedRecord)\n        if (i >= 0) {\n          i >= 0 && this._created.splice(i, 1)\n        } else if (this._deleted.indexOf(removedRecord) < 0) {\n          this._deleted.push(removedRecord)\n        }\n      }\n\n      if (!NGN.coalesce(suppressEvents, false)) {\n        this.emit('record.delete', removedRecord)\n      }\n\n      return removedRecord\n    }\n\n    return null\n  }\n\n  /**\n   * @method clear\n   * Removes all data.\n   * @fires clear\n   * Fired when all data is removed\n   */\n  clear () {\n    this._data = []\n    const me = this\n    Object.keys(this._index).forEach(function (index) {\n      me._index[index] = []\n    })\n    this.emit('clear')\n  }\n\n  /**\n   * @method find\n   * Retrieve a specific record or set of records.\n   * @param {number|function|string|object} [query=null]\n   * When this is set to a `number`, the corresponding zero-based\n   * record will be returned. A `function` can also be used, which\n   * acts like a filter. Each record is passed to this function.\n   *\n   * For example, if we want to find all administrators within a\n   * set of users, the following could be used:\n   *\n   * ```js\n   *   let record = MyStore.find(function (record) {\n   *     return record.usertype = 'admin'\n   *   })\n   * ```\n   *\n   * It's also possible to supply a String. When this is supplied,\n   * the store will look for a record whose ID (see NGN.DATA.Model#idAttribute)\n   * matches the string. Numberic ID's are matched on their string\n   * equivalent for search purposes (data is not modified).\n   *\n   * An object can be used to search for specific field values. For example:\n   *\n   * ```js\n   * MyStore.find({\n   *   firstname: 'Corey',\n   *   lastname: /Butler|Doe/\n   * })\n   * ```\n   *\n   * The code above will find everyone named Corey Butler or Corey Doe. The\n   * first attribute must match the value exactly whereas `lastname` will\n   * match against the regular expression.\n   *\n   * If this parameter is `undefined` or `null`, all records will be\n   * returned (i.e. no search criteria specified, so return everything).\n   *\n   * If you're using a large dataset, indexing can speed up queries. To take\n   * full advantage of indexing, all of the query elements should be indexed.\n   * For example, if you have `lastname`, 'firstname' in your query and\n   * both of those are indexed, the response time will be substantially faster\n   * than if they're not (in large data sets). However; if one of those\n   * elements is _not_ indexed, performance may not increase.\n   * @param {boolean} [ignoreFilters=false]\n   * Set this to `true` to search the full unfiltered record set.\n   * @return {NGN.DATA.Model|array|null}\n   * An array is returned when a function is specified for the query.\n   * Otherwise the specific record is return. This method assumes\n   * records have unique ID's.\n   */\n  find (query, ignoreFilters) {\n    if (this._data.length === 0) {\n      return []\n    }\n\n    let resultSet = []\n    const me = this\n\n    switch (typeof query) {\n      case 'function':\n        resultSet = this._data.filter(query)\n        break\n      case 'number':\n        resultSet = (query < 0 || query >= this._data.length) ? null : this._data[query]\n        break\n      case 'string':\n        let indice = this.getIndices(this._data[0].idAttribute, query.trim())\n        if (indice !== null && indice.length > 0) {\n          indice.forEach(function (index) {\n            resultSet.push(me._data[index])\n          })\n          return resultSet\n        }\n\n        let recordSet = this._data.filter(function (record) {\n          return (record[record.idAttribute] || '').toString().trim() === query.trim()\n        })\n\n        resultSet = recordSet.length === 0 ? null : recordSet[0]\n\n        break\n      case 'object':\n        if (query instanceof NGN.DATA.Model) {\n          if (this.contains(query)) {\n            return query\n          }\n          return null\n        }\n\n        let match = []\n        let noindex = []\n        let queryKeys = Object.keys(query)\n\n        queryKeys.forEach(function (field) {\n          let index = me.getIndices(field, query[field])\n          if (index) {\n            match = match.concat(index || [])\n          } else {\n            field !== null && noindex.push(field)\n          }\n        })\n\n        // Deduplicate\n        match.filter(function (index, i) {\n          return match.indexOf(index) === i\n        })\n\n        // Get non-indexed matches\n        if (noindex.length > 0) {\n          resultSet = this._data.filter(function (record, i) {\n            if (match.indexOf(i) >= 0) {\n              return false\n            }\n            for (let x = 0; x < noindex.length; x++) {\n              if (record[noindex[x]] !== query[noindex[x]]) {\n                return false\n              }\n            }\n            return true\n          })\n        }\n\n        // If a combined indexable + nonindexable query\n        resultSet = resultSet.concat(match.map(function (index) {\n          return me._data[index]\n        })).filter(function (record) {\n          for (let y = 0; y < queryKeys.length; y++) {\n            if (query[queryKeys[y]] !== record[queryKeys[y]]) {\n              return false\n            }\n          }\n          return true\n        })\n        break\n      default:\n        resultSet = this._data\n    }\n\n    if (resultSet === null) {\n      return null\n    }\n\n    if (!NGN.coalesce(ignoreFilters, false)) {\n      this.applyFilters(resultSet instanceof Array ? resultSet : [resultSet])\n    }\n\n    return resultSet\n  }\n\n  /**\n   * @method applyFilters\n   * Apply filters to a data set.\n   * @param {array} data\n   * The array of data to apply filters to.\n   * @private\n   */\n  applyFilters (data) {\n    if (this._filters.length === 0) {\n      return data\n    }\n\n    this._filters.forEach(function (filter) {\n      data = data.filter(filter)\n    })\n\n    return data\n  }\n\n  /**\n   * @method addFilter\n   * Add a filter to the record set.\n   * @param {function} fn\n   * The filter function. This function should comply\n   * with the [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter) specification,\n   * returning a boolean value.\n   * The item passed to the filter will be the NGN.DATA.Model specified\n   * in the cfg#model.\n   * @fires filter.create\n   * Fired when a filter is created.\n   */\n  addFilter (fn) {\n    this._filters.push(fn)\n    this.emit('filter.create', fn)\n  }\n\n  /**\n   * @method removeFilter\n   * Remove a filter from the record set.\n   * @param {function|index} filter\n   * This can be the function which was originally passed to\n   * the #addFilter method, or the zero-based #filters index\n   * @param {boolean} [suppressEvents=false]\n   * Prevent events from firing one the creation of the filter.\n   * @fires filter.delete\n   * Fired when a filter is removed.\n   */\n  removeFilter (fn, suppressEvents) {\n    suppressEvents = NGN.coalesce(suppressEvents, false)\n\n    let removed = []\n\n    if (typeof fn === 'number') {\n      removed = this._filters.splice(fn, 1)\n    } else {\n      removed = this._filters.splice(this._filters.indexOf(fn), 1)\n    }\n\n    if (removed.length > 0 && !suppressEvents) {\n      this.emit('filter.delete', removed[0])\n    }\n  }\n\n  /**\n   * @method clearFilters\n   * Remove all filters.\n   * @param {boolean} [suppressEvents=false]\n   * Prevent events from firing one the removal of each filter.\n   */\n  clearFilters (suppressEvents) {\n    suppressEvents = NGN.coalesce(suppressEvents, false)\n\n    if (suppressEvents) {\n      this._filters = []\n      return\n    }\n\n    const me = this\n    while (this._filters.length > 0) {\n      me.emit('filter.delete', this._filters.pop())\n    }\n  }\n\n  /**\n   * @method deduplicate\n   * Deduplicates the recordset. This compares the checksum of\n   * each of the records to each other and removes duplicates.\n   * This suppresses the removal\n   * @param {boolean} [suppressEvents=true]\n   * Suppress the event that gets fired when a record is removed.\n   */\n  deduplicate (suppressEvents) {\n    suppressEvents = NGN.coalesce(suppressEvents, true)\n\n    let records = this.data.map(function (rec) {\n      return JSON.stringify(rec)\n    })\n\n    let dupes = []\n    const me = this\n\n    records.forEach(function (record, i) {\n      if (records.indexOf(record) < i) {\n        dupes.push(me.find(i))\n      }\n    })\n\n    dupes.forEach(function (duplicate) {\n      me.remove(duplicate)\n    })\n  }\n\n  /**\n   * @method sort\n   * Sort the #records. This forces a #reindex, which may potentially be\n   * an expensive operation on large data sets.\n   * @param {function|object} sorter\n   * Using a function is exactly the same as using the\n   * [Array.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FArray%2Fsort) method\n   * (this is the compare function). The arguments passed to the\n   * method are NGN.DATA.Model objects.\n   * Alternatively, it is possible to sort by one or more model\n   * attributes. Each attribute For example:\n   *\n   * ```js\n   * let Person = new NGN.DATA.Model({\n   *   fields: {\n   *     fname: null,\n   *     lname: null\n   *   }\n   * })\n   *\n   * let People = new NGN.DATA.Store({\n   *   model: Person\n   * })\n   *\n   * People.add({\n   *   fname: 'John',\n   *   lname: 'Doe',\n   *   age: 37\n   * }, {\n   *   fname: 'Jane',\n   *   lname: 'Doe',\n   *   age: 36\n   * }, {\n   *   fname: 'Jane',\n   *   lname: 'Vaughn',\n   *   age: 42\n   * })\n   *\n   * People.sort({\n   *   lname: 'asc',  // Sort by last name in normal alphabetical order.\n   *   age: 'desc'    // Sort by age, oldest to youngest.\n   * })\n   *\n   * People.records.forEach(function (p) {\n   *   console.log(fname, lname, age)\n   * })\n   *\n   * // DISPLAYS\n   * // John Doe 37\n   * // Jane Doe 36\n   * // Jane Vaughn 42\n   *\n   * People.sort({\n   *   age: 'desc',  // Sort by age, oldest to youngest.\n   *   lname: 'asc'  // Sort by name in normal alphabetical order.\n   * })\n   *\n   * People.records.forEach(function (p) {\n   *   console.log(fname, lname, age)\n   * })\n   *\n   * // DISPLAYS\n   * // Jane Vaughn 42\n   * // John Doe 37\n   * // Jane Doe 36\n   * ```\n   *\n   * It is also posible to provide complex sorters. For example:\n   *\n   * ```js\n   * People.sort({\n   *   lname: 'asc',\n   *   age: function (a, b) {\n   *     if (a.age < 40) {\n   *       return 1\n   *     }\n   *     return a.age < b.age\n   *   }\n   * })\n   * ```\n   *\n   * The sorter above says \"sort alphabetically by last name,\n   * then by age where anyone under 40yrs old shows up before\n   * everyone else, but sort the remainder ages in descending order.\n   */\n  sort (fn) {\n    if (typeof fn === 'function') {\n      this.records.sort(fn)\n    } else if (typeof fn === 'object') {\n      let functionKeys = Object.keys(fn)\n\n      this.records.sort(function (a, b) {\n        for (let i = 0; i < functionKeys.length; i++) {\n          // Make sure both objects have the same sorting key\n          if (a.hasOwnProperty(functionKeys[i]) && !b.hasOwnProperty(functionKeys[i])) {\n            return 1\n          }\n\n          if (!a.hasOwnProperty(functionKeys[i]) && b.hasOwnProperty(functionKeys[i])) {\n            return -1\n          }\n\n          // For objects who have the key, sort in the order defined in object.\n          if (a[functionKeys[i]] !== b[functionKeys[i]]) {\n            switch (fn[functionKeys[i]].toString().trim().toLowerCase()) {\n              case 'asc':\n                return a[functionKeys[i]] > b[functionKeys[i]] ? 1 : -1\n              case 'desc':\n                return a[functionKeys[i]] < b[functionKeys[i]] ? 1 : -1\n              default:\n                if (typeof fn[functionKeys[i]] === 'function') {\n                  return fn[functionKeys[i]](a, b)\n                }\n                return 0\n            }\n          }\n        }\n\n        // Everything is equal\n        return 0\n      })\n    }\n\n    this.reindex()\n  }\n\n  /**\n   * @method createIndex\n   * Add a simple index to the recordset.\n   * @param {string} datafield\n   * The #model data field to index.\n   * @param {boolean} [suppressEvents=false]\n   * Prevent events from firing on the creation of the index.\n   * @fires index.create\n   * Fired when an index is created. The datafield name and\n   * store are supplied as an argument to event handlers.\n   */\n  createIndex (field, suppressEvents) {\n    if (!this.model.hasOwnProperty(field)) {\n      console.warn('The store\\'s model does not contain a data field called %c' + field + '%c.', NGN.css, '')\n    }\n\n    let exists = this._index.hasOwnProperty(field)\n\n    this._index[field] = this._index[field] || []\n    if (!NGN.coalesce(suppressEvents, false) && !exists) {\n      this.emit('index.created', {\n        field: field,\n        store: this\n      })\n    }\n  }\n\n  /**\n   * @method deleteIndex\n   * Remove an index.\n   * @param {string} datafield\n   * The #model data field to stop indexing.\n   * @param {boolean} [suppressEvents=false]\n   * Prevent events from firing on the removal of the index.\n   * @fires index.delete\n   * Fired when an index is deleted. The datafield name and\n   * store are supplied as an argument to event handlers.\n   */\n  deleteIndex (field, suppressEvents) {\n    if (this._index.hasOwnProperty(field)) {\n      delete this._index[field]\n      if (!NGN.coalesce(suppressEvents, false)) {\n        this.emit('index.created', {\n          field: field,\n          store: this\n        })\n      }\n    }\n  }\n\n  /**\n   * @method clearIndices\n   * Clear all indices from the indexes.\n   */\n  clearIndices () {\n    const me = this\n\n    Object.keys(this._index).forEach(function (key) {\n      me._index[key] = []\n    })\n  }\n\n  /**\n   * @method deleteIndexes\n   * Remove all indexes.\n   * @param {boolean} [suppressEvents=true]\n   * Prevent events from firing on the removal of each index.\n   */\n  deleteIndexes (suppressEvents) {\n    suppressEvents = NGN.coalesce(suppressEvents, true)\n\n    const me = this\n\n    Object.keys(this._index).forEach(function (key) {\n      me.deleteIndex(key, suppressEvents)\n    })\n  }\n\n  /**\n   * @method applyIndices\n   * Apply the values to the index.\n   * @param {NGN.DATA.Model} record\n   * The record which should be applied to the index.\n   * @param {number} number\n   * The record index number.\n   * @private\n   */\n  applyIndices (record, number) {\n    let indexes = Object.keys(this._index)\n\n    if (indexes.length === 0) {\n      return\n    }\n\n    const me = this\n\n    indexes.forEach(function (field) {\n      if (record.hasOwnProperty(field)) {\n        let values = me._index[field]\n\n        // Check existing records for similar values\n        for (let i = 0; i < values.length; i++) {\n          if (values[i][0] === record[field]) {\n            me._index[field][i].push(number)\n            return\n          }\n        }\n\n        // No matching words, create a new one.\n        me._index[field].push([record[field], number])\n      }\n    })\n  }\n\n  /**\n   * @method unapplyIndices\n   * This removes a record from all relevant indexes simultaneously.\n   * Commonly used when removing a record from the store.\n   * @param  {number} indexNumber\n   * The record index.\n   * @private\n   */\n  unapplyIndices (num) {\n    const me = this\n\n    Object.keys(this._index).forEach(function (field) {\n      let i = me._index[field].indexOf(num)\n      if (i >= 0) {\n        me._index[field].splice(i, 1)\n      }\n    })\n  }\n\n  /**\n   * @method updateIndice\n   * Update the index with new values.\n   * @param  {string} fieldname\n   * The name of the indexed field.\n   * @param  {any} oldValue\n   * The original value. This is used to remove the old value from the index.\n   * @param  {any} newValue\n   * The new value.\n   * @param  {number} indexNumber\n   * The number of the record index.\n   * @private\n   */\n  updateIndice (field, oldValue, newValue, num) {\n    if (!this._index.hasOwnProperty(field) || oldValue === newValue) {\n      return\n    }\n\n    let ct = 0\n    const me = this\n\n    for (let i = 0; i < me._index[field].length; i++) {\n      let value = me._index[field][i][0]\n\n      if (value === oldValue) {\n        me._index[field][i].splice(me._index[field][i].indexOf(num), 1)\n        ct++\n      } else if (newValue === undefined) {\n        // If thr new value is undefined, the field was removed for the record.\n        // This can be skipped.\n        ct++\n      } else if (value === newValue) {\n        me._index[field][i].push(num)\n        me._index[field][i].shift()\n        me._index[field][i].sort()\n        me._index[field][i].unshift(value)\n        ct++\n      }\n\n      if (ct === 2) {\n        return\n      }\n    }\n  }\n\n  /**\n   * @method getIndices\n   * Retrieve a list of index numbers pertaining to a field value.\n   * @param  {string} field\n   * Name of the data field.\n   * @param  {any} value\n   * The value of the index to match against.\n   * @return {array}\n   * Returns an array of integers representing the index where the\n   * values exist in the record set.\n   */\n  getIndices (field, value) {\n    if (!this._index.hasOwnProperty(field)) {\n      return null\n    }\n\n    let indexes = this._index[field].filter(function (dataArray) {\n      return dataArray.length > 0 && dataArray[0] === value\n    })\n\n    if (indexes.length === 1) {\n      indexes[0].shift()\n      return indexes[0]\n    }\n\n    return []\n  }\n\n  /**\n   * @method reindex\n   * Reindex the entire record set. This can be expensive operation.\n   * Use with caution.\n   * @private\n   */\n  reindex () {\n    this.clearIndices()\n    const me = this\n    this._data.forEach(function (record, index) {\n      me.applyIndices(record, index)\n    })\n  }\n}\n\n/**\n * indexes\n * An index consists of an object whose key is name of the\n * data field being indexed. The value is an array of record values\n * and their corresponding index numbers. For example:\n *\n * ```js\n * {\n *   \"lastname\": [[\"Butler\", 0, 1, 3], [\"Doe\", 2, 4]]\n * }\n * ```\n * The above example indicates the store has two unique `lastname`\n * values, \"Butler\" and \"Doe\". Records containing a `lastname` of\n * \"Butler\" exist in the record store as the first, 2nd, and 4th\n * records. Records with the last name \"Doe\" are 3rd and 5th.\n * Remember indexes are zero based since records are stored as an\n * array.\n */\n\nNGN.DATA.Store = Store\n","'use strict'\n\n/**\n * @class NGN.DATA.Proxy\n * Provides a gateway to remote services such as HTTP and\n * websocket endpoints. This can be used directly to create\n * custom proxies. However; NGN.DATA.HttpProxy and NGN.DATA.WebSocketProxy\n * are also available for use.\n */\nclass Proxy extends NGN.EventEmitter {\n  constructor (config) {\n    config = config || {}\n\n    if (!config.store) {\n      throw new Error('NGN.DATA.Proxy requires a NGN.DATA.Store.')\n    }\n\n    super()\n\n    config.store.proxy = this\n\n    Object.defineProperties(this, {\n      /**\n       * @configproperty {NGN.DATA.Store} store (required)\n       * THe store for data being proxied.\n       */\n      store: NGN.const(config.store),\n\n      /**\n       * @configproperty {string} [url=http://localhost\n       * The root URL for making network requests (HTTP/WS/TLS).\n       */\n      url: NGN.public(config.url || 'http://localhost'),\n\n      /**\n       * @config {string} username\n       * If using basic authentication, provide this as the username.\n       */\n      username: NGN.public(config.username || null),\n\n      /**\n       * @config {string} password\n       * If using basic authentication, provide this as the password.\n       */\n      password: NGN.public(config.password || null),\n\n      /**\n       * @config {string} token\n       * If using an access token, provide this as the value. This\n       * will override basic authentication (#username and #password\n       * are ignored). This sets an `Authorization: Bearer <token>`\n       * HTTP header.\n       */\n      token: NGN.public(config.token || null)\n    })\n  }\n\n  /**\n   * @property actions\n   * A list of the record changes that have occurred.\n   * @returns {object}\n   * An object is returned with 3 keys representative of the\n   * action taken:\n   *\n   * ```js\n   * {\n   *   create: [NGN.DATA.Model, NGN.DATA.Model],\n   *   update: [NGN.DATA.Model],\n   *   delete: []\n   * }\n   * ```\n   *\n   * The object above indicates two records have been created\n   * while one record was modified and no records were deleted.\n   * **NOTICE:** If you add or load a JSON object to the store\n   * (as opposed to adding an instance of NGN.DATA.Model), the\n   * raw object will be returned. It is also impossible for the\n   * data store/proxy to determine if these have changed since\n   * the NGN.DATA.Model is responsible for tracking changes to\n   * data objects.\n   * @private\n   */\n  get actions () {\n    const me = this\n    return {\n      create: this.store._created,\n      update: this.store.records.filter(function (record) {\n        if (me.store._created.indexOf(record) < 0 && me.store._deleted.indexOf(record) < 0) {\n          return false\n        }\n        return record.modified\n      }).map(function (record) {\n        return record\n      }),\n      delete: this.store._deleted\n    }\n  }\n\n  save () {\n    console.warn('Save should be overridden by a proxy implementation class.')\n  }\n\n  fetch () {\n    console.warn('Fetch should be overridden by a proxy implementation class.')\n  }\n}\n\nObject.defineProperty(NGN.DATA, 'Proxy', NGN.const(Proxy))\n"],"sourceRoot":"/source/"}