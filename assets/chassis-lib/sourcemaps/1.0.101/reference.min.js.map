{"version":3,"sources":["reference.js"],"names":["NGN","ref","requireBUS","trigger","event","scope","nm","preventDefault","undefined","BUS","console","error","coalesce","fn","e","emit","addEventListener","qs","value","selector","all","document","trim","Object","defineProperties","this","keys","define","_find","reference","find","length","tmpref","parentNode","querySelectorAll","html","els","result","hasOwnProperty","isArray","get","defineProperty","apply","arguments","base","slice","querySelector","evt","el","removeEventListener","forward","create","enumerble","writable","configurable","key","_value","Error","cleankey","cleanKey","me","enumerable","set","val","remove","ck","replace","json","obj","forEach","indexOf","toLowerCase"],"mappings":"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","file":"reference.min.js","sourcesContent":["/**\n * @class NGN.ref\n * A global \"pointer\" to DOM elements. This is used to reference and manipulate\n * DOM elements in a simple and standard way, without restricting native functionality.\n */\n'use strict'\n\nNGN.ref = new function () {\n  var requireBUS = function (trigger, event, scope, nm, preventDefault) {\n    if (NGN.BUS === undefined) {\n      return console.error('The event BUS is required for ' + nm + '().')\n    }\n    preventDefault = NGN.coalesce(preventDefault, false)\n    var fn = function (e) {\n      if (preventDefault && e.preventDefault) {\n        e.preventDefault()\n      }\n      NGN.BUS.emit(event, e)\n    }\n    scope.addEventListener(trigger, fn)\n  }\n\n  var qs = function (value, selector, all) {\n    if (typeof value === 'string') {\n      return document[all ? 'querySelector' : 'querySelectorAll']((value + ' > ' + selector).trim())\n    }\n    return value[all ? 'querySelector' : 'querySelectorAll'](selector.trim())\n  }\n\n  Object.defineProperties(this, {\n\n    keys: NGN.define(false, true, false, {}),\n\n    _find: NGN.define(false, false, false, function (value, selector) {\n      if (typeof value === 'string') {\n        var reference = NGN.ref.find((value + ' > ' + selector).trim())\n        if (reference.length === 0) {\n          var tmpref = NGN.ref.find((value).trim())[0].parentNode.querySelectorAll(selector)\n          if (tmpref.length > 0) {\n            if (tmpref.length === 1) {\n              return tmpref[0]\n            }\n            return tmpref\n          }\n        }\n        return reference\n      }\n      return NGN.ref.find(value.querySelectorAll(selector))\n    }),\n\n    /**\n     * @method find\n     * Retrieve the DOM element(s) for the given selector. This method provides\n     * an **unmanaged** reference object.\n     * @private\n     * @param {String} selector\n     * The selector (CSS-style).\n     * @returns {ref}\n     * Returns an instance of the reference.\n     */\n    find: NGN.define(false, false, false, function (value) {\n      var html = typeof value !== 'string'\n      var els = html === false ? document.querySelectorAll(value) : value\n      var result = null\n\n      if (els.length === 1) {\n        if (!els[0].hasOwnProperty('isArray')) {\n          Object.defineProperties(els[0], {\n            isArray: NGN.get(function () {\n              return false\n            }, false)\n          })\n        }\n\n        if (!els[0].hasOwnProperty('find')) {\n          Object.defineProperty(els[0], 'find', NGN.const(function (selector) {\n            return NGN.ref._find(value, selector)\n          }))\n        }\n\n        if (!els[0].hasOwnProperty('forward')) {\n          Object.defineProperty(els[0], 'forward', NGN.const(function (trigger, event) {\n            requireBUS(trigger, event, this, 'forward')\n          }))\n        }\n\n        if (!els[0].hasOwnProperty('on')) {\n          Object.defineProperty(els[0], 'on', NGN.const(function () {\n            this.addEventListener.apply(this, arguments)\n          }))\n        }\n\n        result = els[0]\n      } else {\n        var base = NGN.slice(els)\n        if (NGN.typeof(els) === 'nodelist' && base.length === 1) {\n          base = base[0]\n        }\n\n        // Apply querySelector/All to the response for chaining.\n        Object.defineProperties(base, {\n          querySelector: NGN.define(false, false, false, function (selector) {\n            qs(value, selector)\n          }),\n\n          querySelectorAll: NGN.define(false, false, false, function (selector) {\n            qs(value, selector, true)\n          }),\n\n          addEventListener: NGN.define(false, false, false, function (evt, fn) {\n            for (var el = 0; el < this.length; el++) {\n              this[el].addEventListener(evt, fn)\n            }\n          }),\n\n          removeEventListener: NGN.define(false, false, false, function (evt, fn) {\n            for (var el = 0; el < this.length; el++) {\n              this[el].removeEventListener(evt, fn)\n            }\n          }),\n\n          find: NGN.const(function (selector) {\n            return NGN.ref._find(value, selector)\n          }),\n\n          isArray: NGN.get(function () {\n            return true\n          }, false),\n\n          forward: NGN.define(false, false, false, function (trigger, event) {\n            requireBUS(trigger, event, this, 'forward')\n          })\n        })\n        result = base\n      }\n\n      return result\n    }),\n\n    /**\n     * @method create\n     * Add a reference.\n     * @param {String} [key]\n     * The key/name of the reference. For example, if this is `myElement`,\n     * then `ref.myElement` will return a pointer to this reference.\n     * @param {string} selector\n     * The CSS selector path.\n     */\n    create: {\n      enumerble: true,\n      writable: false,\n      configurable: false,\n      value: function (key, value) {\n        // If the key is not provided but the value is a DOM element, make\n        // an ephemeral reference.\n        if (!value && typeof key !== 'string') {\n          return this.find(key)\n        }\n\n        // Basic error checking\n        if (typeof key !== 'string' && typeof key !== 'number') {\n          throw new Error('Cannot add a non-alphanumeric selector reference.')\n        }\n        if (key.trim().length === 0) {\n          throw new Error('Cannot add a blank selector reference.')\n        }\n        if (value === undefined || value === null || value.trim().length === 0) {\n          throw new Error('Cannot create a null/undefined selector reference.')\n        }\n\n        // Create a reference object\n        var cleankey = this.cleanKey(key)\n        var me = this\n        Object.defineProperty(NGN.ref, cleankey, NGN.private(value))\n\n        Object.defineProperty(NGN.ref, key, {\n          enumerable: true,\n          get: function () {\n            return me.find(value)\n          },\n          set: function (val) {\n            if (val === undefined || val === null || val.trim().length === 0) {\n              throw new Error('Cannot create a null/undefined selector reference.')\n            }\n            NGN.ref[cleankey] = val\n          }\n        })\n\n        this.keys[key] = value\n        this.keys[this.cleanKey(key)] = value\n      }\n    },\n\n    /**\n     * @method remove\n     * Removes a key from the reference manager.\n     */\n    remove: NGN.const(function (key) {\n      if (this.key) {\n        delete this.key\n        delete this.keys[key]\n      }\n      var ck = this.cleanKey(key)\n      if (this[ck]) {\n        delete this[ck]\n        delete this.keys[ck]\n      }\n    }),\n\n    /**\n     * @method cleanKey\n     * Creates a clean version of the key used to uniquely identify the reference.\n     * @private\n     * @param {String} key\n     * The key to clean.\n     */\n    cleanKey: NGN.define(false, false, false, function (key) {\n      return key.replace(/[^A-Za-z0-9\\_\\#\\$\\@\\-\\+]/gi, '') + key.length\n    }),\n\n    /**\n     * @property json\n     * A JSON representation of the managed keys and their associated selectors.\n     * @returns {Object}\n     * A key:selector object.\n     */\n    json: {\n      enumerable: true,\n      get: function () {\n        var me = this\n        var obj = {}\n\n        Object.keys(this).forEach(function (el) {\n          if (me.hasOwnProperty(el) && ['json', 'find', 'remove'].indexOf(el.trim().toLowerCase()) < 0 && typeof me[el] !== 'function') {\n            obj[el] = me.keys[el]\n          }\n        })\n        return obj\n      }\n    }\n  })\n}()\n"],"sourceRoot":"/source/"}