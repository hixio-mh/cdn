{"version":3,"sources":["utility.js"],"names":["NGN","DATA","util","Object","defineProperties","crcTable","makeCRCTable","privateconst","c","n","k","checksum","str","this","crc","i","length","charCodeAt","GUID","lut","toString","d0","Math","random","d1","d2","d3"],"mappings":";;;;AAAA,YAEAA,KAAAC,KAAAD,IAAAC,SACAD,IAAAC,KAAAC,QAEAC,OAAAC,iBAAAJ,IAAAC,KAAAC,MAEAG,SAAAL,IAAAA,WAAA,MASAM,aAAAN,IAAAO,aAAA,WAGA,IAAA,GAFAC,GAAA,OACAH,KACAI,EAAA,EAAAA,EAAA,IAAAA,IAAA,CACAD,EAAAC,CACA,KAAA,GAAAC,GAAA,EAAAA,EAAA,EAAAA,IACAF,EAAA,EAAAA,EAAA,WAAAA,IAAA,EAAAA,IAAA,CAEAH,GAAAI,GAAAD,EAEA,MAAAH,KAWAM,SAAAX,IAAAA,SAAA,SAAAY,GAIA,IAAA,GAHAP,GAAAQ,KAAAR,WAAAQ,KAAAR,SAAAQ,KAAAP,gBACAQ,KAEAC,EAAA,EAAAA,EAAAH,EAAAI,OAAAD,IACAD,EAAAA,IAAA,EAAAT,EAAA,KAAAS,EAAAF,EAAAK,WAAAF,IAGA,QAAAD,QAAA,IAeAI,KAAAlB,IAAAA,SAAA,WAEA,IAAA,GADAmB,MACAJ,EAAA,EAAAA,EAAA,IAAAA,IACAI,EAAAJ,IAAAA,EAAA,GAAA,IAAA,IAAAA,EAAAK,SAAA,GAGA,IAAAC,GAAA,WAAAC,KAAAC,SAAA,EACAC,EAAA,WAAAF,KAAAC,SAAA,EACAE,EAAA,WAAAH,KAAAC,SAAA,EACAG,EAAA,WAAAJ,KAAAC,SAAA,CAEA,OAAAJ,GAAA,IAAAE,GAAAF,EAAAE,GAAA,EAAA,KAAAF,EAAAE,GAAA,GAAA,KAAAF,EAAAE,GAAA,GAAA,KACA,IAAAF,EAAA,IAAAK,GAAAL,EAAAK,GAAA,EAAA,KAAA,IAAAL,EAAAK,GAAA,GAAA,GAAA,IACAL,EAAAK,GAAA,GAAA,KAAA,IAAAL,EAAA,GAAAM,EAAA,KAAAN,EAAAM,GAAA,EAAA,KAAA,IACAN,EAAAM,GAAA,GAAA,KAAAN,EAAAM,GAAA,GAAA,KAAAN,EAAA,IAAAO,GAAAP,EAAAO,GAAA,EAAA,KACAP,EAAAO,GAAA,GAAA,KAAAP,EAAAO,GAAA,GAAA","file":"utility.min.js","sourcesContent":["'use strict'\n\nNGN.DATA = NGN.DATA || {}\nNGN.DATA.util = {}\n\nObject.defineProperties(NGN.DATA.util, {\n  // CRC table for checksum (cached)\n  crcTable: NGN.private(null),\n\n  /**\n   * @method makeCRCTable\n   * Generate the CRC table for checksums. This is a fairly complex\n   * operation that should only be executed once and cached for\n   * repeat use.\n   * @private\n   */\n  makeCRCTable: NGN.privateconst(function () {\n    let c\n    let crcTable = []\n    for (let n = 0; n < 256; n++) {\n      c = n\n      for (let k = 0; k < 8; k++) {\n        c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1))\n      }\n      crcTable[n] = c\n    }\n    return crcTable\n  }),\n\n  /**\n   * @method checksum\n   * Create the checksum of the specified string.\n   * @param  {string} content\n   * The content to generate a checksum for.\n   * @return {string}\n   * Generates a checksum value.\n   */\n  checksum: NGN.const(function (str) {\n    let crcTable = this.crcTable || (this.crcTable = this.makeCRCTable())\n    let crc = 0 ^ (-1)\n\n    for (let i = 0; i < str.length; i++) {\n      crc = (crc >>> 8) ^ crcTable[(crc ^ str.charCodeAt(i)) & 0xFF]\n    }\n\n    return (crc ^ (-1)) >>> 0\n  }),\n\n  /**\n   * @method GUID\n   * Generate  a globally unique identifier.\n   *\n   * This is a \"fast\" GUID generator, designed to work in the browser.\n   * The likelihood of an ID collision is 1:3.26x10^15 (1 in 3.26 Quadrillion),\n   * and it will generate the ID between approximately 105ms (Desktop) and 726ms\n   * (Android) as of May 2016. This code came from StackOverflow, courtesy of\n   * an answer from Jeff Ward.\n   * @return {string}\n   * Returns a V4 GUID.\n   */\n  GUID: NGN.const(function () {\n    let lut = []\n    for (var i = 0; i < 256; i++) {\n      lut[i] = (i < 16 ? '0' : '') + (i).toString(16)\n    }\n\n    const d0 = Math.random() * 0xffffffff | 0\n    const d1 = Math.random() * 0xffffffff | 0\n    const d2 = Math.random() * 0xffffffff | 0\n    const d3 = Math.random() * 0xffffffff | 0\n\n    return lut[d0 & 0xff] + lut[d0 >> 8 & 0xff] + lut[d0 >> 16 & 0xff] + lut[d0 >> 24 & 0xff] +\n      '-' + lut[d1 & 0xff] + lut[d1 >> 8 & 0xff] + '-' + lut[d1 >> 16 & 0x0f | 0x40] +\n      lut[d1 >> 24 & 0xff] + '-' + lut[d2 & 0x3f | 0x80] + lut[d2 >> 8 & 0xff] + '-' +\n      lut[d2 >> 16 & 0xff] + lut[d2 >> 24 & 0xff] + lut[d3 & 0xff] + lut[d3 >> 8 & 0xff] +\n      lut[d3 >> 16 & 0xff] + lut[d3 >> 24 & 0xff]\n  })\n})\n"],"sourceRoot":"/source/"}