{"version":3,"sources":["listinput.js"],"names":["Object","defineProperties","window","chassis","listinput","enumerable","writable","configurable","value","me","this","core","spliceArgs","arguments","forEach","element","document","querySelectorAll","el","applyListInput","HTMLElement","console","warn","log","datalist","deduplicateInput","attributes","hasOwnProperty","getAttribute","addEventListener","e","code","submit","filesource","get","inputField","browse","click","callback","inputData","splitInput","length","deduplicate","emit","input","replace","separator","RegExp","split","map","toString","trim","filter","i","a","indexOf"],"mappings":";;;;AAAA,YAMAA,QAAAC,iBAAAC,OAAAC,SACAC,WACAC,YAAA,EACAC,UAAA,EACAC,cAAA,EACAC,MAAA,WACA,GAAAC,GAAAC,IACAP,SAAAQ,KAAAC,WAAAC,WAAAC,QAAA,SAAAC,GACA,gBAAAA,GACAC,SAAAC,iBAAAF,GAAAD,QAAA,SAAAI,GACAT,EAAAU,eAAAD,KAEAH,YAAAK,aACAX,EAAAU,eAAAJ,IAEAM,QAAAC,KAAA,6FACAD,QAAAE,IAAAR,QAMAI,gBACAd,YAAA,EACAC,UAAA,EACAC,cAAA,EACAC,MAAA,SAAAO,GACAZ,QAAAqB,SAAAT,GAEAf,OAAAC,iBAAAc,GAKAU,kBACApB,YAAA,EACAC,UAAA,EACAC,cAAA,EACAC,MAAAO,EAAAW,WAAAC,eAAA,oBACA,SAAAZ,EAAAa,aAAA,qBACAb,EAAAW,WAAAC,eAAA,gBAAA,SAAAZ,EAAAa,aAAA,kBAIAb,EAAAc,iBAAA,QAAA,SAAAC,GACA,UAAAA,EAAAC,MACAhB,EAAAiB,WAIAhC,OAAAC,iBAAAc,GAIAkB,YACA5B,YAAA,EACA6B,IAAA,WAEA,MAAAnB,KASAoB,YACA9B,YAAA,EACA6B,IAAA,WACA,MAAAnB,KAQAqB,QACA5B,MAAA,WACA,SAAAE,KAAAkB,aAAA,SACAlB,KAAAuB,WAAAI,UAWAL,QACA3B,YAAA,EACAG,MAAA,SAAA8B,GACA,GAAAC,GAAA7B,KAAA8B,WAAA9B,KAAAyB,WAAA3B,MAEA,OAAA,KAAA+B,EAAAE,YACA/B,KAAAyB,WAAA3B,MAAA,KAIAE,KAAAe,mBACAc,EAAApC,QAAAQ,KAAA+B,YAAAH,IAGA7B,KAAAyB,WAAA3B,MAAA,QAEA,IAAA+B,EAAAE,QAIAtC,QAAAQ,KAAAgC,KAAAjC,KAAA,SAAA6B,OAYAC,YACAnC,YAAA,EACAG,MAAA,SAAAoC,GACA,GAAAnC,GAAAC,IAkBA,OAhBAkC,GAAAA,EACAC,QAAAnC,KAAAoC,oBAAAC,QAAArC,KAAAoC,UAAA,GAAAC,QAAArC,KAAAoC,UAAA,WAAA,MAAApC,KAAAoC,WACAE,MAAAtC,KAAAoC,WACAG,IAAA,SAAAzC,GACA,MAAAA,GAAA0C,WAAAC,SAEAC,OAAA,SAAA5C,EAAA6C,EAAAC,GACA,QAAA7C,EAAAgB,kBACA6B,EAAAC,QAAA/C,KAAA6C,IAKA7C,EAAA0C,WAAAT,OAAA","file":"listinput.min.js","sourcesContent":["'use strict'\n\n/**\n * @mixin listinput\n * A mixin that manages a list of input data.\n */\nObject.defineProperties(window.chassis, {\n  listinput: {\n    enumerable: true,\n    writable: false,\n    configurable: false,\n    value: function () {\n      var me = this\n      chassis.core.spliceArgs(arguments).forEach(function (element) {\n        if (typeof element === 'string') {\n          document.querySelectorAll(element).forEach(function (el) {\n            me.applyListInput(el)\n          })\n        } else if (element instanceof HTMLElement) {\n          me.applyListInput(element)\n        } else {\n          console.warn('Could not apply listinput to element. Element is not a valid HTMLElement or CSS selector.')\n          console.log(element)\n        }\n      })\n    }\n  },\n\n  applyListInput: {\n    enumerable: false,\n    writable: false,\n    configurable: false,\n    value: function (element) {\n      chassis.datalist(element)\n\n      Object.defineProperties(element, {\n        /**\n         * @attribute {boolean} [deduplicateInput=true]\n         * Ignore duplicate values in the input field.\n         */\n        deduplicateInput: {\n          enumerable: false,\n          writable: true,\n          configurable: false,\n          value: element.attributes.hasOwnProperty('deduplicateInput')\n            ? element.getAttribute('deduplicateInput') === 'true'\n            : (element.attributes.hasOwnProperty('deduplicate') ? element.getAttribute('deduplicate') === 'true' : true)\n        }\n      })\n\n      element.addEventListener('keyup', function (e) {\n        if (e.code === 'Enter') {\n          element.submit()\n        }\n      })\n\n      Object.defineProperties(element, {\n        // This is a placeholder. When this is converted\n        // to a web component, the filesource will be within\n        // the shadow root.\n        filesource: {\n          enumerable: true,\n          get: function () {\n            // this.shadowRoot.lastChild\n            return element\n          }\n        },\n\n        /**\n         * @property inputField\n         * A reference to the input field.\n         * @private\n         */\n        inputField: {\n          enumerable: true,\n          get: function () {\n            return element\n          }\n        },\n\n        /**\n         * @method browse\n         * Browse for files.\n         */\n        browse: {\n          value: function () {\n            if (this.getAttribute('type') === 'file') {\n              this.filesource.click()\n            }\n          }\n        },\n\n        /**\n         * @method submit\n         * This method applies any data in the input field to the\n         * list. Depending on how the component is configured, it\n         * will deduplicate data.\n         */\n        submit: {\n          enumerable: false,\n          value: function (callback) {\n            var inputData = this.splitInput(this.inputField.value)\n\n            if (inputData.length === 0) {\n              this.inputField.value = ''\n              return\n            }\n\n            if (this.deduplicateInput) {\n              inputData = chassis.core.deduplicate(inputData)\n            }\n\n            this.inputField.value = ''\n\n            if (inputData.length === 0) {\n              return\n            }\n\n            chassis.core.emit(this, 'submit', inputData)\n          }\n        },\n\n        /**\n         * @method splitInput\n         * Separates the input data into an array, optionally applying\n         * deduplication filters when applicable.\n         * @param {string} input\n         * The text data to split.\n         * @private\n         */\n        splitInput: {\n          enumerable: false,\n          value: function (input) {\n            var me = this\n\n            input = input\n              .replace(this.separator instanceof RegExp ? this.separator : new RegExp(this.separator + '{1,1000}', 'gi'), this.separator)\n              .split(this.separator)\n              .map(function (value) {\n                return value.toString().trim()\n              })\n              .filter(function (value, i, a) {\n                if (me.deduplicateInput) {\n                  if (a.indexOf(value) !== i) {\n                    return false\n                  }\n                }\n\n                return value.toString().length > 0\n              })\n\n            return input\n          }\n        }\n      })\n    }\n  }\n})\n"],"sourceRoot":"/source/"}