{"version":3,"sources":["datalist.js"],"names":["Object","defineProperties","window","chassis","datalist","enumerable","writable","configurable","value","me","this","core","spliceArgs","arguments","forEach","element","document","querySelectorAll","el","applyDataList","HTMLElement","console","warn","log","listData","separator","attributes","hasOwnProperty","getAttribute","deduplicate","data","get","add","length","Error","args","newItems","filter","item","indexOf","concat","emit","created","deleted","modified","remove","clear","removed","index","push","originalData","setItem","_value","oldValue","old","new","_value2","x"],"mappings":"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","file":"datalist.min.js","sourcesContent":["'use strict'\n\n/**\n * @mixin datalist\n * A mixin that maintains a small and simple dataset.\n * This is typically used as a foundaiton for list components.\n * @fires create\n * A payload is sent with the data that was added to the list.\n *\n * **Example**\n *\n * ```js\n * {\n *   detail: {\n *   \t data: ['item1', 'item2']\n *   }\n * }\n * ```\n * @fires update\n * Triggered whenever the list is modified. The modifications are\n * delivered to event handlers.\n *\n * ```js\n * {\n *   detail: {\n *     created: ['item1', 'item2'], // The values added to the list.\n *     deleted: ['item1', 'item2'], // The values removed from the list.\n *     modified: [                  // The modified values.\n *     \t {old: 'item1', new: 'item1_changed', index: 0},\n *     \t {old: 'item2', new: 'item2_changed', index: 1}\n *     ]\n *   }\n * }\n * ```\n * @fires remove\n * Triggered when data is removed from the list.\n *\n * **Example Payload**\n * ```js\n * {\n *   detail: {\n *     data: ['item1', 'item2']\n *   }\n * }\n * ```\n * @fires modify\n * Triggered when a list data item is changed.\n *\n * **Example Payload**\n * ```js\n * {\n *   detail: {\n *     index: 0, // First item in the list.\n *     old: 'oldValue',\n *     new: 'newValue' // Current value.\n *   }\n * }\n * ```\n */\nObject.defineProperties(window.chassis, {\n  datalist: {\n    enumerable: true,\n    writable: false,\n    configurable: false,\n    value: function () {\n      var me = this\n\n      chassis.core.spliceArgs(arguments).forEach(function (element) {\n        if (typeof element === 'string') {\n          document.querySelectorAll(element).forEach(function (el) {\n            me.applyDataList(el)\n          })\n        } else if (element instanceof HTMLElement) {\n          me.applyDataList(element)\n        } else {\n          console.warn('Could not apply datalist to element. Element is not a valid HTMLElement or CSS selector.')\n          console.log(element)\n        }\n      })\n    }\n  },\n\n  applyDataList: {\n    enumerable: false,\n    writable: false,\n    configurable: false,\n    value: function (element) {\n      Object.defineProperties(element, {\n        listData: {\n          enumerable: false,\n          writable: true,\n          configurable: false,\n          value: []\n        },\n\n        /**\n         * @attribute {string|regexp} [separator=,]\n         * The character used to separate list items. By default, this is a comma.\n         * This can also be a regular expression.\n         */\n        separator: {\n          enumerable: false,\n          writable: true,\n          configurable: false,\n          value: element.attributes.hasOwnProperty('separator') ? element.getAttribute('separator') : ','\n        },\n\n        /**\n         * @attribute {boolean} [deduplicate=true]\n         * Setting to `true` (default) assures the list data contains no duplicate\n         * values. Whatever value is defined for this becomes the default for\n         * #deduplicateInput.\n         * @type {Object}\n         */\n        deduplicate: {\n          enumerable: false,\n          writable: true,\n          configurable: false,\n          value: element.attributes.hasOwnProperty('deduplicate') ? element.getAttribute('deduplicate') === 'true' : true\n        }\n      })\n\n      Object.defineProperties(element, {\n        /**\n         * @property {array} data\n         * The list data.\n         * @readonly\n         */\n        data: {\n          enumerable: true,\n          get: function () {\n            return this.listData\n          }\n        },\n\n        /**\n         * @method add\n         * Append data items to the list. This method can take any number\n         * of data item arguments. It can also take a single array argument.\n         *\n         * **Example**\n         *\n         * ```js\n         * mylist.add('item1', 'item2', 'more items')\n         *\n         * // OR\n         *\n         * mylist.add(['item1', 'item2', 'more items'])\n         * ```\n         * @param {array} [items]\n         * An array of items.\n         */\n        add: {\n          enumerable: true,\n          value: function () {\n            if (arguments.length === 0) {\n              throw new Error('addData requires at least one argument.')\n            }\n\n            var args = chassis.core.spliceArgs(arguments)\n\n            if (this.deduplicate) {\n              args = chassis.core.deduplicate(args)\n            }\n\n            var me = this\n            var newItems = args.filter(function (item) {\n              return me.listData.indexOf(item) < 0\n            })\n\n            this.listData = this.listData.concat(args)\n\n            chassis.core.emit(this, 'create', {data: newItems})\n            chassis.core.emit(this, 'update', {\n              created: newItems,\n              deleted: [],\n              modified: []\n            })\n          }\n        },\n\n        /**\n         * @method remove\n         * Remove the item at a specified index or indexes. Pass `-1` or `null`\n         * to remove everything.\n         *\n         * **Example**\n         *\n         * ```js\n         * mylist.remove(null) // Removes everything (same as clear())\n         * mylist.remove(-1) // Removes everything (same as clear())\n         * mylist.remove(0) // Removes the first list item.\n         * mylist.remove(0, 3) // Remove the first and fourth list items.\n         * ```\n         * @param {number[]} index\n         */\n        remove: {\n          enumerable: true,\n          value: function () {\n            if (arguments.length === 0) {\n              return this.clear()\n            } else if (arguments[0] === null || arguments[0] === -1) {\n              return this.clear()\n            }\n\n            var args = chassis.core.spliceArgs(arguments)\n            var removed = []\n\n            this.listData = this.listData.filter(function (data, index) {\n              if (args.indexOf(index) < 0) {\n                return true\n              }\n\n              removed.push(data)\n              return false\n            })\n\n            chassis.core.emit(this, 'delete', {data: removed})\n            chassis.core.emit(this, 'update', {\n              created: [],\n              deleted: removed,\n              modified: []\n            })\n          }\n        },\n\n        /**\n         * @method clear\n         * Removes all items from the data list.\n         */\n        clear: {\n          enumerable: true,\n          value: function () {\n            var originalData = this.listData\n\n            this.listData = []\n\n            chassis.core.emit(this, 'remove', {data: originalData})\n            chassis.core.emit(this, 'update', {\n              created: [],\n              deleted: originalData,\n              modified: []\n            })\n          }\n        },\n\n        /**\n         * @method setItem\n         * Modify a specific data list value at a given index.\n         * @param {number} index\n         * The index of the item within the list (0-based indexing).\n         */\n        setItem: {\n          enumerable: true,\n          value: function (index, value) {\n            if (index >= this.listData.length || index < 0) {\n              throw new Error('Index out of bounds. Must be between 0 and the size of the list (current max value: ' + (this.listData.length === 0 ? 0 : (this.listData.length - 1)) + ')')\n            }\n\n            var oldValue = this.listData[index]\n            this.listData[index] = value\n\n            chassis.core.emit(this, 'modify', {\n              index: index,\n              old: oldValue,\n              new: this.listData[index]\n            })\n\n            chassis.core.emit(this, 'update', {\n              created: [],\n              deleted: [],\n              modified: [{old: oldValue, new: this.listData[index], index: index}]\n            })\n          }\n        },\n\n        /**\n         * @method indexOf\n         * Identifies the first index of a value within the list.\n         * @param {any} value\n         * The value to return from the list.\n         * @return {number}\n         * Returns the index of the value within the data set.\n         * Returns `-1` if the value is not found.\n         */\n        indexOf: {\n          enumerable: true,\n          writable: false,\n          configurable: false,\n          value: function (value) {\n            var index = -1\n            for (var x = 0; x < this.listData.length; x++) {\n              if (this.listData[x] === value) {\n                index = x\n                break\n              }\n            }\n            return index\n          }\n        }\n      })\n    }\n  }\n})\n"],"sourceRoot":"/source/"}