{"version":3,"sources":["listinput.js"],"names":["Object","defineProperties","window","chassis","listinput","enumerable","writable","configurable","value","me","this","core","spliceArgs","arguments","forEach","element","document","querySelectorAll","el","applyListInput","HTMLElement","console","warn","log","getObjectPrototype","listData","separator","attributes","hasOwnProperty","getAttribute","deduplicate","deduplicateInput","list","querySelector","Error","createChildDomMonitor","detail","emit","addEventListener","e","code","submit","data","get","filesource","inputField","browse","click","inputData","splitInput","length","append","input","replace","RegExp","split","map","toString","trim","filter","i","a","indexOf","args","concat","created","deleted","modified","remove","clear","removed","index","push","originalData","setItem","_value","oldValue","old","new","_value2","x"],"mappings":";;;;AAAA,YA0DAA,QAAAC,iBAAAC,OAAAC,SACAC,WACAC,YAAA,EACAC,UAAA,EACAC,cAAA,EACAC,MAAA,WACA,GAAAC,GAAAC,IACAP,SAAAQ,KAAAC,WAAAC,WAAAC,QAAA,SAAAC,GACA,gBAAAA,GACAC,SAAAC,iBAAAF,GAAAD,QAAA,SAAAI,GACAT,EAAAU,eAAAD,KAEAH,YAAAK,aACAX,EAAAU,eAAAJ,IAEAM,QAAAC,KAAA,6FACAD,QAAAE,IAAAR,QAMAI,gBACAd,YAAA,EACAC,UAAA,EACAC,cAAA,EACAC,MAAA,SAAAO,GAiDA,GAhDAf,OAAAC,iBAAAE,QAAAQ,KAAAa,mBAAAT,IACAU,UACApB,YAAA,EACAC,UAAA,EACAC,cAAA,EACAC,UAQAkB,WACArB,YAAA,EACAC,UAAA,EACAC,cAAA,EACAC,MAAAO,EAAAY,WAAAC,eAAA,aAAAb,EAAAc,aAAA,aAAA,KAUAC,aACAzB,YAAA,EACAC,UAAA,EACAC,cAAA,EACAC,OAAAO,EAAAY,WAAAC,eAAA,gBAAA,SAAAb,EAAAc,aAAA,gBAOAE,kBACA1B,YAAA,EACAC,UAAA,EACAC,cAAA,EACAC,MAAAO,EAAAY,WAAAC,eAAA,oBACA,SAAAb,EAAAc,aAAA,qBACAd,EAAAY,WAAAC,eAAA,gBAAA,SAAAb,EAAAc,aAAA,kBAIAd,EAAAY,WAAAC,eAAA,OAAA,CACA,GAAAI,GAAAhB,SAAAiB,cAAA,IAAAlB,EAAAc,aAAA,OAEA,IAAA,OAAAG,EACA,KAAA,IAAAE,OAAA,8BAAAnB,EAAAc,aAAA,OAAA,0CAEA1B,SAAAQ,KAAAwB,sBAAApB,EAAA,SAAAqB,GACAjC,QAAAQ,KAAA0B,KAAAtB,EAAA,YAAAqB,KAKArB,EAAAuB,iBAAA,QAAA,SAAAC,GACA,UAAAA,EAAAC,MACAzB,EAAA0B,WAIAzC,OAAAC,iBAAAE,QAAAQ,KAAAa,mBAAAT,IAMA2B,MACArC,YAAA,EACAsC,IAAA,WACA,MAAAjC,MAAAe,WAOAmB,YACAvC,YAAA,EACAsC,IAAA,WAEA,MAAA5B,KASA8B,YACAxC,YAAA,EACAsC,IAAA,WACA,MAAA5B,KAQA+B,QACAtC,MAAA,WACA,SAAAE,KAAAmB,aAAA,SACAnB,KAAAkC,WAAAG,UAWAN,QACApC,YAAA,EACAG,MAAA,WACA,GAAAwC,GAAAtC,KAAAuC,WAAAvC,KAAAmC,WAAArC,MAEA,OAAA,KAAAwC,EAAAE,YACAxC,KAAAmC,WAAArC,MAAA,KAIAE,KAAAoB,cACAkB,EAAA7C,QAAAQ,KAAAmB,YAAAkB,IAGAtC,KAAAmC,WAAArC,MAAA,QAEA,IAAAwC,EAAAE,QAIAxC,KAAAyC,OAAAH,OAYAC,YACA5C,YAAA,EACAG,MAAA,SAAA4C,GACA,GAAA3C,GAAAC,IAkBA,OAhBA0C,GAAAA,EACAC,QAAA3C,KAAAgB,oBAAA4B,QAAA5C,KAAAgB,UAAA,GAAA4B,QAAA5C,KAAAgB,UAAA,WAAA,MAAAhB,KAAAgB,WACA6B,MAAA7C,KAAAgB,WACA8B,IAAA,SAAAhD,GACA,MAAAA,GAAAiD,WAAAC,SAEAC,OAAA,SAAAnD,EAAAoD,EAAAC,GACA,QAAApD,EAAAsB,kBACA8B,EAAAC,QAAAtD,KAAAoD,IAKApD,EAAAiD,WAAAP,OAAA,MAwBAC,QACA9C,YAAA,EACAG,MAAA,WACA,GAAA,IAAAK,UAAAqC,OACA,KAAA,IAAAhB,OAAA,0CAGA,IAAA6B,GAAA5D,QAAAQ,KAAAC,WAAAC,UAEAH,MAAAoB,cACAiC,EAAA5D,QAAAQ,KAAAmB,YAAAiC,IAGArD,KAAAe,SAAAf,KAAAe,SAAAuC,OAAAD,GAEArD,KAAAoB,cACApB,KAAAe,SAAAtB,QAAAQ,KAAAmB,YAAApB,KAAAe,WAGAtB,QAAAQ,KAAA0B,KAAA3B,KAAA,UAAAgC,KAAAqB,IACA5D,QAAAQ,KAAA0B,KAAA3B,KAAA,UACAuD,QAAAF,EACAG,WACAC,gBAoBAC,QACA/D,YAAA,EACAG,MAAA,WACA,GAAA,IAAAK,UAAAqC,OACA,MAAAxC,MAAA2D,OACA,IAAA,OAAAxD,UAAA,IAAAA,UAAA,QACA,MAAAH,MAAA2D,OAGA,IAAAN,GAAA5D,QAAAQ,KAAAC,WAAAC,WACAyD,IAEA5D,MAAAe,SAAAf,KAAAe,SAAAkC,OAAA,SAAAjB,EAAA6B,GACA,MAAAR,GAAAD,QAAAS,GAAA,IAIAD,EAAAE,KAAA9B,IACA,KAGAvC,QAAAQ,KAAA0B,KAAA3B,KAAA,UAAAgC,KAAA4B,IACAnE,QAAAQ,KAAA0B,KAAA3B,KAAA,UACAuD,WACAC,QAAAI,EACAH,gBASAE,OACAhE,YAAA,EACAG,MAAA,WACA,GAAAiE,GAAA/D,KAAAe,QAEAf,MAAAe,YAEAtB,QAAAQ,KAAA0B,KAAA3B,KAAA,UAAAgC,KAAA+B,IACAtE,QAAAQ,KAAA0B,KAAA3B,KAAA,UACAuD,WACAC,QAAAO,EACAN,gBAWAO,SACArE,YAAA,EACAG,MAAA,SAAA+D,EAAAI,GACA,GAAAJ,GAAA7D,KAAAe,SAAAyB,QAAAqB,EAAA,EACA,KAAA,IAAArC,OAAA,wFAAA,IAAAxB,KAAAe,SAAAyB,OAAA,EAAAxC,KAAAe,SAAAyB,OAAA,GAAA,IAGA,IAAA0B,GAAAlE,KAAAe,SAAA8C,EACA7D,MAAAe,SAAA8C,GAAAI,EAEAxE,QAAAQ,KAAA0B,KAAA3B,KAAA,YACA6D,MAAAA,EACAM,IAAAD,EACAE,MAAApE,KAAAe,SAAA8C,KAGApE,QAAAQ,KAAA0B,KAAA3B,KAAA,UACAuD,WACAC,WACAC,WAAAU,IAAAD,EAAAE,MAAApE,KAAAe,SAAA8C,GAAAA,MAAAA,QAcAT,SACAzD,YAAA,EACAC,UAAA,EACAC,cAAA,EACAC,MAAA,SAAAuE,GAEA,IAAA,GADAR,MACAS,EAAA,EAAAA,EAAAtE,KAAAe,SAAAyB,OAAA8B,IACA,GAAAtE,KAAAe,SAAAuD,KAAAD,EAAA,CACAR,EAAAS,CACA,OAGA,MAAAT","file":"listinput.min.js","sourcesContent":["'use strict'\n\n/**\n * @component chassis-listinput\n * A component that maintains a small dataset of it's elements.\n * @fires append\n * A payload is sent with the data that was added to the list.\n *\n * **Example**\n *\n * ```js\n * {\n *   detail: {\n *   \t data: ['item1', 'item2']\n *   }\n * }\n * ```\n * @fires update\n * Triggered whenever the list is modified. The modifications are\n * delivered to event handlers.\n *\n * ```js\n * {\n *   detail: {\n *     created: ['item1', 'item2'], // The values added to the list.\n *     deleted: ['item1', 'item2'], // The values removed from the list.\n *     modified: [                  // The modified values.\n *     \t {old: 'item1', new: 'item1_changed', index: 0},\n *     \t {old: 'item2', new: 'item2_changed', index: 1}\n *     ]\n *   }\n * }\n * ```\n * @fires remove\n * Triggered when data is removed from the list.\n *\n * **Example Payload**\n * ```js\n * {\n *   detail: {\n *     data: ['item1', 'item2']\n *   }\n * }\n * ```\n * @fires modify\n * Triggered when a list data item is changed.\n *\n * **Example Payload**\n * ```js\n * {\n *   detail: {\n *     index: 0, // First item in the list.\n *     old: 'oldValue',\n *     new: 'newValue' // Current value.\n *   }\n * }\n * ```\n */\nObject.defineProperties(window.chassis, {\n  listinput: {\n    enumerable: true,\n    writable: false,\n    configurable: false,\n    value: function () {\n      var me = this\n      chassis.core.spliceArgs(arguments).forEach(function (element) {\n        if (typeof element === 'string') {\n          document.querySelectorAll(element).forEach(function (el) {\n            me.applyListInput(el)\n          })\n        } else if (element instanceof HTMLElement) {\n          me.applyListInput(element)\n        } else {\n          console.warn('Could not apply listinput to element. Element is not a valid HTMLElement or CSS selector.')\n          console.log(element)\n        }\n      })\n    }\n  },\n\n  applyListInput: {\n    enumerable: false,\n    writable: false,\n    configurable: false,\n    value: function (element) {\n      Object.defineProperties(chassis.core.getObjectPrototype(element), {\n        listData: {\n          enumerable: false,\n          writable: true,\n          configurable: false,\n          value: []\n        },\n\n        /**\n         * @attribute {string|regexp} [separator=,]\n         * The character used to separate list items. By default, this is a comma.\n         * This can also be a regular expression.\n         */\n        separator: {\n          enumerable: false,\n          writable: true,\n          configurable: false,\n          value: element.attributes.hasOwnProperty('separator') ? element.getAttribute('separator') : ','\n        },\n\n        /**\n         * @attribute {boolean} [deduplicate=true]\n         * Setting to `true` (default) assures the list data contains no duplicate\n         * values. Whatever value is defined for this becomes the default for\n         * #deduplicateInput.\n         * @type {Object}\n         */\n        deduplicate: {\n          enumerable: false,\n          writable: true,\n          configurable: false,\n          value: element.attributes.hasOwnProperty('deduplicate') ? element.getAttribute('deduplicate') === 'true' : true\n        },\n\n        /**\n         * @attribute {boolean} [deduplicateInput=true]\n         * Ignore duplicate values in the input field.\n         */\n        deduplicateInput: {\n          enumerable: false,\n          writable: true,\n          configurable: false,\n          value: element.attributes.hasOwnProperty('deduplicateInput')\n            ? element.getAttribute('deduplicateInput') === 'true'\n            : (element.attributes.hasOwnProperty('deduplicate') ? element.getAttribute('deduplicate') === 'true' : true)\n        }\n      })\n\n      if (element.attributes.hasOwnProperty('for')) {\n        var list = document.querySelector('#' + element.getAttribute('for'))\n\n        if (list === null) {\n          throw new Error('The specified DOM element, ' + element.getAttribute('for') + ', could not be found or does not exist.')\n        } else {\n          chassis.core.createChildDomMonitor(element, function (detail) {\n            chassis.core.emit(element, 'domchange', detail)\n          })\n        }\n      }\n\n      element.addEventListener('keyup', function (e) {\n        if (e.code === 'Enter') {\n          element.submit()\n        }\n      })\n\n      Object.defineProperties(chassis.core.getObjectPrototype(element), {\n        /**\n         * @property {array} data\n         * The list data.\n         * @readonly\n         */\n        data: {\n          enumerable: true,\n          get: function () {\n            return this.listData\n          }\n        },\n\n        // This is a placeholder. When this is converted\n        // to a web component, the filesource will be within\n        // the shadow root.\n        filesource: {\n          enumerable: true,\n          get: function () {\n            // this.shadowRoot.lastChild\n            return element\n          }\n        },\n\n        /**\n         * @property inputField\n         * A reference to the input field.\n         * @private\n         */\n        inputField: {\n          enumerable: true,\n          get: function () {\n            return element\n          }\n        },\n\n        /**\n         * @method browse\n         * Browse for files.\n         */\n        browse: {\n          value: function () {\n            if (this.getAttribute('type') === 'file') {\n              this.filesource.click()\n            }\n          }\n        },\n\n        /**\n         * @method submit\n         * This method applies any data in the input field to the\n         * list. Depending on how the component is configured, it\n         * will deduplicate data.\n         */\n        submit: {\n          enumerable: false,\n          value: function () {\n            var inputData = this.splitInput(this.inputField.value)\n\n            if (inputData.length === 0) {\n              this.inputField.value = ''\n              return\n            }\n\n            if (this.deduplicate) {\n              inputData = chassis.core.deduplicate(inputData)\n            }\n\n            this.inputField.value = ''\n\n            if (inputData.length === 0) {\n              return\n            }\n\n            this.append(inputData)\n          }\n        },\n\n        /**\n         * @method splitInput\n         * Separates the input data into an array, optionally applying\n         * deduplication filters when applicable.\n         * @param {string} input\n         * The text data to split.\n         * @private\n         */\n        splitInput: {\n          enumerable: false,\n          value: function (input) {\n            var me = this\n\n            input = input\n              .replace(this.separator instanceof RegExp ? this.separator : new RegExp(this.separator + '{1,1000}', 'gi'), this.separator)\n              .split(this.separator)\n              .map(function (value) {\n                return value.toString().trim()\n              })\n              .filter(function (value, i, a) {\n                if (me.deduplicateInput) {\n                  if (a.indexOf(value) !== i) {\n                    return false\n                  }\n                }\n\n                return value.toString().length > 0\n              })\n\n            return input\n          }\n        },\n\n        /**\n         * @method append\n         * Append data items to the list. This method can take any number\n         * of data item arguments. It can also take a single array argument.\n         *\n         * **Example**\n         *\n         * ```js\n         * mylist.append('item1', 'item2', 'more items')\n         *\n         * // OR\n         *\n         * mylist.append(['item1', 'item2', 'more items'])\n         * ```\n         * @param {array} [items]\n         * An array of items.\n         */\n        append: {\n          enumerable: true,\n          value: function () {\n            if (arguments.length === 0) {\n              throw new Error('addData requires at least one argument.')\n            }\n\n            var args = chassis.core.spliceArgs(arguments)\n\n            if (this.deduplicate) {\n              args = chassis.core.deduplicate(args)\n            }\n\n            this.listData = this.listData.concat(args)\n\n            if (this.deduplicate) {\n              this.listData = chassis.core.deduplicate(this.listData)\n            }\n\n            chassis.core.emit(this, 'append', {data: args})\n            chassis.core.emit(this, 'update', {\n              created: args,\n              deleted: [],\n              modified: []\n            })\n          }\n        },\n\n        /**\n         * @method remove\n         * Remove the item at a specified index or indexes. Pass `-1` or `null`\n         * to remove everything.\n         *\n         * **Example**\n         *\n         * ```js\n         * mylist.remove(null) // Removes everything (same as clear())\n         * mylist.remove(-1) // Removes everything (same as clear())\n         * mylist.remove(0) // Removes the first list item.\n         * mylist.remove(0, 3) // Remove the first and fourth list items.\n         * ```\n         * @param {number[]} index\n         */\n        remove: {\n          enumerable: true,\n          value: function () {\n            if (arguments.length === 0) {\n              return this.clear()\n            } else if (arguments[0] === null || arguments[0] === -1) {\n              return this.clear()\n            }\n\n            var args = chassis.core.spliceArgs(arguments)\n            var removed = []\n\n            this.listData = this.listData.filter(function (data, index) {\n              if (args.indexOf(index) < 0) {\n                return true\n              }\n\n              removed.push(data)\n              return false\n            })\n\n            chassis.core.emit(this, 'remove', {data: removed})\n            chassis.core.emit(this, 'update', {\n              created: [],\n              deleted: removed,\n              modified: []\n            })\n          }\n        },\n\n        /**\n         * @method clear\n         * Removes all items from the data list.\n         */\n        clear: {\n          enumerable: true,\n          value: function () {\n            var originalData = this.listData\n\n            this.listData = []\n\n            chassis.core.emit(this, 'remove', {data: originalData})\n            chassis.core.emit(this, 'update', {\n              created: [],\n              deleted: originalData,\n              modified: []\n            })\n          }\n        },\n\n        /**\n         * @method setItem\n         * Modify a specific data list value at a given index.\n         * @param {number} index\n         * The index of the item within the list (0-based indexing).\n         */\n        setItem: {\n          enumerable: true,\n          value: function (index, value) {\n            if (index >= this.listData.length || index < 0) {\n              throw new Error('Index out of bounds. Must be between 0 and the size of the list (current max value: ' + (this.listData.length === 0 ? 0 : (this.listData.length - 1)) + ')')\n            }\n\n            var oldValue = this.listData[index]\n            this.listData[index] = value\n\n            chassis.core.emit(this, 'modified', {\n              index: index,\n              old: oldValue,\n              new: this.listData[index]\n            })\n\n            chassis.core.emit(this, 'update', {\n              created: [],\n              deleted: [],\n              modified: [{old: oldValue, new: this.listData[index], index: index}]\n            })\n          }\n        },\n\n        /**\n         * @method indexOf\n         * Identifies the first index of a value within the list.\n         * @param {any} value\n         * The value to return from the list.\n         * @return {number}\n         * Returns the index of the value within the data set.\n         * Returns `-1` if the value is not found.\n         */\n        indexOf: {\n          enumerable: true,\n          writable: false,\n          configurable: false,\n          value: function (value) {\n            var index = -1\n            for (var x = 0; x < this.listData.length; x++) {\n              if (this.listData[x] === value) {\n                index = x\n                break\n              }\n            }\n            return index\n          }\n        }\n      })\n    }\n  }\n})\n"],"sourceRoot":"/source/"}